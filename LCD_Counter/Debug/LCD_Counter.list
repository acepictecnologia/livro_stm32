
LCD_Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001e3c  08001e3c  00002e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001edc  08001edc  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001edc  08001edc  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001edc  08001edc  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001edc  08001edc  00002edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ee0  08001ee0  00002ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001ee4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000005c  08001f40  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001f40  000031dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002da7  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000109b  00000000  00000000  00005e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  00006ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000305  00000000  00000000  00007308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168c9  00000000  00000000  0000760d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005846  00000000  00000000  0001ded6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fa62  00000000  00000000  0002371c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a317e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013c4  00000000  00000000  000a31c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000a4588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e24 	.word	0x08001e24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08001e24 	.word	0x08001e24

0800014c <send_to_lcd>:
#define D7_GPIO_Port GPIOB

/*************** Funções para operação do LCD ************/

void send_to_lcd (char data, int rs)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
	/* RS = 1 para dados e RS = 0 para comandos */
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);
 8000158:	683b      	ldr	r3, [r7, #0]
 800015a:	b2db      	uxtb	r3, r3
 800015c:	461a      	mov	r2, r3
 800015e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000162:	4822      	ldr	r0, [pc, #136]	@ (80001ec <send_to_lcd+0xa0>)
 8000164:	f000 fdb8 	bl	8000cd8 <HAL_GPIO_WritePin>

	/* Escreve o dado em seu respectivo pino */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	08db      	lsrs	r3, r3, #3
 800016c:	b2db      	uxtb	r3, r3
 800016e:	f003 0301 	and.w	r3, r3, #1
 8000172:	b2db      	uxtb	r3, r3
 8000174:	461a      	mov	r2, r3
 8000176:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800017a:	481d      	ldr	r0, [pc, #116]	@ (80001f0 <send_to_lcd+0xa4>)
 800017c:	f000 fdac 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	089b      	lsrs	r3, r3, #2
 8000184:	b2db      	uxtb	r3, r3
 8000186:	f003 0301 	and.w	r3, r3, #1
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000192:	4817      	ldr	r0, [pc, #92]	@ (80001f0 <send_to_lcd+0xa4>)
 8000194:	f000 fda0 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	085b      	lsrs	r3, r3, #1
 800019c:	b2db      	uxtb	r3, r3
 800019e:	f003 0301 	and.w	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001aa:	4811      	ldr	r0, [pc, #68]	@ (80001f0 <send_to_lcd+0xa4>)
 80001ac:	f000 fd94 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	461a      	mov	r2, r3
 80001ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001be:	480c      	ldr	r0, [pc, #48]	@ (80001f0 <send_to_lcd+0xa4>)
 80001c0:	f000 fd8a 	bl	8000cd8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001ca:	4808      	ldr	r0, [pc, #32]	@ (80001ec <send_to_lcd+0xa0>)
 80001cc:	f000 fd84 	bl	8000cd8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001d6:	4805      	ldr	r0, [pc, #20]	@ (80001ec <send_to_lcd+0xa0>)
 80001d8:	f000 fd7e 	bl	8000cd8 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80001dc:	2001      	movs	r0, #1
 80001de:	f000 faef 	bl	80007c0 <HAL_Delay>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010800 	.word	0x40010800
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* Envia os 4 bits mais significativos do dado */
    datatosend = ((cmd>>4)&0x0f);
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	091b      	lsrs	r3, r3, #4
 8000202:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS deve ser 0 para envio de comandos
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ff9f 	bl	800014c <send_to_lcd>

    /* Envia os 4 bits menos significativos do dado */
    datatosend = ((cmd)&0x0f);
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	f003 030f 	and.w	r3, r3, #15
 8000214:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f7ff ff96 	bl	800014c <send_to_lcd>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* Envia os 4 bits mais significativos do dado */
	datatosend = ((data>>4)&0x0f);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	091b      	lsrs	r3, r3, #4
 8000236:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // RS deve ser 0 para envio de caracteres
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	2101      	movs	r1, #1
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <send_to_lcd>

	/* Envia os 4 bits menos significativos do dado */
	datatosend = ((data)&0x0f);
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f003 030f 	and.w	r3, r3, #15
 8000248:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2101      	movs	r1, #1
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ff7c 	bl	800014c <send_to_lcd>
}
 8000254:	bf00      	nop
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <lcd_clear>:

void lcd_clear (void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000260:	2001      	movs	r0, #1
 8000262:	f7ff ffc7 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(2);
 8000266:	2002      	movs	r0, #2
 8000268:	f000 faaa 	bl	80007c0 <HAL_Delay>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}

08000270 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
    switch (row)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d003      	beq.n	8000288 <lcd_put_cur+0x18>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d005      	beq.n	8000292 <lcd_put_cur+0x22>
 8000286:	e009      	b.n	800029c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800028e:	603b      	str	r3, [r7, #0]
            break;
 8000290:	e004      	b.n	800029c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000298:	603b      	str	r3, [r7, #0]
            break;
 800029a:	bf00      	nop
    }

    lcd_send_cmd (col);
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ffa7 	bl	80001f4 <lcd_send_cmd>
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <lcd_init>:


void lcd_init (void)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	af00      	add	r7, sp, #0
	// Inicialização no modo 4 bits
	HAL_Delay(50);  // Aguarda por tempo >40ms
 80002b2:	2032      	movs	r0, #50	@ 0x32
 80002b4:	f000 fa84 	bl	80007c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002b8:	2030      	movs	r0, #48	@ 0x30
 80002ba:	f7ff ff9b 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(5);  // Aguarda por tempo >4.1ms
 80002be:	2005      	movs	r0, #5
 80002c0:	f000 fa7e 	bl	80007c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002c4:	2030      	movs	r0, #48	@ 0x30
 80002c6:	f7ff ff95 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(1);  // Aguarda por tempo >100us
 80002ca:	2001      	movs	r0, #1
 80002cc:	f000 fa78 	bl	80007c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002d0:	2030      	movs	r0, #48	@ 0x30
 80002d2:	f7ff ff8f 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f000 fa72 	bl	80007c0 <HAL_Delay>

	lcd_send_cmd (0x02);  // Modo 4bits
 80002dc:	2002      	movs	r0, #2
 80002de:	f7ff ff89 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fa6c 	bl	80007c0 <HAL_Delay>

    // Inicialização do LCD
	lcd_send_cmd (0x28); /* Comunicação em 4 bits, display de 2 linhas e
 80002e8:	2028      	movs	r0, #40	@ 0x28
 80002ea:	f7ff ff83 	bl	80001f4 <lcd_send_cmd>
                            matriz 7X5 */
	HAL_Delay(1);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 fa66 	bl	80007c0 <HAL_Delay>
	lcd_send_cmd (0x08); /* Controle para ligar/desligar o display
 80002f4:	2008      	movs	r0, #8
 80002f6:	f7ff ff7d 	bl	80001f4 <lcd_send_cmd>
                            --> D=0,C=0, B=0  ---> display off */
	HAL_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 fa60 	bl	80007c0 <HAL_Delay>
	lcd_send_cmd (0x01); // Limpa o LCD
 8000300:	2001      	movs	r0, #1
 8000302:	f7ff ff77 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(1);
 8000306:	2001      	movs	r0, #1
 8000308:	f000 fa5a 	bl	80007c0 <HAL_Delay>
	HAL_Delay(1);
 800030c:	2001      	movs	r0, #1
 800030e:	f000 fa57 	bl	80007c0 <HAL_Delay>
	lcd_send_cmd (0x06); /* Deslocamento do cursor à direita após um novo
 8000312:	2006      	movs	r0, #6
 8000314:	f7ff ff6e 	bl	80001f4 <lcd_send_cmd>
                            caractere */
	HAL_Delay(1);
 8000318:	2001      	movs	r0, #1
 800031a:	f000 fa51 	bl	80007c0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Liga o display sem cursor
 800031e:	200c      	movs	r0, #12
 8000320:	f7ff ff68 	bl	80001f4 <lcd_send_cmd>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}

08000328 <lcd_send_string>:


void lcd_send_string (char *str)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000330:	e006      	b.n	8000340 <lcd_send_string+0x18>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	1c5a      	adds	r2, r3, #1
 8000336:	607a      	str	r2, [r7, #4]
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff74 	bl	8000228 <lcd_send_data>
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1f4      	bne.n	8000332 <lcd_send_string+0xa>
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 f9d0 	bl	80006fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f860 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 f8a4 	bl	80004ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000364:	f7ff ffa3 	bl	80002ae <lcd_init>
  lcd_put_cur(0, 0);
 8000368:	2100      	movs	r1, #0
 800036a:	2000      	movs	r0, #0
 800036c:	f7ff ff80 	bl	8000270 <lcd_put_cur>
  lcd_send_string("HELLO ");
 8000370:	4822      	ldr	r0, [pc, #136]	@ (80003fc <main+0xa8>)
 8000372:	f7ff ffd9 	bl	8000328 <lcd_send_string>
  lcd_send_string("WORLD ");
 8000376:	4822      	ldr	r0, [pc, #136]	@ (8000400 <main+0xac>)
 8000378:	f7ff ffd6 	bl	8000328 <lcd_send_string>
  lcd_send_string("FROM");
 800037c:	4821      	ldr	r0, [pc, #132]	@ (8000404 <main+0xb0>)
 800037e:	f7ff ffd3 	bl	8000328 <lcd_send_string>

  lcd_put_cur(1, 0);
 8000382:	2100      	movs	r1, #0
 8000384:	2001      	movs	r0, #1
 8000386:	f7ff ff73 	bl	8000270 <lcd_put_cur>
  lcd_send_string("CARLOS SANDRINI.");
 800038a:	481f      	ldr	r0, [pc, #124]	@ (8000408 <main+0xb4>)
 800038c:	f7ff ffcc 	bl	8000328 <lcd_send_string>
  HAL_Delay(2000);
 8000390:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000394:	f000 fa14 	bl	80007c0 <HAL_Delay>
  lcd_clear();
 8000398:	f7ff ff60 	bl	800025c <lcd_clear>

  lcd_put_cur(0, 4);
 800039c:	2104      	movs	r1, #4
 800039e:	2000      	movs	r0, #0
 80003a0:	f7ff ff66 	bl	8000270 <lcd_put_cur>
  lcd_send_string("CONTAGEM");
 80003a4:	4819      	ldr	r0, [pc, #100]	@ (800040c <main+0xb8>)
 80003a6:	f7ff ffbf 	bl	8000328 <lcd_send_string>
  lcd_put_cur(1, 6);
 80003aa:	2106      	movs	r1, #6
 80003ac:	2001      	movs	r0, #1
 80003ae:	f7ff ff5f 	bl	8000270 <lcd_put_cur>
  lcd_send_string("0000");
 80003b2:	4817      	ldr	r0, [pc, #92]	@ (8000410 <main+0xbc>)
 80003b4:	f7ff ffb8 	bl	8000328 <lcd_send_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(bufferLCD, "%04d", count);
 80003b8:	4b16      	ldr	r3, [pc, #88]	@ (8000414 <main+0xc0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	461a      	mov	r2, r3
 80003be:	4916      	ldr	r1, [pc, #88]	@ (8000418 <main+0xc4>)
 80003c0:	4816      	ldr	r0, [pc, #88]	@ (800041c <main+0xc8>)
 80003c2:	f001 f87f 	bl	80014c4 <siprintf>

	  lcd_put_cur(1, 6);
 80003c6:	2106      	movs	r1, #6
 80003c8:	2001      	movs	r0, #1
 80003ca:	f7ff ff51 	bl	8000270 <lcd_put_cur>
	  lcd_send_string(bufferLCD);
 80003ce:	4813      	ldr	r0, [pc, #76]	@ (800041c <main+0xc8>)
 80003d0:	f7ff ffaa 	bl	8000328 <lcd_send_string>

	  count++;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <main+0xc0>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a0e      	ldr	r2, [pc, #56]	@ (8000414 <main+0xc0>)
 80003dc:	6013      	str	r3, [r2, #0]
	  if (count > 9999) count = 0;
 80003de:	4b0d      	ldr	r3, [pc, #52]	@ (8000414 <main+0xc0>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80003e6:	4293      	cmp	r3, r2
 80003e8:	dd02      	ble.n	80003f0 <main+0x9c>
 80003ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <main+0xc0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]

	  HAL_Delay(500);
 80003f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003f4:	f000 f9e4 	bl	80007c0 <HAL_Delay>
	  sprintf(bufferLCD, "%04d", count);
 80003f8:	e7de      	b.n	80003b8 <main+0x64>
 80003fa:	bf00      	nop
 80003fc:	08001e3c 	.word	0x08001e3c
 8000400:	08001e44 	.word	0x08001e44
 8000404:	08001e4c 	.word	0x08001e4c
 8000408:	08001e54 	.word	0x08001e54
 800040c:	08001e68 	.word	0x08001e68
 8000410:	08001e74 	.word	0x08001e74
 8000414:	20000088 	.word	0x20000088
 8000418:	08001e7c 	.word	0x08001e7c
 800041c:	20000078 	.word	0x20000078

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b090      	sub	sp, #64	@ 0x40
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	2228      	movs	r2, #40	@ 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f001 f86a 	bl	8001508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000442:	2301      	movs	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000446:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800044a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000454:	2302      	movs	r3, #2
 8000456:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000458:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800045c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	4618      	mov	r0, r3
 800046a:	f000 fc4d 	bl	8000d08 <HAL_RCC_OscConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000474:	f000 f87c 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	230f      	movs	r3, #15
 800047a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047c:	2302      	movs	r3, #2
 800047e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2102      	movs	r1, #2
 8000492:	4618      	mov	r0, r3
 8000494:	f000 feba 	bl	800120c <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800049e:	f000 f867 	bl	8000570 <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3740      	adds	r7, #64	@ 0x40
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c0:	4b28      	ldr	r3, [pc, #160]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a27      	ldr	r2, [pc, #156]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b25      	ldr	r3, [pc, #148]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0320 	and.w	r3, r3, #32
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b22      	ldr	r3, [pc, #136]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a21      	ldr	r2, [pc, #132]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <MX_GPIO_Init+0xb8>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800050e:	4816      	ldr	r0, [pc, #88]	@ (8000568 <MX_GPIO_Init+0xbc>)
 8000510:	f000 fbe2 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 800051a:	4814      	ldr	r0, [pc, #80]	@ (800056c <MX_GPIO_Init+0xc0>)
 800051c:	f000 fbdc 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000520:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052e:	2303      	movs	r3, #3
 8000530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	480b      	ldr	r0, [pc, #44]	@ (8000568 <MX_GPIO_Init+0xbc>)
 800053a:	f000 fa49 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800053e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054c:	2303      	movs	r3, #3
 800054e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_GPIO_Init+0xc0>)
 8000558:	f000 fa3a 	bl	80009d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	40010c00 	.word	0x40010c00
 800056c:	40010800 	.word	0x40010800

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <Error_Handler+0x8>

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000582:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <HAL_MspInit+0x5c>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <HAL_MspInit+0x5c>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <HAL_MspInit+0x5c>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <HAL_MspInit+0x5c>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a0e      	ldr	r2, [pc, #56]	@ (80005d8 <HAL_MspInit+0x5c>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <HAL_MspInit+0x5c>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <HAL_MspInit+0x60>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <HAL_MspInit+0x60>)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010000 	.word	0x40010000

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <NMI_Handler+0x4>

080005e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <MemManage_Handler+0x4>

080005f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <UsageFault_Handler+0x4>

08000608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000630:	f000 f8aa 	bl	8000788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000640:	4a14      	ldr	r2, [pc, #80]	@ (8000694 <_sbrk+0x5c>)
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <_sbrk+0x60>)
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	4b13      	ldr	r3, [pc, #76]	@ (800069c <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <_sbrk+0x64>)
 8000656:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <_sbrk+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	429a      	cmp	r2, r3
 8000666:	d207      	bcs.n	8000678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000668:	f000 ff56 	bl	8001518 <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	e009      	b.n	800068c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <_sbrk+0x64>)
 8000688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20005000 	.word	0x20005000
 8000698:	00000400 	.word	0x00000400
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	200001e0 	.word	0x200001e0

080006a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b0:	f7ff fff8 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480b      	ldr	r0, [pc, #44]	@ (80006e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006b6:	490c      	ldr	r1, [pc, #48]	@ (80006e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a09      	ldr	r2, [pc, #36]	@ (80006f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006cc:	4c09      	ldr	r4, [pc, #36]	@ (80006f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006da:	f000 ff23 	bl	8001524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff fe39 	bl	8000354 <main>
  bx lr
 80006e2:	4770      	bx	lr
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006ec:	08001ee4 	.word	0x08001ee4
  ldr r2, =_sbss
 80006f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006f4:	200001dc 	.word	0x200001dc

080006f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <ADC1_2_IRQHandler>
	...

080006fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <HAL_Init+0x28>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a07      	ldr	r2, [pc, #28]	@ (8000724 <HAL_Init+0x28>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800070c:	2003      	movs	r0, #3
 800070e:	f000 f92b 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000712:	200f      	movs	r0, #15
 8000714:	f000 f808 	bl	8000728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000718:	f7ff ff30 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40022000 	.word	0x40022000

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <HAL_InitTick+0x54>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <HAL_InitTick+0x58>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000742:	fbb2 f3f3 	udiv	r3, r2, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f935 	bl	80009b6 <HAL_SYSTICK_Config>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e00e      	b.n	8000774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b0f      	cmp	r3, #15
 800075a:	d80a      	bhi.n	8000772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075c:	2200      	movs	r2, #0
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f000 f90b 	bl	800097e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000768:	4a06      	ldr	r2, [pc, #24]	@ (8000784 <HAL_InitTick+0x5c>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000
 8000780:	20000008 	.word	0x20000008
 8000784:	20000004 	.word	0x20000004

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_IncTick+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <HAL_IncTick+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a03      	ldr	r2, [pc, #12]	@ (80007a8 <HAL_IncTick+0x20>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000090 	.word	0x20000090

080007ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b02      	ldr	r3, [pc, #8]	@ (80007bc <HAL_GetTick+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000090 	.word	0x20000090

080007c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c8:	f7ff fff0 	bl	80007ac <HAL_GetTick>
 80007cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d8:	d005      	beq.n	80007e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007da:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <HAL_Delay+0x44>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e6:	bf00      	nop
 80007e8:	f7ff ffe0 	bl	80007ac <HAL_GetTick>
 80007ec:	4602      	mov	r2, r0
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8f7      	bhi.n	80007e8 <HAL_Delay+0x28>
  {
  }
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008

08000808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083a:	4a04      	ldr	r2, [pc, #16]	@ (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	60d3      	str	r3, [r2, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	@ (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	@ (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	@ 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	@ 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000934:	d301      	bcc.n	800093a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e00f      	b.n	800095a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <SysTick_Config+0x40>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	210f      	movs	r1, #15
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f7ff ff90 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <SysTick_Config+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000952:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <SysTick_Config+0x40>)
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff49 	bl	8000808 <__NVIC_SetPriorityGrouping>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff5e 	bl	8000850 <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ff90 	bl	80008c0 <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5f 	bl	800086c <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ffb0 	bl	8000924 <SysTick_Config>
 80009c4:	4603      	mov	r3, r0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b08b      	sub	sp, #44	@ 0x2c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e2:	e169      	b.n	8000cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009e4:	2201      	movs	r2, #1
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	f040 8158 	bne.w	8000cb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	4a9a      	ldr	r2, [pc, #616]	@ (8000c70 <HAL_GPIO_Init+0x2a0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d05e      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a0c:	4a98      	ldr	r2, [pc, #608]	@ (8000c70 <HAL_GPIO_Init+0x2a0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d875      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a12:	4a98      	ldr	r2, [pc, #608]	@ (8000c74 <HAL_GPIO_Init+0x2a4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d058      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a18:	4a96      	ldr	r2, [pc, #600]	@ (8000c74 <HAL_GPIO_Init+0x2a4>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d86f      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a1e:	4a96      	ldr	r2, [pc, #600]	@ (8000c78 <HAL_GPIO_Init+0x2a8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d052      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a24:	4a94      	ldr	r2, [pc, #592]	@ (8000c78 <HAL_GPIO_Init+0x2a8>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d869      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a2a:	4a94      	ldr	r2, [pc, #592]	@ (8000c7c <HAL_GPIO_Init+0x2ac>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d04c      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a30:	4a92      	ldr	r2, [pc, #584]	@ (8000c7c <HAL_GPIO_Init+0x2ac>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d863      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a36:	4a92      	ldr	r2, [pc, #584]	@ (8000c80 <HAL_GPIO_Init+0x2b0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d046      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a3c:	4a90      	ldr	r2, [pc, #576]	@ (8000c80 <HAL_GPIO_Init+0x2b0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d85d      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	d82a      	bhi.n	8000a9c <HAL_GPIO_Init+0xcc>
 8000a46:	2b12      	cmp	r3, #18
 8000a48:	d859      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <HAL_GPIO_Init+0x80>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000acb 	.word	0x08000acb
 8000a54:	08000aa5 	.word	0x08000aa5
 8000a58:	08000ab7 	.word	0x08000ab7
 8000a5c:	08000af9 	.word	0x08000af9
 8000a60:	08000aff 	.word	0x08000aff
 8000a64:	08000aff 	.word	0x08000aff
 8000a68:	08000aff 	.word	0x08000aff
 8000a6c:	08000aff 	.word	0x08000aff
 8000a70:	08000aff 	.word	0x08000aff
 8000a74:	08000aff 	.word	0x08000aff
 8000a78:	08000aff 	.word	0x08000aff
 8000a7c:	08000aff 	.word	0x08000aff
 8000a80:	08000aff 	.word	0x08000aff
 8000a84:	08000aff 	.word	0x08000aff
 8000a88:	08000aff 	.word	0x08000aff
 8000a8c:	08000aff 	.word	0x08000aff
 8000a90:	08000aff 	.word	0x08000aff
 8000a94:	08000aad 	.word	0x08000aad
 8000a98:	08000ac1 	.word	0x08000ac1
 8000a9c:	4a79      	ldr	r2, [pc, #484]	@ (8000c84 <HAL_GPIO_Init+0x2b4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d013      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aa2:	e02c      	b.n	8000afe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	623b      	str	r3, [r7, #32]
          break;
 8000aaa:	e029      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e024      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	3308      	adds	r3, #8
 8000abc:	623b      	str	r3, [r7, #32]
          break;
 8000abe:	e01f      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	330c      	adds	r3, #12
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	e01a      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	623b      	str	r3, [r7, #32]
          break;
 8000ad6:	e013      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d105      	bne.n	8000aec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	611a      	str	r2, [r3, #16]
          break;
 8000aea:	e009      	b.n	8000b00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aec:	2308      	movs	r3, #8
 8000aee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	69fa      	ldr	r2, [r7, #28]
 8000af4:	615a      	str	r2, [r3, #20]
          break;
 8000af6:	e003      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
          break;
 8000afc:	e000      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          break;
 8000afe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2bff      	cmp	r3, #255	@ 0xff
 8000b04:	d801      	bhi.n	8000b0a <HAL_GPIO_Init+0x13a>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	e001      	b.n	8000b0e <HAL_GPIO_Init+0x13e>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2bff      	cmp	r3, #255	@ 0xff
 8000b14:	d802      	bhi.n	8000b1c <HAL_GPIO_Init+0x14c>
 8000b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	e002      	b.n	8000b22 <HAL_GPIO_Init+0x152>
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1e:	3b08      	subs	r3, #8
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	210f      	movs	r1, #15
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	401a      	ands	r2, r3
 8000b34:	6a39      	ldr	r1, [r7, #32]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 80b1 	beq.w	8000cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b50:	4b4d      	ldr	r3, [pc, #308]	@ (8000c88 <HAL_GPIO_Init+0x2b8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a4c      	ldr	r2, [pc, #304]	@ (8000c88 <HAL_GPIO_Init+0x2b8>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c88 <HAL_GPIO_Init+0x2b8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b68:	4a48      	ldr	r2, [pc, #288]	@ (8000c8c <HAL_GPIO_Init+0x2bc>)
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	220f      	movs	r2, #15
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a40      	ldr	r2, [pc, #256]	@ (8000c90 <HAL_GPIO_Init+0x2c0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d013      	beq.n	8000bbc <HAL_GPIO_Init+0x1ec>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a3f      	ldr	r2, [pc, #252]	@ (8000c94 <HAL_GPIO_Init+0x2c4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d00d      	beq.n	8000bb8 <HAL_GPIO_Init+0x1e8>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c98 <HAL_GPIO_Init+0x2c8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d007      	beq.n	8000bb4 <HAL_GPIO_Init+0x1e4>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a3d      	ldr	r2, [pc, #244]	@ (8000c9c <HAL_GPIO_Init+0x2cc>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d101      	bne.n	8000bb0 <HAL_GPIO_Init+0x1e0>
 8000bac:	2303      	movs	r3, #3
 8000bae:	e006      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	e004      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e002      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc0:	f002 0203 	and.w	r2, r2, #3
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	4093      	lsls	r3, r2
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bce:	492f      	ldr	r1, [pc, #188]	@ (8000c8c <HAL_GPIO_Init+0x2bc>)
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d006      	beq.n	8000bf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	492c      	ldr	r1, [pc, #176]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
 8000bf4:	e006      	b.n	8000c04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	4928      	ldr	r1, [pc, #160]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d006      	beq.n	8000c1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c10:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	4922      	ldr	r1, [pc, #136]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60cb      	str	r3, [r1, #12]
 8000c1c:	e006      	b.n	8000c2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	491e      	ldr	r1, [pc, #120]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	4918      	ldr	r1, [pc, #96]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	604b      	str	r3, [r1, #4]
 8000c44:	e006      	b.n	8000c54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4914      	ldr	r1, [pc, #80]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d021      	beq.n	8000ca4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	490e      	ldr	r1, [pc, #56]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	600b      	str	r3, [r1, #0]
 8000c6c:	e021      	b.n	8000cb2 <HAL_GPIO_Init+0x2e2>
 8000c6e:	bf00      	nop
 8000c70:	10320000 	.word	0x10320000
 8000c74:	10310000 	.word	0x10310000
 8000c78:	10220000 	.word	0x10220000
 8000c7c:	10210000 	.word	0x10210000
 8000c80:	10120000 	.word	0x10120000
 8000c84:	10110000 	.word	0x10110000
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	40010800 	.word	0x40010800
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	40011400 	.word	0x40011400
 8000ca0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <HAL_GPIO_Init+0x304>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	4909      	ldr	r1, [pc, #36]	@ (8000cd4 <HAL_GPIO_Init+0x304>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f47f ae8e 	bne.w	80009e4 <HAL_GPIO_Init+0x14>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	372c      	adds	r7, #44	@ 0x2c
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40010400 	.word	0x40010400

08000cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce8:	787b      	ldrb	r3, [r7, #1]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cf4:	e003      	b.n	8000cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	041a      	lsls	r2, r3, #16
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	611a      	str	r2, [r3, #16]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e272      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 8087 	beq.w	8000e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d28:	4b92      	ldr	r3, [pc, #584]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d00c      	beq.n	8000d4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d34:	4b8f      	ldr	r3, [pc, #572]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d112      	bne.n	8000d66 <HAL_RCC_OscConfig+0x5e>
 8000d40:	4b8c      	ldr	r3, [pc, #560]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d4c:	d10b      	bne.n	8000d66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4e:	4b89      	ldr	r3, [pc, #548]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d06c      	beq.n	8000e34 <HAL_RCC_OscConfig+0x12c>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d168      	bne.n	8000e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e24c      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d6e:	d106      	bne.n	8000d7e <HAL_RCC_OscConfig+0x76>
 8000d70:	4b80      	ldr	r3, [pc, #512]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a7f      	ldr	r2, [pc, #508]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	e02e      	b.n	8000ddc <HAL_RCC_OscConfig+0xd4>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10c      	bne.n	8000da0 <HAL_RCC_OscConfig+0x98>
 8000d86:	4b7b      	ldr	r3, [pc, #492]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b78      	ldr	r3, [pc, #480]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a77      	ldr	r2, [pc, #476]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e01d      	b.n	8000ddc <HAL_RCC_OscConfig+0xd4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000da8:	d10c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0xbc>
 8000daa:	4b72      	ldr	r3, [pc, #456]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a71      	ldr	r2, [pc, #452]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	4b6f      	ldr	r3, [pc, #444]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a6e      	ldr	r2, [pc, #440]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e00b      	b.n	8000ddc <HAL_RCC_OscConfig+0xd4>
 8000dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b68      	ldr	r3, [pc, #416]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a67      	ldr	r2, [pc, #412]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d013      	beq.n	8000e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fce2 	bl	80007ac <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff fcde 	bl	80007ac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b64      	cmp	r3, #100	@ 0x64
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e200      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f0      	beq.n	8000dec <HAL_RCC_OscConfig+0xe4>
 8000e0a:	e014      	b.n	8000e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fcce 	bl	80007ac <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fcca 	bl	80007ac <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	@ 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e1ec      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e26:	4b53      	ldr	r3, [pc, #332]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x10c>
 8000e32:	e000      	b.n	8000e36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d063      	beq.n	8000f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e42:	4b4c      	ldr	r3, [pc, #304]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00b      	beq.n	8000e66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e4e:	4b49      	ldr	r3, [pc, #292]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d11c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x18c>
 8000e5a:	4b46      	ldr	r3, [pc, #280]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d116      	bne.n	8000e94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e66:	4b43      	ldr	r3, [pc, #268]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d005      	beq.n	8000e7e <HAL_RCC_OscConfig+0x176>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d001      	beq.n	8000e7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e1c0      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	4939      	ldr	r1, [pc, #228]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e92:	e03a      	b.n	8000f0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d020      	beq.n	8000ede <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e9c:	4b36      	ldr	r3, [pc, #216]	@ (8000f78 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fc83 	bl	80007ac <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fc7f 	bl	80007ac <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e1a1      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4927      	ldr	r1, [pc, #156]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
 8000edc:	e015      	b.n	8000f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fc62 	bl	80007ac <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eec:	f7ff fc5e 	bl	80007ac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e180      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d03a      	beq.n	8000f8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d019      	beq.n	8000f52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <HAL_RCC_OscConfig+0x274>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fc42 	bl	80007ac <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fc3e 	bl	80007ac <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e160      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fa9c 	bl	8001488 <RCC_Delay>
 8000f50:	e01c      	b.n	8000f8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <HAL_RCC_OscConfig+0x274>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f58:	f7ff fc28 	bl	80007ac <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5e:	e00f      	b.n	8000f80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f60:	f7ff fc24 	bl	80007ac <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d908      	bls.n	8000f80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e146      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	42420000 	.word	0x42420000
 8000f7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f80:	4b92      	ldr	r3, [pc, #584]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1e9      	bne.n	8000f60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80a6 	beq.w	80010e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9e:	4b8b      	ldr	r3, [pc, #556]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10d      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b88      	ldr	r3, [pc, #544]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a87      	ldr	r2, [pc, #540]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b85      	ldr	r3, [pc, #532]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc6:	4b82      	ldr	r3, [pc, #520]	@ (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d118      	bne.n	8001004 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fbe5 	bl	80007ac <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe6:	f7ff fbe1 	bl	80007ac <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	@ 0x64
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e103      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	4b75      	ldr	r3, [pc, #468]	@ (80011d0 <HAL_RCC_OscConfig+0x4c8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f0      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d106      	bne.n	800101a <HAL_RCC_OscConfig+0x312>
 800100c:	4b6f      	ldr	r3, [pc, #444]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a6e      	ldr	r2, [pc, #440]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	e02d      	b.n	8001076 <HAL_RCC_OscConfig+0x36e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x334>
 8001022:	4b6a      	ldr	r3, [pc, #424]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a69      	ldr	r2, [pc, #420]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	4b67      	ldr	r3, [pc, #412]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a66      	ldr	r2, [pc, #408]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	e01c      	b.n	8001076 <HAL_RCC_OscConfig+0x36e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b05      	cmp	r3, #5
 8001042:	d10c      	bne.n	800105e <HAL_RCC_OscConfig+0x356>
 8001044:	4b61      	ldr	r3, [pc, #388]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	4a60      	ldr	r2, [pc, #384]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6213      	str	r3, [r2, #32]
 8001050:	4b5e      	ldr	r3, [pc, #376]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a5d      	ldr	r2, [pc, #372]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6213      	str	r3, [r2, #32]
 800105c:	e00b      	b.n	8001076 <HAL_RCC_OscConfig+0x36e>
 800105e:	4b5b      	ldr	r3, [pc, #364]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a5a      	ldr	r2, [pc, #360]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	6213      	str	r3, [r2, #32]
 800106a:	4b58      	ldr	r3, [pc, #352]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a57      	ldr	r2, [pc, #348]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d015      	beq.n	80010aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107e:	f7ff fb95 	bl	80007ac <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001084:	e00a      	b.n	800109c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001086:	f7ff fb91 	bl	80007ac <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001094:	4293      	cmp	r3, r2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e0b1      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800109c:	4b4b      	ldr	r3, [pc, #300]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0ee      	beq.n	8001086 <HAL_RCC_OscConfig+0x37e>
 80010a8:	e014      	b.n	80010d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010aa:	f7ff fb7f 	bl	80007ac <HAL_GetTick>
 80010ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b0:	e00a      	b.n	80010c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b2:	f7ff fb7b 	bl	80007ac <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e09b      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c8:	4b40      	ldr	r3, [pc, #256]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1ee      	bne.n	80010b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d105      	bne.n	80010e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010da:	4b3c      	ldr	r3, [pc, #240]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a3b      	ldr	r2, [pc, #236]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8087 	beq.w	80011fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f0:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d061      	beq.n	80011c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d146      	bne.n	8001192 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001104:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <HAL_RCC_OscConfig+0x4cc>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fb4f 	bl	80007ac <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001112:	f7ff fb4b 	bl	80007ac <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e06d      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001124:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001138:	d108      	bne.n	800114c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	4921      	ldr	r1, [pc, #132]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a19      	ldr	r1, [r3, #32]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115c:	430b      	orrs	r3, r1
 800115e:	491b      	ldr	r1, [pc, #108]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <HAL_RCC_OscConfig+0x4cc>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116a:	f7ff fb1f 	bl	80007ac <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001172:	f7ff fb1b 	bl	80007ac <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e03d      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x46a>
 8001190:	e035      	b.n	80011fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <HAL_RCC_OscConfig+0x4cc>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fb08 	bl	80007ac <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a0:	f7ff fb04 	bl	80007ac <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e026      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x498>
 80011be:	e01e      	b.n	80011fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d107      	bne.n	80011d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e019      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40007000 	.word	0x40007000
 80011d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <HAL_RCC_OscConfig+0x500>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d106      	bne.n	80011fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0d0      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001220:	4b6a      	ldr	r3, [pc, #424]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d910      	bls.n	8001250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b67      	ldr	r3, [pc, #412]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 0207 	bic.w	r2, r3, #7
 8001236:	4965      	ldr	r1, [pc, #404]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800123e:	4b63      	ldr	r3, [pc, #396]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d001      	beq.n	8001250 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e0b8      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001268:	4b59      	ldr	r3, [pc, #356]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a58      	ldr	r2, [pc, #352]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001272:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001280:	4b53      	ldr	r3, [pc, #332]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a52      	ldr	r2, [pc, #328]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800128a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800128c:	4b50      	ldr	r3, [pc, #320]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	494d      	ldr	r1, [pc, #308]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d040      	beq.n	800132c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d107      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d115      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e07f      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ca:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e073      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012da:	4b3d      	ldr	r3, [pc, #244]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e06b      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ea:	4b39      	ldr	r3, [pc, #228]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f023 0203 	bic.w	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4936      	ldr	r1, [pc, #216]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012fc:	f7ff fa56 	bl	80007ac <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001302:	e00a      	b.n	800131a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001304:	f7ff fa52 	bl	80007ac <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e053      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	4b2d      	ldr	r3, [pc, #180]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 020c 	and.w	r2, r3, #12
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	429a      	cmp	r2, r3
 800132a:	d1eb      	bne.n	8001304 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d210      	bcs.n	800135c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 0207 	bic.w	r2, r3, #7
 8001342:	4922      	ldr	r1, [pc, #136]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134a:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e032      	b.n	80013c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d008      	beq.n	800137a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	4916      	ldr	r1, [pc, #88]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001386:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	490e      	ldr	r1, [pc, #56]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800139a:	f000 f821 	bl	80013e0 <HAL_RCC_GetSysClockFreq>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	490a      	ldr	r1, [pc, #40]	@ (80013d4 <HAL_RCC_ClockConfig+0x1c8>)
 80013ac:	5ccb      	ldrb	r3, [r1, r3]
 80013ae:	fa22 f303 	lsr.w	r3, r2, r3
 80013b2:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <HAL_RCC_ClockConfig+0x1cc>)
 80013b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_RCC_ClockConfig+0x1d0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f9b4 	bl	8000728 <HAL_InitTick>

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000
 80013d0:	40021000 	.word	0x40021000
 80013d4:	08001e84 	.word	0x08001e84
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_RCC_GetSysClockFreq+0x94>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d002      	beq.n	8001410 <HAL_RCC_GetSysClockFreq+0x30>
 800140a:	2b08      	cmp	r3, #8
 800140c:	d003      	beq.n	8001416 <HAL_RCC_GetSysClockFreq+0x36>
 800140e:	e027      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_RCC_GetSysClockFreq+0x98>)
 8001412:	613b      	str	r3, [r7, #16]
      break;
 8001414:	e027      	b.n	8001466 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	0c9b      	lsrs	r3, r3, #18
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	4a17      	ldr	r2, [pc, #92]	@ (800147c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d010      	beq.n	8001450 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_RCC_GetSysClockFreq+0x94>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	0c5b      	lsrs	r3, r3, #17
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	4a11      	ldr	r2, [pc, #68]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xa0>)
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <HAL_RCC_GetSysClockFreq+0x98>)
 8001442:	fb03 f202 	mul.w	r2, r3, r2
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	fbb2 f3f3 	udiv	r3, r2, r3
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e004      	b.n	800145a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a0c      	ldr	r2, [pc, #48]	@ (8001484 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	613b      	str	r3, [r7, #16]
      break;
 800145e:	e002      	b.n	8001466 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_RCC_GetSysClockFreq+0x98>)
 8001462:	613b      	str	r3, [r7, #16]
      break;
 8001464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001466:	693b      	ldr	r3, [r7, #16]
}
 8001468:	4618      	mov	r0, r3
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	007a1200 	.word	0x007a1200
 800147c:	08001e94 	.word	0x08001e94
 8001480:	08001ea4 	.word	0x08001ea4
 8001484:	003d0900 	.word	0x003d0900

08001488 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <RCC_Delay+0x34>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <RCC_Delay+0x38>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	0a5b      	lsrs	r3, r3, #9
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014a4:	bf00      	nop
  }
  while (Delay --);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1e5a      	subs	r2, r3, #1
 80014aa:	60fa      	str	r2, [r7, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f9      	bne.n	80014a4 <RCC_Delay+0x1c>
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000000 	.word	0x20000000
 80014c0:	10624dd3 	.word	0x10624dd3

080014c4 <siprintf>:
 80014c4:	b40e      	push	{r1, r2, r3}
 80014c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80014ca:	b510      	push	{r4, lr}
 80014cc:	2400      	movs	r4, #0
 80014ce:	b09d      	sub	sp, #116	@ 0x74
 80014d0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80014d2:	9002      	str	r0, [sp, #8]
 80014d4:	9006      	str	r0, [sp, #24]
 80014d6:	9107      	str	r1, [sp, #28]
 80014d8:	9104      	str	r1, [sp, #16]
 80014da:	4809      	ldr	r0, [pc, #36]	@ (8001500 <siprintf+0x3c>)
 80014dc:	4909      	ldr	r1, [pc, #36]	@ (8001504 <siprintf+0x40>)
 80014de:	f853 2b04 	ldr.w	r2, [r3], #4
 80014e2:	9105      	str	r1, [sp, #20]
 80014e4:	6800      	ldr	r0, [r0, #0]
 80014e6:	a902      	add	r1, sp, #8
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80014ec:	f000 f992 	bl	8001814 <_svfiprintf_r>
 80014f0:	9b02      	ldr	r3, [sp, #8]
 80014f2:	701c      	strb	r4, [r3, #0]
 80014f4:	b01d      	add	sp, #116	@ 0x74
 80014f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014fa:	b003      	add	sp, #12
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2000000c 	.word	0x2000000c
 8001504:	ffff0208 	.word	0xffff0208

08001508 <memset>:
 8001508:	4603      	mov	r3, r0
 800150a:	4402      	add	r2, r0
 800150c:	4293      	cmp	r3, r2
 800150e:	d100      	bne.n	8001512 <memset+0xa>
 8001510:	4770      	bx	lr
 8001512:	f803 1b01 	strb.w	r1, [r3], #1
 8001516:	e7f9      	b.n	800150c <memset+0x4>

08001518 <__errno>:
 8001518:	4b01      	ldr	r3, [pc, #4]	@ (8001520 <__errno+0x8>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2000000c 	.word	0x2000000c

08001524 <__libc_init_array>:
 8001524:	b570      	push	{r4, r5, r6, lr}
 8001526:	2600      	movs	r6, #0
 8001528:	4d0c      	ldr	r5, [pc, #48]	@ (800155c <__libc_init_array+0x38>)
 800152a:	4c0d      	ldr	r4, [pc, #52]	@ (8001560 <__libc_init_array+0x3c>)
 800152c:	1b64      	subs	r4, r4, r5
 800152e:	10a4      	asrs	r4, r4, #2
 8001530:	42a6      	cmp	r6, r4
 8001532:	d109      	bne.n	8001548 <__libc_init_array+0x24>
 8001534:	f000 fc76 	bl	8001e24 <_init>
 8001538:	2600      	movs	r6, #0
 800153a:	4d0a      	ldr	r5, [pc, #40]	@ (8001564 <__libc_init_array+0x40>)
 800153c:	4c0a      	ldr	r4, [pc, #40]	@ (8001568 <__libc_init_array+0x44>)
 800153e:	1b64      	subs	r4, r4, r5
 8001540:	10a4      	asrs	r4, r4, #2
 8001542:	42a6      	cmp	r6, r4
 8001544:	d105      	bne.n	8001552 <__libc_init_array+0x2e>
 8001546:	bd70      	pop	{r4, r5, r6, pc}
 8001548:	f855 3b04 	ldr.w	r3, [r5], #4
 800154c:	4798      	blx	r3
 800154e:	3601      	adds	r6, #1
 8001550:	e7ee      	b.n	8001530 <__libc_init_array+0xc>
 8001552:	f855 3b04 	ldr.w	r3, [r5], #4
 8001556:	4798      	blx	r3
 8001558:	3601      	adds	r6, #1
 800155a:	e7f2      	b.n	8001542 <__libc_init_array+0x1e>
 800155c:	08001edc 	.word	0x08001edc
 8001560:	08001edc 	.word	0x08001edc
 8001564:	08001edc 	.word	0x08001edc
 8001568:	08001ee0 	.word	0x08001ee0

0800156c <__retarget_lock_acquire_recursive>:
 800156c:	4770      	bx	lr

0800156e <__retarget_lock_release_recursive>:
 800156e:	4770      	bx	lr

08001570 <_free_r>:
 8001570:	b538      	push	{r3, r4, r5, lr}
 8001572:	4605      	mov	r5, r0
 8001574:	2900      	cmp	r1, #0
 8001576:	d040      	beq.n	80015fa <_free_r+0x8a>
 8001578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800157c:	1f0c      	subs	r4, r1, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	bfb8      	it	lt
 8001582:	18e4      	addlt	r4, r4, r3
 8001584:	f000 f8de 	bl	8001744 <__malloc_lock>
 8001588:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <_free_r+0x8c>)
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	b933      	cbnz	r3, 800159c <_free_r+0x2c>
 800158e:	6063      	str	r3, [r4, #4]
 8001590:	6014      	str	r4, [r2, #0]
 8001592:	4628      	mov	r0, r5
 8001594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001598:	f000 b8da 	b.w	8001750 <__malloc_unlock>
 800159c:	42a3      	cmp	r3, r4
 800159e:	d908      	bls.n	80015b2 <_free_r+0x42>
 80015a0:	6820      	ldr	r0, [r4, #0]
 80015a2:	1821      	adds	r1, r4, r0
 80015a4:	428b      	cmp	r3, r1
 80015a6:	bf01      	itttt	eq
 80015a8:	6819      	ldreq	r1, [r3, #0]
 80015aa:	685b      	ldreq	r3, [r3, #4]
 80015ac:	1809      	addeq	r1, r1, r0
 80015ae:	6021      	streq	r1, [r4, #0]
 80015b0:	e7ed      	b.n	800158e <_free_r+0x1e>
 80015b2:	461a      	mov	r2, r3
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	b10b      	cbz	r3, 80015bc <_free_r+0x4c>
 80015b8:	42a3      	cmp	r3, r4
 80015ba:	d9fa      	bls.n	80015b2 <_free_r+0x42>
 80015bc:	6811      	ldr	r1, [r2, #0]
 80015be:	1850      	adds	r0, r2, r1
 80015c0:	42a0      	cmp	r0, r4
 80015c2:	d10b      	bne.n	80015dc <_free_r+0x6c>
 80015c4:	6820      	ldr	r0, [r4, #0]
 80015c6:	4401      	add	r1, r0
 80015c8:	1850      	adds	r0, r2, r1
 80015ca:	4283      	cmp	r3, r0
 80015cc:	6011      	str	r1, [r2, #0]
 80015ce:	d1e0      	bne.n	8001592 <_free_r+0x22>
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4408      	add	r0, r1
 80015d6:	6010      	str	r0, [r2, #0]
 80015d8:	6053      	str	r3, [r2, #4]
 80015da:	e7da      	b.n	8001592 <_free_r+0x22>
 80015dc:	d902      	bls.n	80015e4 <_free_r+0x74>
 80015de:	230c      	movs	r3, #12
 80015e0:	602b      	str	r3, [r5, #0]
 80015e2:	e7d6      	b.n	8001592 <_free_r+0x22>
 80015e4:	6820      	ldr	r0, [r4, #0]
 80015e6:	1821      	adds	r1, r4, r0
 80015e8:	428b      	cmp	r3, r1
 80015ea:	bf01      	itttt	eq
 80015ec:	6819      	ldreq	r1, [r3, #0]
 80015ee:	685b      	ldreq	r3, [r3, #4]
 80015f0:	1809      	addeq	r1, r1, r0
 80015f2:	6021      	streq	r1, [r4, #0]
 80015f4:	6063      	str	r3, [r4, #4]
 80015f6:	6054      	str	r4, [r2, #4]
 80015f8:	e7cb      	b.n	8001592 <_free_r+0x22>
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
 80015fc:	200001d8 	.word	0x200001d8

08001600 <sbrk_aligned>:
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	4e0f      	ldr	r6, [pc, #60]	@ (8001640 <sbrk_aligned+0x40>)
 8001604:	460c      	mov	r4, r1
 8001606:	6831      	ldr	r1, [r6, #0]
 8001608:	4605      	mov	r5, r0
 800160a:	b911      	cbnz	r1, 8001612 <sbrk_aligned+0x12>
 800160c:	f000 fba8 	bl	8001d60 <_sbrk_r>
 8001610:	6030      	str	r0, [r6, #0]
 8001612:	4621      	mov	r1, r4
 8001614:	4628      	mov	r0, r5
 8001616:	f000 fba3 	bl	8001d60 <_sbrk_r>
 800161a:	1c43      	adds	r3, r0, #1
 800161c:	d103      	bne.n	8001626 <sbrk_aligned+0x26>
 800161e:	f04f 34ff 	mov.w	r4, #4294967295
 8001622:	4620      	mov	r0, r4
 8001624:	bd70      	pop	{r4, r5, r6, pc}
 8001626:	1cc4      	adds	r4, r0, #3
 8001628:	f024 0403 	bic.w	r4, r4, #3
 800162c:	42a0      	cmp	r0, r4
 800162e:	d0f8      	beq.n	8001622 <sbrk_aligned+0x22>
 8001630:	1a21      	subs	r1, r4, r0
 8001632:	4628      	mov	r0, r5
 8001634:	f000 fb94 	bl	8001d60 <_sbrk_r>
 8001638:	3001      	adds	r0, #1
 800163a:	d1f2      	bne.n	8001622 <sbrk_aligned+0x22>
 800163c:	e7ef      	b.n	800161e <sbrk_aligned+0x1e>
 800163e:	bf00      	nop
 8001640:	200001d4 	.word	0x200001d4

08001644 <_malloc_r>:
 8001644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001648:	1ccd      	adds	r5, r1, #3
 800164a:	f025 0503 	bic.w	r5, r5, #3
 800164e:	3508      	adds	r5, #8
 8001650:	2d0c      	cmp	r5, #12
 8001652:	bf38      	it	cc
 8001654:	250c      	movcc	r5, #12
 8001656:	2d00      	cmp	r5, #0
 8001658:	4606      	mov	r6, r0
 800165a:	db01      	blt.n	8001660 <_malloc_r+0x1c>
 800165c:	42a9      	cmp	r1, r5
 800165e:	d904      	bls.n	800166a <_malloc_r+0x26>
 8001660:	230c      	movs	r3, #12
 8001662:	6033      	str	r3, [r6, #0]
 8001664:	2000      	movs	r0, #0
 8001666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800166a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001740 <_malloc_r+0xfc>
 800166e:	f000 f869 	bl	8001744 <__malloc_lock>
 8001672:	f8d8 3000 	ldr.w	r3, [r8]
 8001676:	461c      	mov	r4, r3
 8001678:	bb44      	cbnz	r4, 80016cc <_malloc_r+0x88>
 800167a:	4629      	mov	r1, r5
 800167c:	4630      	mov	r0, r6
 800167e:	f7ff ffbf 	bl	8001600 <sbrk_aligned>
 8001682:	1c43      	adds	r3, r0, #1
 8001684:	4604      	mov	r4, r0
 8001686:	d158      	bne.n	800173a <_malloc_r+0xf6>
 8001688:	f8d8 4000 	ldr.w	r4, [r8]
 800168c:	4627      	mov	r7, r4
 800168e:	2f00      	cmp	r7, #0
 8001690:	d143      	bne.n	800171a <_malloc_r+0xd6>
 8001692:	2c00      	cmp	r4, #0
 8001694:	d04b      	beq.n	800172e <_malloc_r+0xea>
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	4639      	mov	r1, r7
 800169a:	4630      	mov	r0, r6
 800169c:	eb04 0903 	add.w	r9, r4, r3
 80016a0:	f000 fb5e 	bl	8001d60 <_sbrk_r>
 80016a4:	4581      	cmp	r9, r0
 80016a6:	d142      	bne.n	800172e <_malloc_r+0xea>
 80016a8:	6821      	ldr	r1, [r4, #0]
 80016aa:	4630      	mov	r0, r6
 80016ac:	1a6d      	subs	r5, r5, r1
 80016ae:	4629      	mov	r1, r5
 80016b0:	f7ff ffa6 	bl	8001600 <sbrk_aligned>
 80016b4:	3001      	adds	r0, #1
 80016b6:	d03a      	beq.n	800172e <_malloc_r+0xea>
 80016b8:	6823      	ldr	r3, [r4, #0]
 80016ba:	442b      	add	r3, r5
 80016bc:	6023      	str	r3, [r4, #0]
 80016be:	f8d8 3000 	ldr.w	r3, [r8]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	bb62      	cbnz	r2, 8001720 <_malloc_r+0xdc>
 80016c6:	f8c8 7000 	str.w	r7, [r8]
 80016ca:	e00f      	b.n	80016ec <_malloc_r+0xa8>
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	1b52      	subs	r2, r2, r5
 80016d0:	d420      	bmi.n	8001714 <_malloc_r+0xd0>
 80016d2:	2a0b      	cmp	r2, #11
 80016d4:	d917      	bls.n	8001706 <_malloc_r+0xc2>
 80016d6:	1961      	adds	r1, r4, r5
 80016d8:	42a3      	cmp	r3, r4
 80016da:	6025      	str	r5, [r4, #0]
 80016dc:	bf18      	it	ne
 80016de:	6059      	strne	r1, [r3, #4]
 80016e0:	6863      	ldr	r3, [r4, #4]
 80016e2:	bf08      	it	eq
 80016e4:	f8c8 1000 	streq.w	r1, [r8]
 80016e8:	5162      	str	r2, [r4, r5]
 80016ea:	604b      	str	r3, [r1, #4]
 80016ec:	4630      	mov	r0, r6
 80016ee:	f000 f82f 	bl	8001750 <__malloc_unlock>
 80016f2:	f104 000b 	add.w	r0, r4, #11
 80016f6:	1d23      	adds	r3, r4, #4
 80016f8:	f020 0007 	bic.w	r0, r0, #7
 80016fc:	1ac2      	subs	r2, r0, r3
 80016fe:	bf1c      	itt	ne
 8001700:	1a1b      	subne	r3, r3, r0
 8001702:	50a3      	strne	r3, [r4, r2]
 8001704:	e7af      	b.n	8001666 <_malloc_r+0x22>
 8001706:	6862      	ldr	r2, [r4, #4]
 8001708:	42a3      	cmp	r3, r4
 800170a:	bf0c      	ite	eq
 800170c:	f8c8 2000 	streq.w	r2, [r8]
 8001710:	605a      	strne	r2, [r3, #4]
 8001712:	e7eb      	b.n	80016ec <_malloc_r+0xa8>
 8001714:	4623      	mov	r3, r4
 8001716:	6864      	ldr	r4, [r4, #4]
 8001718:	e7ae      	b.n	8001678 <_malloc_r+0x34>
 800171a:	463c      	mov	r4, r7
 800171c:	687f      	ldr	r7, [r7, #4]
 800171e:	e7b6      	b.n	800168e <_malloc_r+0x4a>
 8001720:	461a      	mov	r2, r3
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	42a3      	cmp	r3, r4
 8001726:	d1fb      	bne.n	8001720 <_malloc_r+0xdc>
 8001728:	2300      	movs	r3, #0
 800172a:	6053      	str	r3, [r2, #4]
 800172c:	e7de      	b.n	80016ec <_malloc_r+0xa8>
 800172e:	230c      	movs	r3, #12
 8001730:	4630      	mov	r0, r6
 8001732:	6033      	str	r3, [r6, #0]
 8001734:	f000 f80c 	bl	8001750 <__malloc_unlock>
 8001738:	e794      	b.n	8001664 <_malloc_r+0x20>
 800173a:	6005      	str	r5, [r0, #0]
 800173c:	e7d6      	b.n	80016ec <_malloc_r+0xa8>
 800173e:	bf00      	nop
 8001740:	200001d8 	.word	0x200001d8

08001744 <__malloc_lock>:
 8001744:	4801      	ldr	r0, [pc, #4]	@ (800174c <__malloc_lock+0x8>)
 8001746:	f7ff bf11 	b.w	800156c <__retarget_lock_acquire_recursive>
 800174a:	bf00      	nop
 800174c:	200001d0 	.word	0x200001d0

08001750 <__malloc_unlock>:
 8001750:	4801      	ldr	r0, [pc, #4]	@ (8001758 <__malloc_unlock+0x8>)
 8001752:	f7ff bf0c 	b.w	800156e <__retarget_lock_release_recursive>
 8001756:	bf00      	nop
 8001758:	200001d0 	.word	0x200001d0

0800175c <__ssputs_r>:
 800175c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001760:	461f      	mov	r7, r3
 8001762:	688e      	ldr	r6, [r1, #8]
 8001764:	4682      	mov	sl, r0
 8001766:	42be      	cmp	r6, r7
 8001768:	460c      	mov	r4, r1
 800176a:	4690      	mov	r8, r2
 800176c:	680b      	ldr	r3, [r1, #0]
 800176e:	d82d      	bhi.n	80017cc <__ssputs_r+0x70>
 8001770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001778:	d026      	beq.n	80017c8 <__ssputs_r+0x6c>
 800177a:	6965      	ldr	r5, [r4, #20]
 800177c:	6909      	ldr	r1, [r1, #16]
 800177e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001782:	eba3 0901 	sub.w	r9, r3, r1
 8001786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800178a:	1c7b      	adds	r3, r7, #1
 800178c:	444b      	add	r3, r9
 800178e:	106d      	asrs	r5, r5, #1
 8001790:	429d      	cmp	r5, r3
 8001792:	bf38      	it	cc
 8001794:	461d      	movcc	r5, r3
 8001796:	0553      	lsls	r3, r2, #21
 8001798:	d527      	bpl.n	80017ea <__ssputs_r+0x8e>
 800179a:	4629      	mov	r1, r5
 800179c:	f7ff ff52 	bl	8001644 <_malloc_r>
 80017a0:	4606      	mov	r6, r0
 80017a2:	b360      	cbz	r0, 80017fe <__ssputs_r+0xa2>
 80017a4:	464a      	mov	r2, r9
 80017a6:	6921      	ldr	r1, [r4, #16]
 80017a8:	f000 faf8 	bl	8001d9c <memcpy>
 80017ac:	89a3      	ldrh	r3, [r4, #12]
 80017ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80017b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b6:	81a3      	strh	r3, [r4, #12]
 80017b8:	6126      	str	r6, [r4, #16]
 80017ba:	444e      	add	r6, r9
 80017bc:	6026      	str	r6, [r4, #0]
 80017be:	463e      	mov	r6, r7
 80017c0:	6165      	str	r5, [r4, #20]
 80017c2:	eba5 0509 	sub.w	r5, r5, r9
 80017c6:	60a5      	str	r5, [r4, #8]
 80017c8:	42be      	cmp	r6, r7
 80017ca:	d900      	bls.n	80017ce <__ssputs_r+0x72>
 80017cc:	463e      	mov	r6, r7
 80017ce:	4632      	mov	r2, r6
 80017d0:	4641      	mov	r1, r8
 80017d2:	6820      	ldr	r0, [r4, #0]
 80017d4:	f000 faaa 	bl	8001d2c <memmove>
 80017d8:	2000      	movs	r0, #0
 80017da:	68a3      	ldr	r3, [r4, #8]
 80017dc:	1b9b      	subs	r3, r3, r6
 80017de:	60a3      	str	r3, [r4, #8]
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	4433      	add	r3, r6
 80017e4:	6023      	str	r3, [r4, #0]
 80017e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017ea:	462a      	mov	r2, r5
 80017ec:	f000 fae4 	bl	8001db8 <_realloc_r>
 80017f0:	4606      	mov	r6, r0
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d1e0      	bne.n	80017b8 <__ssputs_r+0x5c>
 80017f6:	4650      	mov	r0, sl
 80017f8:	6921      	ldr	r1, [r4, #16]
 80017fa:	f7ff feb9 	bl	8001570 <_free_r>
 80017fe:	230c      	movs	r3, #12
 8001800:	f8ca 3000 	str.w	r3, [sl]
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	f04f 30ff 	mov.w	r0, #4294967295
 800180a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800180e:	81a3      	strh	r3, [r4, #12]
 8001810:	e7e9      	b.n	80017e6 <__ssputs_r+0x8a>
	...

08001814 <_svfiprintf_r>:
 8001814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001818:	4698      	mov	r8, r3
 800181a:	898b      	ldrh	r3, [r1, #12]
 800181c:	4607      	mov	r7, r0
 800181e:	061b      	lsls	r3, r3, #24
 8001820:	460d      	mov	r5, r1
 8001822:	4614      	mov	r4, r2
 8001824:	b09d      	sub	sp, #116	@ 0x74
 8001826:	d510      	bpl.n	800184a <_svfiprintf_r+0x36>
 8001828:	690b      	ldr	r3, [r1, #16]
 800182a:	b973      	cbnz	r3, 800184a <_svfiprintf_r+0x36>
 800182c:	2140      	movs	r1, #64	@ 0x40
 800182e:	f7ff ff09 	bl	8001644 <_malloc_r>
 8001832:	6028      	str	r0, [r5, #0]
 8001834:	6128      	str	r0, [r5, #16]
 8001836:	b930      	cbnz	r0, 8001846 <_svfiprintf_r+0x32>
 8001838:	230c      	movs	r3, #12
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	b01d      	add	sp, #116	@ 0x74
 8001842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001846:	2340      	movs	r3, #64	@ 0x40
 8001848:	616b      	str	r3, [r5, #20]
 800184a:	2300      	movs	r3, #0
 800184c:	9309      	str	r3, [sp, #36]	@ 0x24
 800184e:	2320      	movs	r3, #32
 8001850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001854:	2330      	movs	r3, #48	@ 0x30
 8001856:	f04f 0901 	mov.w	r9, #1
 800185a:	f8cd 800c 	str.w	r8, [sp, #12]
 800185e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80019f8 <_svfiprintf_r+0x1e4>
 8001862:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001866:	4623      	mov	r3, r4
 8001868:	469a      	mov	sl, r3
 800186a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800186e:	b10a      	cbz	r2, 8001874 <_svfiprintf_r+0x60>
 8001870:	2a25      	cmp	r2, #37	@ 0x25
 8001872:	d1f9      	bne.n	8001868 <_svfiprintf_r+0x54>
 8001874:	ebba 0b04 	subs.w	fp, sl, r4
 8001878:	d00b      	beq.n	8001892 <_svfiprintf_r+0x7e>
 800187a:	465b      	mov	r3, fp
 800187c:	4622      	mov	r2, r4
 800187e:	4629      	mov	r1, r5
 8001880:	4638      	mov	r0, r7
 8001882:	f7ff ff6b 	bl	800175c <__ssputs_r>
 8001886:	3001      	adds	r0, #1
 8001888:	f000 80a7 	beq.w	80019da <_svfiprintf_r+0x1c6>
 800188c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800188e:	445a      	add	r2, fp
 8001890:	9209      	str	r2, [sp, #36]	@ 0x24
 8001892:	f89a 3000 	ldrb.w	r3, [sl]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 809f 	beq.w	80019da <_svfiprintf_r+0x1c6>
 800189c:	2300      	movs	r3, #0
 800189e:	f04f 32ff 	mov.w	r2, #4294967295
 80018a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018a6:	f10a 0a01 	add.w	sl, sl, #1
 80018aa:	9304      	str	r3, [sp, #16]
 80018ac:	9307      	str	r3, [sp, #28]
 80018ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80018b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80018b4:	4654      	mov	r4, sl
 80018b6:	2205      	movs	r2, #5
 80018b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018bc:	484e      	ldr	r0, [pc, #312]	@ (80019f8 <_svfiprintf_r+0x1e4>)
 80018be:	f000 fa5f 	bl	8001d80 <memchr>
 80018c2:	9a04      	ldr	r2, [sp, #16]
 80018c4:	b9d8      	cbnz	r0, 80018fe <_svfiprintf_r+0xea>
 80018c6:	06d0      	lsls	r0, r2, #27
 80018c8:	bf44      	itt	mi
 80018ca:	2320      	movmi	r3, #32
 80018cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80018d0:	0711      	lsls	r1, r2, #28
 80018d2:	bf44      	itt	mi
 80018d4:	232b      	movmi	r3, #43	@ 0x2b
 80018d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80018da:	f89a 3000 	ldrb.w	r3, [sl]
 80018de:	2b2a      	cmp	r3, #42	@ 0x2a
 80018e0:	d015      	beq.n	800190e <_svfiprintf_r+0xfa>
 80018e2:	4654      	mov	r4, sl
 80018e4:	2000      	movs	r0, #0
 80018e6:	f04f 0c0a 	mov.w	ip, #10
 80018ea:	9a07      	ldr	r2, [sp, #28]
 80018ec:	4621      	mov	r1, r4
 80018ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018f2:	3b30      	subs	r3, #48	@ 0x30
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	d94b      	bls.n	8001990 <_svfiprintf_r+0x17c>
 80018f8:	b1b0      	cbz	r0, 8001928 <_svfiprintf_r+0x114>
 80018fa:	9207      	str	r2, [sp, #28]
 80018fc:	e014      	b.n	8001928 <_svfiprintf_r+0x114>
 80018fe:	eba0 0308 	sub.w	r3, r0, r8
 8001902:	fa09 f303 	lsl.w	r3, r9, r3
 8001906:	4313      	orrs	r3, r2
 8001908:	46a2      	mov	sl, r4
 800190a:	9304      	str	r3, [sp, #16]
 800190c:	e7d2      	b.n	80018b4 <_svfiprintf_r+0xa0>
 800190e:	9b03      	ldr	r3, [sp, #12]
 8001910:	1d19      	adds	r1, r3, #4
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	9103      	str	r1, [sp, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	bfbb      	ittet	lt
 800191a:	425b      	neglt	r3, r3
 800191c:	f042 0202 	orrlt.w	r2, r2, #2
 8001920:	9307      	strge	r3, [sp, #28]
 8001922:	9307      	strlt	r3, [sp, #28]
 8001924:	bfb8      	it	lt
 8001926:	9204      	strlt	r2, [sp, #16]
 8001928:	7823      	ldrb	r3, [r4, #0]
 800192a:	2b2e      	cmp	r3, #46	@ 0x2e
 800192c:	d10a      	bne.n	8001944 <_svfiprintf_r+0x130>
 800192e:	7863      	ldrb	r3, [r4, #1]
 8001930:	2b2a      	cmp	r3, #42	@ 0x2a
 8001932:	d132      	bne.n	800199a <_svfiprintf_r+0x186>
 8001934:	9b03      	ldr	r3, [sp, #12]
 8001936:	3402      	adds	r4, #2
 8001938:	1d1a      	adds	r2, r3, #4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	9203      	str	r2, [sp, #12]
 800193e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001942:	9305      	str	r3, [sp, #20]
 8001944:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80019fc <_svfiprintf_r+0x1e8>
 8001948:	2203      	movs	r2, #3
 800194a:	4650      	mov	r0, sl
 800194c:	7821      	ldrb	r1, [r4, #0]
 800194e:	f000 fa17 	bl	8001d80 <memchr>
 8001952:	b138      	cbz	r0, 8001964 <_svfiprintf_r+0x150>
 8001954:	2240      	movs	r2, #64	@ 0x40
 8001956:	9b04      	ldr	r3, [sp, #16]
 8001958:	eba0 000a 	sub.w	r0, r0, sl
 800195c:	4082      	lsls	r2, r0
 800195e:	4313      	orrs	r3, r2
 8001960:	3401      	adds	r4, #1
 8001962:	9304      	str	r3, [sp, #16]
 8001964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001968:	2206      	movs	r2, #6
 800196a:	4825      	ldr	r0, [pc, #148]	@ (8001a00 <_svfiprintf_r+0x1ec>)
 800196c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001970:	f000 fa06 	bl	8001d80 <memchr>
 8001974:	2800      	cmp	r0, #0
 8001976:	d036      	beq.n	80019e6 <_svfiprintf_r+0x1d2>
 8001978:	4b22      	ldr	r3, [pc, #136]	@ (8001a04 <_svfiprintf_r+0x1f0>)
 800197a:	bb1b      	cbnz	r3, 80019c4 <_svfiprintf_r+0x1b0>
 800197c:	9b03      	ldr	r3, [sp, #12]
 800197e:	3307      	adds	r3, #7
 8001980:	f023 0307 	bic.w	r3, r3, #7
 8001984:	3308      	adds	r3, #8
 8001986:	9303      	str	r3, [sp, #12]
 8001988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800198a:	4433      	add	r3, r6
 800198c:	9309      	str	r3, [sp, #36]	@ 0x24
 800198e:	e76a      	b.n	8001866 <_svfiprintf_r+0x52>
 8001990:	460c      	mov	r4, r1
 8001992:	2001      	movs	r0, #1
 8001994:	fb0c 3202 	mla	r2, ip, r2, r3
 8001998:	e7a8      	b.n	80018ec <_svfiprintf_r+0xd8>
 800199a:	2300      	movs	r3, #0
 800199c:	f04f 0c0a 	mov.w	ip, #10
 80019a0:	4619      	mov	r1, r3
 80019a2:	3401      	adds	r4, #1
 80019a4:	9305      	str	r3, [sp, #20]
 80019a6:	4620      	mov	r0, r4
 80019a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019ac:	3a30      	subs	r2, #48	@ 0x30
 80019ae:	2a09      	cmp	r2, #9
 80019b0:	d903      	bls.n	80019ba <_svfiprintf_r+0x1a6>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0c6      	beq.n	8001944 <_svfiprintf_r+0x130>
 80019b6:	9105      	str	r1, [sp, #20]
 80019b8:	e7c4      	b.n	8001944 <_svfiprintf_r+0x130>
 80019ba:	4604      	mov	r4, r0
 80019bc:	2301      	movs	r3, #1
 80019be:	fb0c 2101 	mla	r1, ip, r1, r2
 80019c2:	e7f0      	b.n	80019a6 <_svfiprintf_r+0x192>
 80019c4:	ab03      	add	r3, sp, #12
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	462a      	mov	r2, r5
 80019ca:	4638      	mov	r0, r7
 80019cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <_svfiprintf_r+0x1f4>)
 80019ce:	a904      	add	r1, sp, #16
 80019d0:	f3af 8000 	nop.w
 80019d4:	1c42      	adds	r2, r0, #1
 80019d6:	4606      	mov	r6, r0
 80019d8:	d1d6      	bne.n	8001988 <_svfiprintf_r+0x174>
 80019da:	89ab      	ldrh	r3, [r5, #12]
 80019dc:	065b      	lsls	r3, r3, #25
 80019de:	f53f af2d 	bmi.w	800183c <_svfiprintf_r+0x28>
 80019e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80019e4:	e72c      	b.n	8001840 <_svfiprintf_r+0x2c>
 80019e6:	ab03      	add	r3, sp, #12
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	462a      	mov	r2, r5
 80019ec:	4638      	mov	r0, r7
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <_svfiprintf_r+0x1f4>)
 80019f0:	a904      	add	r1, sp, #16
 80019f2:	f000 f87d 	bl	8001af0 <_printf_i>
 80019f6:	e7ed      	b.n	80019d4 <_svfiprintf_r+0x1c0>
 80019f8:	08001ea6 	.word	0x08001ea6
 80019fc:	08001eac 	.word	0x08001eac
 8001a00:	08001eb0 	.word	0x08001eb0
 8001a04:	00000000 	.word	0x00000000
 8001a08:	0800175d 	.word	0x0800175d

08001a0c <_printf_common>:
 8001a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a10:	4616      	mov	r6, r2
 8001a12:	4698      	mov	r8, r3
 8001a14:	688a      	ldr	r2, [r1, #8]
 8001a16:	690b      	ldr	r3, [r1, #16]
 8001a18:	4607      	mov	r7, r0
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	bfb8      	it	lt
 8001a1e:	4613      	movlt	r3, r2
 8001a20:	6033      	str	r3, [r6, #0]
 8001a22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001a26:	460c      	mov	r4, r1
 8001a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a2c:	b10a      	cbz	r2, 8001a32 <_printf_common+0x26>
 8001a2e:	3301      	adds	r3, #1
 8001a30:	6033      	str	r3, [r6, #0]
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	0699      	lsls	r1, r3, #26
 8001a36:	bf42      	ittt	mi
 8001a38:	6833      	ldrmi	r3, [r6, #0]
 8001a3a:	3302      	addmi	r3, #2
 8001a3c:	6033      	strmi	r3, [r6, #0]
 8001a3e:	6825      	ldr	r5, [r4, #0]
 8001a40:	f015 0506 	ands.w	r5, r5, #6
 8001a44:	d106      	bne.n	8001a54 <_printf_common+0x48>
 8001a46:	f104 0a19 	add.w	sl, r4, #25
 8001a4a:	68e3      	ldr	r3, [r4, #12]
 8001a4c:	6832      	ldr	r2, [r6, #0]
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	42ab      	cmp	r3, r5
 8001a52:	dc2b      	bgt.n	8001aac <_printf_common+0xa0>
 8001a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001a58:	6822      	ldr	r2, [r4, #0]
 8001a5a:	3b00      	subs	r3, #0
 8001a5c:	bf18      	it	ne
 8001a5e:	2301      	movne	r3, #1
 8001a60:	0692      	lsls	r2, r2, #26
 8001a62:	d430      	bmi.n	8001ac6 <_printf_common+0xba>
 8001a64:	4641      	mov	r1, r8
 8001a66:	4638      	mov	r0, r7
 8001a68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001a6c:	47c8      	blx	r9
 8001a6e:	3001      	adds	r0, #1
 8001a70:	d023      	beq.n	8001aba <_printf_common+0xae>
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	6922      	ldr	r2, [r4, #16]
 8001a76:	f003 0306 	and.w	r3, r3, #6
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf14      	ite	ne
 8001a7e:	2500      	movne	r5, #0
 8001a80:	6833      	ldreq	r3, [r6, #0]
 8001a82:	f04f 0600 	mov.w	r6, #0
 8001a86:	bf08      	it	eq
 8001a88:	68e5      	ldreq	r5, [r4, #12]
 8001a8a:	f104 041a 	add.w	r4, r4, #26
 8001a8e:	bf08      	it	eq
 8001a90:	1aed      	subeq	r5, r5, r3
 8001a92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001a96:	bf08      	it	eq
 8001a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	bfc4      	itt	gt
 8001aa0:	1a9b      	subgt	r3, r3, r2
 8001aa2:	18ed      	addgt	r5, r5, r3
 8001aa4:	42b5      	cmp	r5, r6
 8001aa6:	d11a      	bne.n	8001ade <_printf_common+0xd2>
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	e008      	b.n	8001abe <_printf_common+0xb2>
 8001aac:	2301      	movs	r3, #1
 8001aae:	4652      	mov	r2, sl
 8001ab0:	4641      	mov	r1, r8
 8001ab2:	4638      	mov	r0, r7
 8001ab4:	47c8      	blx	r9
 8001ab6:	3001      	adds	r0, #1
 8001ab8:	d103      	bne.n	8001ac2 <_printf_common+0xb6>
 8001aba:	f04f 30ff 	mov.w	r0, #4294967295
 8001abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ac2:	3501      	adds	r5, #1
 8001ac4:	e7c1      	b.n	8001a4a <_printf_common+0x3e>
 8001ac6:	2030      	movs	r0, #48	@ 0x30
 8001ac8:	18e1      	adds	r1, r4, r3
 8001aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001ad4:	4422      	add	r2, r4
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001adc:	e7c2      	b.n	8001a64 <_printf_common+0x58>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	4622      	mov	r2, r4
 8001ae2:	4641      	mov	r1, r8
 8001ae4:	4638      	mov	r0, r7
 8001ae6:	47c8      	blx	r9
 8001ae8:	3001      	adds	r0, #1
 8001aea:	d0e6      	beq.n	8001aba <_printf_common+0xae>
 8001aec:	3601      	adds	r6, #1
 8001aee:	e7d9      	b.n	8001aa4 <_printf_common+0x98>

08001af0 <_printf_i>:
 8001af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001af4:	7e0f      	ldrb	r7, [r1, #24]
 8001af6:	4691      	mov	r9, r2
 8001af8:	2f78      	cmp	r7, #120	@ 0x78
 8001afa:	4680      	mov	r8, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	469a      	mov	sl, r3
 8001b00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001b06:	d807      	bhi.n	8001b18 <_printf_i+0x28>
 8001b08:	2f62      	cmp	r7, #98	@ 0x62
 8001b0a:	d80a      	bhi.n	8001b22 <_printf_i+0x32>
 8001b0c:	2f00      	cmp	r7, #0
 8001b0e:	f000 80d1 	beq.w	8001cb4 <_printf_i+0x1c4>
 8001b12:	2f58      	cmp	r7, #88	@ 0x58
 8001b14:	f000 80b8 	beq.w	8001c88 <_printf_i+0x198>
 8001b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001b20:	e03a      	b.n	8001b98 <_printf_i+0xa8>
 8001b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001b26:	2b15      	cmp	r3, #21
 8001b28:	d8f6      	bhi.n	8001b18 <_printf_i+0x28>
 8001b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8001b30 <_printf_i+0x40>)
 8001b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b30:	08001b89 	.word	0x08001b89
 8001b34:	08001b9d 	.word	0x08001b9d
 8001b38:	08001b19 	.word	0x08001b19
 8001b3c:	08001b19 	.word	0x08001b19
 8001b40:	08001b19 	.word	0x08001b19
 8001b44:	08001b19 	.word	0x08001b19
 8001b48:	08001b9d 	.word	0x08001b9d
 8001b4c:	08001b19 	.word	0x08001b19
 8001b50:	08001b19 	.word	0x08001b19
 8001b54:	08001b19 	.word	0x08001b19
 8001b58:	08001b19 	.word	0x08001b19
 8001b5c:	08001c9b 	.word	0x08001c9b
 8001b60:	08001bc7 	.word	0x08001bc7
 8001b64:	08001c55 	.word	0x08001c55
 8001b68:	08001b19 	.word	0x08001b19
 8001b6c:	08001b19 	.word	0x08001b19
 8001b70:	08001cbd 	.word	0x08001cbd
 8001b74:	08001b19 	.word	0x08001b19
 8001b78:	08001bc7 	.word	0x08001bc7
 8001b7c:	08001b19 	.word	0x08001b19
 8001b80:	08001b19 	.word	0x08001b19
 8001b84:	08001c5d 	.word	0x08001c5d
 8001b88:	6833      	ldr	r3, [r6, #0]
 8001b8a:	1d1a      	adds	r2, r3, #4
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6032      	str	r2, [r6, #0]
 8001b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e09c      	b.n	8001cd6 <_printf_i+0x1e6>
 8001b9c:	6833      	ldr	r3, [r6, #0]
 8001b9e:	6820      	ldr	r0, [r4, #0]
 8001ba0:	1d19      	adds	r1, r3, #4
 8001ba2:	6031      	str	r1, [r6, #0]
 8001ba4:	0606      	lsls	r6, r0, #24
 8001ba6:	d501      	bpl.n	8001bac <_printf_i+0xbc>
 8001ba8:	681d      	ldr	r5, [r3, #0]
 8001baa:	e003      	b.n	8001bb4 <_printf_i+0xc4>
 8001bac:	0645      	lsls	r5, r0, #25
 8001bae:	d5fb      	bpl.n	8001ba8 <_printf_i+0xb8>
 8001bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001bb4:	2d00      	cmp	r5, #0
 8001bb6:	da03      	bge.n	8001bc0 <_printf_i+0xd0>
 8001bb8:	232d      	movs	r3, #45	@ 0x2d
 8001bba:	426d      	negs	r5, r5
 8001bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bc0:	230a      	movs	r3, #10
 8001bc2:	4858      	ldr	r0, [pc, #352]	@ (8001d24 <_printf_i+0x234>)
 8001bc4:	e011      	b.n	8001bea <_printf_i+0xfa>
 8001bc6:	6821      	ldr	r1, [r4, #0]
 8001bc8:	6833      	ldr	r3, [r6, #0]
 8001bca:	0608      	lsls	r0, r1, #24
 8001bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001bd0:	d402      	bmi.n	8001bd8 <_printf_i+0xe8>
 8001bd2:	0649      	lsls	r1, r1, #25
 8001bd4:	bf48      	it	mi
 8001bd6:	b2ad      	uxthmi	r5, r5
 8001bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8001bda:	6033      	str	r3, [r6, #0]
 8001bdc:	bf14      	ite	ne
 8001bde:	230a      	movne	r3, #10
 8001be0:	2308      	moveq	r3, #8
 8001be2:	4850      	ldr	r0, [pc, #320]	@ (8001d24 <_printf_i+0x234>)
 8001be4:	2100      	movs	r1, #0
 8001be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001bea:	6866      	ldr	r6, [r4, #4]
 8001bec:	2e00      	cmp	r6, #0
 8001bee:	60a6      	str	r6, [r4, #8]
 8001bf0:	db05      	blt.n	8001bfe <_printf_i+0x10e>
 8001bf2:	6821      	ldr	r1, [r4, #0]
 8001bf4:	432e      	orrs	r6, r5
 8001bf6:	f021 0104 	bic.w	r1, r1, #4
 8001bfa:	6021      	str	r1, [r4, #0]
 8001bfc:	d04b      	beq.n	8001c96 <_printf_i+0x1a6>
 8001bfe:	4616      	mov	r6, r2
 8001c00:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c04:	fb03 5711 	mls	r7, r3, r1, r5
 8001c08:	5dc7      	ldrb	r7, [r0, r7]
 8001c0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c0e:	462f      	mov	r7, r5
 8001c10:	42bb      	cmp	r3, r7
 8001c12:	460d      	mov	r5, r1
 8001c14:	d9f4      	bls.n	8001c00 <_printf_i+0x110>
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d10b      	bne.n	8001c32 <_printf_i+0x142>
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	07df      	lsls	r7, r3, #31
 8001c1e:	d508      	bpl.n	8001c32 <_printf_i+0x142>
 8001c20:	6923      	ldr	r3, [r4, #16]
 8001c22:	6861      	ldr	r1, [r4, #4]
 8001c24:	4299      	cmp	r1, r3
 8001c26:	bfde      	ittt	le
 8001c28:	2330      	movle	r3, #48	@ 0x30
 8001c2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c32:	1b92      	subs	r2, r2, r6
 8001c34:	6122      	str	r2, [r4, #16]
 8001c36:	464b      	mov	r3, r9
 8001c38:	4621      	mov	r1, r4
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	f8cd a000 	str.w	sl, [sp]
 8001c40:	aa03      	add	r2, sp, #12
 8001c42:	f7ff fee3 	bl	8001a0c <_printf_common>
 8001c46:	3001      	adds	r0, #1
 8001c48:	d14a      	bne.n	8001ce0 <_printf_i+0x1f0>
 8001c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4e:	b004      	add	sp, #16
 8001c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	6023      	str	r3, [r4, #0]
 8001c5c:	2778      	movs	r7, #120	@ 0x78
 8001c5e:	4832      	ldr	r0, [pc, #200]	@ (8001d28 <_printf_i+0x238>)
 8001c60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	6831      	ldr	r1, [r6, #0]
 8001c68:	061f      	lsls	r7, r3, #24
 8001c6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001c6e:	d402      	bmi.n	8001c76 <_printf_i+0x186>
 8001c70:	065f      	lsls	r7, r3, #25
 8001c72:	bf48      	it	mi
 8001c74:	b2ad      	uxthmi	r5, r5
 8001c76:	6031      	str	r1, [r6, #0]
 8001c78:	07d9      	lsls	r1, r3, #31
 8001c7a:	bf44      	itt	mi
 8001c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8001c80:	6023      	strmi	r3, [r4, #0]
 8001c82:	b11d      	cbz	r5, 8001c8c <_printf_i+0x19c>
 8001c84:	2310      	movs	r3, #16
 8001c86:	e7ad      	b.n	8001be4 <_printf_i+0xf4>
 8001c88:	4826      	ldr	r0, [pc, #152]	@ (8001d24 <_printf_i+0x234>)
 8001c8a:	e7e9      	b.n	8001c60 <_printf_i+0x170>
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	f023 0320 	bic.w	r3, r3, #32
 8001c92:	6023      	str	r3, [r4, #0]
 8001c94:	e7f6      	b.n	8001c84 <_printf_i+0x194>
 8001c96:	4616      	mov	r6, r2
 8001c98:	e7bd      	b.n	8001c16 <_printf_i+0x126>
 8001c9a:	6833      	ldr	r3, [r6, #0]
 8001c9c:	6825      	ldr	r5, [r4, #0]
 8001c9e:	1d18      	adds	r0, r3, #4
 8001ca0:	6961      	ldr	r1, [r4, #20]
 8001ca2:	6030      	str	r0, [r6, #0]
 8001ca4:	062e      	lsls	r6, r5, #24
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	d501      	bpl.n	8001cae <_printf_i+0x1be>
 8001caa:	6019      	str	r1, [r3, #0]
 8001cac:	e002      	b.n	8001cb4 <_printf_i+0x1c4>
 8001cae:	0668      	lsls	r0, r5, #25
 8001cb0:	d5fb      	bpl.n	8001caa <_printf_i+0x1ba>
 8001cb2:	8019      	strh	r1, [r3, #0]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	4616      	mov	r6, r2
 8001cb8:	6123      	str	r3, [r4, #16]
 8001cba:	e7bc      	b.n	8001c36 <_printf_i+0x146>
 8001cbc:	6833      	ldr	r3, [r6, #0]
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	1d1a      	adds	r2, r3, #4
 8001cc2:	6032      	str	r2, [r6, #0]
 8001cc4:	681e      	ldr	r6, [r3, #0]
 8001cc6:	6862      	ldr	r2, [r4, #4]
 8001cc8:	4630      	mov	r0, r6
 8001cca:	f000 f859 	bl	8001d80 <memchr>
 8001cce:	b108      	cbz	r0, 8001cd4 <_printf_i+0x1e4>
 8001cd0:	1b80      	subs	r0, r0, r6
 8001cd2:	6060      	str	r0, [r4, #4]
 8001cd4:	6863      	ldr	r3, [r4, #4]
 8001cd6:	6123      	str	r3, [r4, #16]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cde:	e7aa      	b.n	8001c36 <_printf_i+0x146>
 8001ce0:	4632      	mov	r2, r6
 8001ce2:	4649      	mov	r1, r9
 8001ce4:	4640      	mov	r0, r8
 8001ce6:	6923      	ldr	r3, [r4, #16]
 8001ce8:	47d0      	blx	sl
 8001cea:	3001      	adds	r0, #1
 8001cec:	d0ad      	beq.n	8001c4a <_printf_i+0x15a>
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	079b      	lsls	r3, r3, #30
 8001cf2:	d413      	bmi.n	8001d1c <_printf_i+0x22c>
 8001cf4:	68e0      	ldr	r0, [r4, #12]
 8001cf6:	9b03      	ldr	r3, [sp, #12]
 8001cf8:	4298      	cmp	r0, r3
 8001cfa:	bfb8      	it	lt
 8001cfc:	4618      	movlt	r0, r3
 8001cfe:	e7a6      	b.n	8001c4e <_printf_i+0x15e>
 8001d00:	2301      	movs	r3, #1
 8001d02:	4632      	mov	r2, r6
 8001d04:	4649      	mov	r1, r9
 8001d06:	4640      	mov	r0, r8
 8001d08:	47d0      	blx	sl
 8001d0a:	3001      	adds	r0, #1
 8001d0c:	d09d      	beq.n	8001c4a <_printf_i+0x15a>
 8001d0e:	3501      	adds	r5, #1
 8001d10:	68e3      	ldr	r3, [r4, #12]
 8001d12:	9903      	ldr	r1, [sp, #12]
 8001d14:	1a5b      	subs	r3, r3, r1
 8001d16:	42ab      	cmp	r3, r5
 8001d18:	dcf2      	bgt.n	8001d00 <_printf_i+0x210>
 8001d1a:	e7eb      	b.n	8001cf4 <_printf_i+0x204>
 8001d1c:	2500      	movs	r5, #0
 8001d1e:	f104 0619 	add.w	r6, r4, #25
 8001d22:	e7f5      	b.n	8001d10 <_printf_i+0x220>
 8001d24:	08001eb7 	.word	0x08001eb7
 8001d28:	08001ec8 	.word	0x08001ec8

08001d2c <memmove>:
 8001d2c:	4288      	cmp	r0, r1
 8001d2e:	b510      	push	{r4, lr}
 8001d30:	eb01 0402 	add.w	r4, r1, r2
 8001d34:	d902      	bls.n	8001d3c <memmove+0x10>
 8001d36:	4284      	cmp	r4, r0
 8001d38:	4623      	mov	r3, r4
 8001d3a:	d807      	bhi.n	8001d4c <memmove+0x20>
 8001d3c:	1e43      	subs	r3, r0, #1
 8001d3e:	42a1      	cmp	r1, r4
 8001d40:	d008      	beq.n	8001d54 <memmove+0x28>
 8001d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001d4a:	e7f8      	b.n	8001d3e <memmove+0x12>
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	4402      	add	r2, r0
 8001d50:	428a      	cmp	r2, r1
 8001d52:	d100      	bne.n	8001d56 <memmove+0x2a>
 8001d54:	bd10      	pop	{r4, pc}
 8001d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001d5e:	e7f7      	b.n	8001d50 <memmove+0x24>

08001d60 <_sbrk_r>:
 8001d60:	b538      	push	{r3, r4, r5, lr}
 8001d62:	2300      	movs	r3, #0
 8001d64:	4d05      	ldr	r5, [pc, #20]	@ (8001d7c <_sbrk_r+0x1c>)
 8001d66:	4604      	mov	r4, r0
 8001d68:	4608      	mov	r0, r1
 8001d6a:	602b      	str	r3, [r5, #0]
 8001d6c:	f7fe fc64 	bl	8000638 <_sbrk>
 8001d70:	1c43      	adds	r3, r0, #1
 8001d72:	d102      	bne.n	8001d7a <_sbrk_r+0x1a>
 8001d74:	682b      	ldr	r3, [r5, #0]
 8001d76:	b103      	cbz	r3, 8001d7a <_sbrk_r+0x1a>
 8001d78:	6023      	str	r3, [r4, #0]
 8001d7a:	bd38      	pop	{r3, r4, r5, pc}
 8001d7c:	200001cc 	.word	0x200001cc

08001d80 <memchr>:
 8001d80:	4603      	mov	r3, r0
 8001d82:	b510      	push	{r4, lr}
 8001d84:	b2c9      	uxtb	r1, r1
 8001d86:	4402      	add	r2, r0
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	d101      	bne.n	8001d92 <memchr+0x12>
 8001d8e:	2000      	movs	r0, #0
 8001d90:	e003      	b.n	8001d9a <memchr+0x1a>
 8001d92:	7804      	ldrb	r4, [r0, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	428c      	cmp	r4, r1
 8001d98:	d1f6      	bne.n	8001d88 <memchr+0x8>
 8001d9a:	bd10      	pop	{r4, pc}

08001d9c <memcpy>:
 8001d9c:	440a      	add	r2, r1
 8001d9e:	4291      	cmp	r1, r2
 8001da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8001da4:	d100      	bne.n	8001da8 <memcpy+0xc>
 8001da6:	4770      	bx	lr
 8001da8:	b510      	push	{r4, lr}
 8001daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001dae:	4291      	cmp	r1, r2
 8001db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001db4:	d1f9      	bne.n	8001daa <memcpy+0xe>
 8001db6:	bd10      	pop	{r4, pc}

08001db8 <_realloc_r>:
 8001db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dbc:	4607      	mov	r7, r0
 8001dbe:	4614      	mov	r4, r2
 8001dc0:	460d      	mov	r5, r1
 8001dc2:	b921      	cbnz	r1, 8001dce <_realloc_r+0x16>
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dca:	f7ff bc3b 	b.w	8001644 <_malloc_r>
 8001dce:	b92a      	cbnz	r2, 8001ddc <_realloc_r+0x24>
 8001dd0:	f7ff fbce 	bl	8001570 <_free_r>
 8001dd4:	4625      	mov	r5, r4
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ddc:	f000 f81a 	bl	8001e14 <_malloc_usable_size_r>
 8001de0:	4284      	cmp	r4, r0
 8001de2:	4606      	mov	r6, r0
 8001de4:	d802      	bhi.n	8001dec <_realloc_r+0x34>
 8001de6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001dea:	d8f4      	bhi.n	8001dd6 <_realloc_r+0x1e>
 8001dec:	4621      	mov	r1, r4
 8001dee:	4638      	mov	r0, r7
 8001df0:	f7ff fc28 	bl	8001644 <_malloc_r>
 8001df4:	4680      	mov	r8, r0
 8001df6:	b908      	cbnz	r0, 8001dfc <_realloc_r+0x44>
 8001df8:	4645      	mov	r5, r8
 8001dfa:	e7ec      	b.n	8001dd6 <_realloc_r+0x1e>
 8001dfc:	42b4      	cmp	r4, r6
 8001dfe:	4622      	mov	r2, r4
 8001e00:	4629      	mov	r1, r5
 8001e02:	bf28      	it	cs
 8001e04:	4632      	movcs	r2, r6
 8001e06:	f7ff ffc9 	bl	8001d9c <memcpy>
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	4638      	mov	r0, r7
 8001e0e:	f7ff fbaf 	bl	8001570 <_free_r>
 8001e12:	e7f1      	b.n	8001df8 <_realloc_r+0x40>

08001e14 <_malloc_usable_size_r>:
 8001e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e18:	1f18      	subs	r0, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bfbc      	itt	lt
 8001e1e:	580b      	ldrlt	r3, [r1, r0]
 8001e20:	18c0      	addlt	r0, r0, r3
 8001e22:	4770      	bx	lr

08001e24 <_init>:
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e26:	bf00      	nop
 8001e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2a:	bc08      	pop	{r3}
 8001e2c:	469e      	mov	lr, r3
 8001e2e:	4770      	bx	lr

08001e30 <_fini>:
 8001e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e32:	bf00      	nop
 8001e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e36:	bc08      	pop	{r3}
 8001e38:	469e      	mov	lr, r3
 8001e3a:	4770      	bx	lr
