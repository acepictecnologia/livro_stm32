
TMR2_INP_Freq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002f14  08002f14  00003f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f80  08002f80  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f80  08002f80  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f80  08002f80  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f80  08002f80  00003f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f84  08002f84  00003f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002f88  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  08002fe4  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08002fe4  00004238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081e1  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184b  00000000  00000000  0000c266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0000dab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076b  00000000  00000000  0000e460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175be  00000000  00000000  0000ebcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a821  00000000  00000000  00026189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ff0  00000000  00000000  000309aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b899a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c8c  00000000  00000000  000b89e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000bb66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002efc 	.word	0x08002efc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002efc 	.word	0x08002efc

0800014c <send_to_lcd>:
#define D7_GPIO_Port GPIOB

/*************** Funções para operação do LCD ************/

void send_to_lcd (char data, int rs)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
	/* RS = 1 para dados e RS = 0 para comandos */
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);
 8000158:	683b      	ldr	r3, [r7, #0]
 800015a:	b2db      	uxtb	r3, r3
 800015c:	461a      	mov	r2, r3
 800015e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000162:	4822      	ldr	r0, [pc, #136]	@ (80001ec <send_to_lcd+0xa0>)
 8000164:	f000 fef0 	bl	8000f48 <HAL_GPIO_WritePin>

	/* Escreve o dado em seu respectivo pino */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	08db      	lsrs	r3, r3, #3
 800016c:	b2db      	uxtb	r3, r3
 800016e:	f003 0301 	and.w	r3, r3, #1
 8000172:	b2db      	uxtb	r3, r3
 8000174:	461a      	mov	r2, r3
 8000176:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800017a:	481d      	ldr	r0, [pc, #116]	@ (80001f0 <send_to_lcd+0xa4>)
 800017c:	f000 fee4 	bl	8000f48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	089b      	lsrs	r3, r3, #2
 8000184:	b2db      	uxtb	r3, r3
 8000186:	f003 0301 	and.w	r3, r3, #1
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000192:	4817      	ldr	r0, [pc, #92]	@ (80001f0 <send_to_lcd+0xa4>)
 8000194:	f000 fed8 	bl	8000f48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	085b      	lsrs	r3, r3, #1
 800019c:	b2db      	uxtb	r3, r3
 800019e:	f003 0301 	and.w	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001aa:	4811      	ldr	r0, [pc, #68]	@ (80001f0 <send_to_lcd+0xa4>)
 80001ac:	f000 fecc 	bl	8000f48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	461a      	mov	r2, r3
 80001ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001be:	480c      	ldr	r0, [pc, #48]	@ (80001f0 <send_to_lcd+0xa4>)
 80001c0:	f000 fec2 	bl	8000f48 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001ca:	4808      	ldr	r0, [pc, #32]	@ (80001ec <send_to_lcd+0xa0>)
 80001cc:	f000 febc 	bl	8000f48 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001d6:	4805      	ldr	r0, [pc, #20]	@ (80001ec <send_to_lcd+0xa0>)
 80001d8:	f000 feb6 	bl	8000f48 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80001dc:	2001      	movs	r0, #1
 80001de:	f000 fbfd 	bl	80009dc <HAL_Delay>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010800 	.word	0x40010800
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* Envia os 4 bits mais significativos do dado */
    datatosend = ((cmd>>4)&0x0f);
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	091b      	lsrs	r3, r3, #4
 8000202:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS deve ser 0 para envio de comandos
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ff9f 	bl	800014c <send_to_lcd>

    /* Envia os 4 bits menos significativos do dado */
    datatosend = ((cmd)&0x0f);
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	f003 030f 	and.w	r3, r3, #15
 8000214:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f7ff ff96 	bl	800014c <send_to_lcd>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* Envia os 4 bits mais significativos do dado */
	datatosend = ((data>>4)&0x0f);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	091b      	lsrs	r3, r3, #4
 8000236:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // RS deve ser 0 para envio de caracteres
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	2101      	movs	r1, #1
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <send_to_lcd>

	/* Envia os 4 bits menos significativos do dado */
	datatosend = ((data)&0x0f);
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f003 030f 	and.w	r3, r3, #15
 8000248:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2101      	movs	r1, #1
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ff7c 	bl	800014c <send_to_lcd>
}
 8000254:	bf00      	nop
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	6039      	str	r1, [r7, #0]
    switch (row)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d003      	beq.n	8000274 <lcd_put_cur+0x18>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d005      	beq.n	800027e <lcd_put_cur+0x22>
 8000272:	e009      	b.n	8000288 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800027a:	603b      	str	r3, [r7, #0]
            break;
 800027c:	e004      	b.n	8000288 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000284:	603b      	str	r3, [r7, #0]
            break;
 8000286:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4618      	mov	r0, r3
 800028e:	f7ff ffb1 	bl	80001f4 <lcd_send_cmd>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <lcd_init>:


void lcd_init (void)
{
 800029a:	b580      	push	{r7, lr}
 800029c:	af00      	add	r7, sp, #0
	// Inicialização no modo 4 bits
	HAL_Delay(50);  // Aguarda por tempo >40ms
 800029e:	2032      	movs	r0, #50	@ 0x32
 80002a0:	f000 fb9c 	bl	80009dc <HAL_Delay>
	lcd_send_cmd (0x30);
 80002a4:	2030      	movs	r0, #48	@ 0x30
 80002a6:	f7ff ffa5 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(5);  // Aguarda por tempo >4.1ms
 80002aa:	2005      	movs	r0, #5
 80002ac:	f000 fb96 	bl	80009dc <HAL_Delay>
	lcd_send_cmd (0x30);
 80002b0:	2030      	movs	r0, #48	@ 0x30
 80002b2:	f7ff ff9f 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(1);  // Aguarda por tempo >100us
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 fb90 	bl	80009dc <HAL_Delay>
	lcd_send_cmd (0x30);
 80002bc:	2030      	movs	r0, #48	@ 0x30
 80002be:	f7ff ff99 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(10);
 80002c2:	200a      	movs	r0, #10
 80002c4:	f000 fb8a 	bl	80009dc <HAL_Delay>

	lcd_send_cmd (0x02);  // Modo 4bits
 80002c8:	2002      	movs	r0, #2
 80002ca:	f7ff ff93 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(1);
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 fb84 	bl	80009dc <HAL_Delay>

    // Inicialização do LCD
	lcd_send_cmd (0x28); /* Comunicação em 4 bits, display de 2 linhas e
 80002d4:	2028      	movs	r0, #40	@ 0x28
 80002d6:	f7ff ff8d 	bl	80001f4 <lcd_send_cmd>
                            matriz 7X5 */
	HAL_Delay(1);
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 fb7e 	bl	80009dc <HAL_Delay>
	lcd_send_cmd (0x08); /* Controle para ligar/desligar o display
 80002e0:	2008      	movs	r0, #8
 80002e2:	f7ff ff87 	bl	80001f4 <lcd_send_cmd>
                            --> D=0,C=0, B=0  ---> display off */
	HAL_Delay(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 fb78 	bl	80009dc <HAL_Delay>
	lcd_send_cmd (0x01); // Limpa o LCD
 80002ec:	2001      	movs	r0, #1
 80002ee:	f7ff ff81 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(1);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f000 fb72 	bl	80009dc <HAL_Delay>
	HAL_Delay(1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f000 fb6f 	bl	80009dc <HAL_Delay>
	lcd_send_cmd (0x06); /* Deslocamento do cursor à direita após um novo
 80002fe:	2006      	movs	r0, #6
 8000300:	f7ff ff78 	bl	80001f4 <lcd_send_cmd>
                            caractere */
	HAL_Delay(1);
 8000304:	2001      	movs	r0, #1
 8000306:	f000 fb69 	bl	80009dc <HAL_Delay>
	lcd_send_cmd (0x0C); //Liga o display sem cursor
 800030a:	200c      	movs	r0, #12
 800030c:	f7ff ff72 	bl	80001f4 <lcd_send_cmd>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}

08000314 <lcd_send_string>:


void lcd_send_string (char *str)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800031c:	e006      	b.n	800032c <lcd_send_string+0x18>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	1c5a      	adds	r2, r3, #1
 8000322:	607a      	str	r2, [r7, #4]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff7e 	bl	8000228 <lcd_send_data>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f4      	bne.n	800031e <lcd_send_string+0xa>
}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
    if(state == IDLE)
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <HAL_TIM_IC_CaptureCallback+0x78>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b2db      	uxtb	r3, r3
 800034e:	2b00      	cmp	r3, #0
 8000350:	d10b      	bne.n	800036a <HAL_TIM_IC_CaptureCallback+0x2a>
    {
        T1 = TIM2->CCR1;
 8000352:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000358:	4a18      	ldr	r2, [pc, #96]	@ (80003bc <HAL_TIM_IC_CaptureCallback+0x7c>)
 800035a:	6013      	str	r3, [r2, #0]
        TIM2_OVC = 0;
 800035c:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <HAL_TIM_IC_CaptureCallback+0x80>)
 800035e:	2200      	movs	r2, #0
 8000360:	801a      	strh	r2, [r3, #0]
        state = DONE;
 8000362:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
        ticks = (T2 + (TIM2_OVC * 65536)) - T1;
        freq = (uint32_t)(F_CLK/ticks);

        state = IDLE;
    }
}
 8000368:	e020      	b.n	80003ac <HAL_TIM_IC_CaptureCallback+0x6c>
    else if(state == DONE)
 800036a:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <HAL_TIM_IC_CaptureCallback+0x78>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	b2db      	uxtb	r3, r3
 8000370:	2b01      	cmp	r3, #1
 8000372:	d11b      	bne.n	80003ac <HAL_TIM_IC_CaptureCallback+0x6c>
        T2 = TIM2->CCR1;
 8000374:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800037a:	4a12      	ldr	r2, [pc, #72]	@ (80003c4 <HAL_TIM_IC_CaptureCallback+0x84>)
 800037c:	6013      	str	r3, [r2, #0]
        ticks = (T2 + (TIM2_OVC * 65536)) - T1;
 800037e:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	b29b      	uxth	r3, r3
 8000384:	041b      	lsls	r3, r3, #16
 8000386:	461a      	mov	r2, r3
 8000388:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <HAL_TIM_IC_CaptureCallback+0x84>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	441a      	add	r2, r3
 800038e:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	1ad3      	subs	r3, r2, r3
 8000394:	4a0c      	ldr	r2, [pc, #48]	@ (80003c8 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000396:	6013      	str	r3, [r2, #0]
        freq = (uint32_t)(F_CLK/ticks);
 8000398:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <HAL_TIM_IC_CaptureCallback+0x88>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0b      	ldr	r2, [pc, #44]	@ (80003cc <HAL_TIM_IC_CaptureCallback+0x8c>)
 800039e:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a2:	4a0b      	ldr	r2, [pc, #44]	@ (80003d0 <HAL_TIM_IC_CaptureCallback+0x90>)
 80003a4:	6013      	str	r3, [r2, #0]
        state = IDLE;
 80003a6:	4b04      	ldr	r3, [pc, #16]	@ (80003b8 <HAL_TIM_IC_CaptureCallback+0x78>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	200000c0 	.word	0x200000c0
 80003bc:	200000c4 	.word	0x200000c4
 80003c0:	200000d0 	.word	0x200000d0
 80003c4:	200000c8 	.word	0x200000c8
 80003c8:	200000cc 	.word	0x200000cc
 80003cc:	044aa200 	.word	0x044aa200
 80003d0:	200000d4 	.word	0x200000d4

080003d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
    TIM2_OVC++;
 80003dc:	4b05      	ldr	r3, [pc, #20]	@ (80003f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	3301      	adds	r3, #1
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	4b03      	ldr	r3, [pc, #12]	@ (80003f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003e8:	801a      	strh	r2, [r3, #0]
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	200000d0 	.word	0x200000d0

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fc:	f000 fa8c 	bl	8000918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000400:	f000 f83a 	bl	8000478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000404:	f000 f8ee 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000408:	f000 f87c 	bl	8000504 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800040c:	4814      	ldr	r0, [pc, #80]	@ (8000460 <main+0x68>)
 800040e:	f001 f9fb 	bl	8001808 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000412:	2100      	movs	r1, #0
 8000414:	4812      	ldr	r0, [pc, #72]	@ (8000460 <main+0x68>)
 8000416:	f001 faa1 	bl	800195c <HAL_TIM_IC_Start_IT>

  lcd_init();
 800041a:	f7ff ff3e 	bl	800029a <lcd_init>
  lcd_put_cur(0, 0);
 800041e:	2100      	movs	r1, #0
 8000420:	2000      	movs	r0, #0
 8000422:	f7ff ff1b 	bl	800025c <lcd_put_cur>
  lcd_send_string("FREQ.: ");
 8000426:	480f      	ldr	r0, [pc, #60]	@ (8000464 <main+0x6c>)
 8000428:	f7ff ff74 	bl	8000314 <lcd_send_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800042c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <main+0x70>)
 8000432:	f000 fda1 	bl	8000f78 <HAL_GPIO_TogglePin>

	  sprintf(bufferLCD, "%06ld Hz", freq);
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <main+0x74>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	461a      	mov	r2, r3
 800043c:	490c      	ldr	r1, [pc, #48]	@ (8000470 <main+0x78>)
 800043e:	480d      	ldr	r0, [pc, #52]	@ (8000474 <main+0x7c>)
 8000440:	f002 f8ac 	bl	800259c <siprintf>

	  lcd_put_cur(0, 7);
 8000444:	2107      	movs	r1, #7
 8000446:	2000      	movs	r0, #0
 8000448:	f7ff ff08 	bl	800025c <lcd_put_cur>
	  lcd_send_string(bufferLCD);
 800044c:	4809      	ldr	r0, [pc, #36]	@ (8000474 <main+0x7c>)
 800044e:	f7ff ff61 	bl	8000314 <lcd_send_string>

	  HAL_Delay(1000);
 8000452:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000456:	f000 fac1 	bl	80009dc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800045a:	bf00      	nop
 800045c:	e7e6      	b.n	800042c <main+0x34>
 800045e:	bf00      	nop
 8000460:	20000078 	.word	0x20000078
 8000464:	08002f14 	.word	0x08002f14
 8000468:	40011000 	.word	0x40011000
 800046c:	200000d4 	.word	0x200000d4
 8000470:	08002f1c 	.word	0x08002f1c
 8000474:	200000d8 	.word	0x200000d8

08000478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b090      	sub	sp, #64	@ 0x40
 800047c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047e:	f107 0318 	add.w	r3, r7, #24
 8000482:	2228      	movs	r2, #40	@ 0x28
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f002 f8aa 	bl	80025e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800049a:	2301      	movs	r3, #1
 800049c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800049e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a8:	2301      	movs	r3, #1
 80004aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ac:	2302      	movs	r3, #2
 80004ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004b6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004bc:	f107 0318 	add.w	r3, r7, #24
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fd73 	bl	8000fac <HAL_RCC_OscConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004cc:	f000 f910 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d0:	230f      	movs	r3, #15
 80004d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d4:	2302      	movs	r3, #2
 80004d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2102      	movs	r1, #2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 ffe0 	bl	80014b0 <HAL_RCC_ClockConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004f6:	f000 f8fb 	bl	80006f0 <Error_Handler>
  }
}
 80004fa:	bf00      	nop
 80004fc:	3740      	adds	r7, #64	@ 0x40
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000522:	463b      	mov	r3, r7
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800052e:	4b2c      	ldr	r3, [pc, #176]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 8000530:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000534:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000536:	4b2a      	ldr	r3, [pc, #168]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b28      	ldr	r3, [pc, #160]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000542:	4b27      	ldr	r3, [pc, #156]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 8000544:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000548:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054a:	4b25      	ldr	r3, [pc, #148]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000550:	4b23      	ldr	r3, [pc, #140]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 8000552:	2280      	movs	r2, #128	@ 0x80
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000556:	4822      	ldr	r0, [pc, #136]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 8000558:	f001 f906 	bl	8001768 <HAL_TIM_Base_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000562:	f000 f8c5 	bl	80006f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800056a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800056c:	f107 0318 	add.w	r3, r7, #24
 8000570:	4619      	mov	r1, r3
 8000572:	481b      	ldr	r0, [pc, #108]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 8000574:	f001 fc8a 	bl	8001e8c <HAL_TIM_ConfigClockSource>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800057e:	f000 f8b7 	bl	80006f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000582:	4817      	ldr	r0, [pc, #92]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 8000584:	f001 f992 	bl	80018ac <HAL_TIM_IC_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800058e:	f000 f8af 	bl	80006f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	4619      	mov	r1, r3
 80005a0:	480f      	ldr	r0, [pc, #60]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 80005a2:	f001 ff8b 	bl	80024bc <HAL_TIMEx_MasterConfigSynchronization>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80005ac:	f000 f8a0 	bl	80006f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005b4:	2301      	movs	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <MX_TIM2_Init+0xdc>)
 80005c8:	f001 fbc4 	bl	8001d54 <HAL_TIM_IC_ConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80005d2:	f000 f88d 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3728      	adds	r7, #40	@ 0x28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000078 	.word	0x20000078

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f8:	4b39      	ldr	r3, [pc, #228]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a38      	ldr	r2, [pc, #224]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b36      	ldr	r3, [pc, #216]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0310 	and.w	r3, r3, #16
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000610:	4b33      	ldr	r3, [pc, #204]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a32      	ldr	r2, [pc, #200]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 8000616:	f043 0320 	orr.w	r3, r3, #32
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b30      	ldr	r3, [pc, #192]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0320 	and.w	r3, r3, #32
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a2c      	ldr	r2, [pc, #176]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a26      	ldr	r2, [pc, #152]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 8000646:	f043 0308 	orr.w	r3, r3, #8
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <MX_GPIO_Init+0xfc>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065e:	4821      	ldr	r0, [pc, #132]	@ (80006e4 <MX_GPIO_Init+0x100>)
 8000660:	f000 fc72 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800066a:	481f      	ldr	r0, [pc, #124]	@ (80006e8 <MX_GPIO_Init+0x104>)
 800066c:	f000 fc6c 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8000676:	481d      	ldr	r0, [pc, #116]	@ (80006ec <MX_GPIO_Init+0x108>)
 8000678:	f000 fc66 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800067c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	4619      	mov	r1, r3
 8000694:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <MX_GPIO_Init+0x100>)
 8000696:	f000 fad3 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800069a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <MX_GPIO_Init+0x104>)
 80006b4:	f000 fac4 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80006b8:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80006bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	4806      	ldr	r0, [pc, #24]	@ (80006ec <MX_GPIO_Init+0x108>)
 80006d2:	f000 fab5 	bl	8000c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80006d6:	bf00      	nop
 80006d8:	3720      	adds	r7, #32
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40011000 	.word	0x40011000
 80006e8:	40010c00 	.word	0x40010c00
 80006ec:	40010800 	.word	0x40010800

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <Error_Handler+0x8>

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <HAL_MspInit+0x5c>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a14      	ldr	r2, [pc, #80]	@ (8000758 <HAL_MspInit+0x5c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <HAL_MspInit+0x5c>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <HAL_MspInit+0x5c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <HAL_MspInit+0x5c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <HAL_MspInit+0x5c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000732:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <HAL_MspInit+0x60>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <HAL_MspInit+0x60>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40021000 	.word	0x40021000
 800075c:	40010000 	.word	0x40010000

08000760 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800077e:	d12b      	bne.n	80007d8 <HAL_TIM_Base_MspInit+0x78>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000780:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_TIM_Base_MspInit+0x80>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a16      	ldr	r2, [pc, #88]	@ (80007e0 <HAL_TIM_Base_MspInit+0x80>)
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	61d3      	str	r3, [r2, #28]
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <HAL_TIM_Base_MspInit+0x80>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <HAL_TIM_Base_MspInit+0x80>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a10      	ldr	r2, [pc, #64]	@ (80007e0 <HAL_TIM_Base_MspInit+0x80>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <HAL_TIM_Base_MspInit+0x80>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b0:	2301      	movs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4619      	mov	r1, r3
 80007c2:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <HAL_TIM_Base_MspInit+0x84>)
 80007c4:	f000 fa3c 	bl	8000c40 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	201c      	movs	r0, #28
 80007ce:	f000 fa00 	bl	8000bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007d2:	201c      	movs	r0, #28
 80007d4:	f000 fa19 	bl	8000c0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010800 	.word	0x40010800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <NMI_Handler+0x4>

080007f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <MemManage_Handler+0x4>

08000800 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <UsageFault_Handler+0x4>

08000810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000838:	f000 f8b4 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000844:	4802      	ldr	r0, [pc, #8]	@ (8000850 <TIM2_IRQHandler+0x10>)
 8000846:	f001 f995 	bl	8001b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000078 	.word	0x20000078

08000854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800085c:	4a14      	ldr	r2, [pc, #80]	@ (80008b0 <_sbrk+0x5c>)
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <_sbrk+0x60>)
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <_sbrk+0x64>)
 8000872:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <_sbrk+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	429a      	cmp	r2, r3
 8000882:	d207      	bcs.n	8000894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000884:	f001 feb4 	bl	80025f0 <__errno>
 8000888:	4603      	mov	r3, r0
 800088a:	220c      	movs	r2, #12
 800088c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	e009      	b.n	80008a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089a:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	4a05      	ldr	r2, [pc, #20]	@ (80008b8 <_sbrk+0x64>)
 80008a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20005000 	.word	0x20005000
 80008b4:	00000400 	.word	0x00000400
 80008b8:	200000e8 	.word	0x200000e8
 80008bc:	20000238 	.word	0x20000238

080008c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008cc:	f7ff fff8 	bl	80008c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008d2:	490c      	ldr	r1, [pc, #48]	@ (8000904 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000908 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a09      	ldr	r2, [pc, #36]	@ (800090c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008e8:	4c09      	ldr	r4, [pc, #36]	@ (8000910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f6:	f001 fe81 	bl	80025fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fa:	f7ff fd7d 	bl	80003f8 <main>
  bx lr
 80008fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000908:	08002f88 	.word	0x08002f88
  ldr r2, =_sbss
 800090c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000910:	20000238 	.word	0x20000238

08000914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC1_2_IRQHandler>
	...

08000918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <HAL_Init+0x28>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a07      	ldr	r2, [pc, #28]	@ (8000940 <HAL_Init+0x28>)
 8000922:	f043 0310 	orr.w	r3, r3, #16
 8000926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 f947 	bl	8000bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092e:	200f      	movs	r0, #15
 8000930:	f000 f808 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000934:	f7ff fee2 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_InitTick+0x54>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <HAL_InitTick+0x58>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800095a:	fbb3 f3f1 	udiv	r3, r3, r1
 800095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f95f 	bl	8000c26 <HAL_SYSTICK_Config>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e00e      	b.n	8000990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d80a      	bhi.n	800098e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f000 f927 	bl	8000bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000984:	4a06      	ldr	r2, [pc, #24]	@ (80009a0 <HAL_InitTick+0x5c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000004 	.word	0x20000004

080009a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <HAL_IncTick+0x1c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <HAL_IncTick+0x20>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a03      	ldr	r2, [pc, #12]	@ (80009c4 <HAL_IncTick+0x20>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	20000008 	.word	0x20000008
 80009c4:	200000ec 	.word	0x200000ec

080009c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b02      	ldr	r3, [pc, #8]	@ (80009d8 <HAL_GetTick+0x10>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	200000ec 	.word	0x200000ec

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff fff0 	bl	80009c8 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_Delay+0x44>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffe0 	bl	80009c8 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4906      	ldr	r1, [pc, #24]	@ (8000abc <__NVIC_EnableIRQ+0x34>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	@ (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	@ (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	@ 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	@ 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b88:	d301      	bcc.n	8000b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00f      	b.n	8000bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <SysTick_Config+0x40>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b96:	210f      	movs	r1, #15
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f7ff ff90 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <SysTick_Config+0x40>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <SysTick_Config+0x40>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff2d 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff42 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff90 	bl	8000b14 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5f 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff35 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffa2 	bl	8000b78 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b08b      	sub	sp, #44	@ 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e169      	b.n	8000f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c54:	2201      	movs	r2, #1
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 8158 	bne.w	8000f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	4a9a      	ldr	r2, [pc, #616]	@ (8000ee0 <HAL_GPIO_Init+0x2a0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d05e      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c7c:	4a98      	ldr	r2, [pc, #608]	@ (8000ee0 <HAL_GPIO_Init+0x2a0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d875      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c82:	4a98      	ldr	r2, [pc, #608]	@ (8000ee4 <HAL_GPIO_Init+0x2a4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d058      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c88:	4a96      	ldr	r2, [pc, #600]	@ (8000ee4 <HAL_GPIO_Init+0x2a4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d86f      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c8e:	4a96      	ldr	r2, [pc, #600]	@ (8000ee8 <HAL_GPIO_Init+0x2a8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d052      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c94:	4a94      	ldr	r2, [pc, #592]	@ (8000ee8 <HAL_GPIO_Init+0x2a8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d869      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c9a:	4a94      	ldr	r2, [pc, #592]	@ (8000eec <HAL_GPIO_Init+0x2ac>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d04c      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000ca0:	4a92      	ldr	r2, [pc, #584]	@ (8000eec <HAL_GPIO_Init+0x2ac>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d863      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000ca6:	4a92      	ldr	r2, [pc, #584]	@ (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d046      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000cac:	4a90      	ldr	r2, [pc, #576]	@ (8000ef0 <HAL_GPIO_Init+0x2b0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d85d      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d82a      	bhi.n	8000d0c <HAL_GPIO_Init+0xcc>
 8000cb6:	2b12      	cmp	r3, #18
 8000cb8:	d859      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000cba:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc0 <HAL_GPIO_Init+0x80>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000d3b 	.word	0x08000d3b
 8000cc4:	08000d15 	.word	0x08000d15
 8000cc8:	08000d27 	.word	0x08000d27
 8000ccc:	08000d69 	.word	0x08000d69
 8000cd0:	08000d6f 	.word	0x08000d6f
 8000cd4:	08000d6f 	.word	0x08000d6f
 8000cd8:	08000d6f 	.word	0x08000d6f
 8000cdc:	08000d6f 	.word	0x08000d6f
 8000ce0:	08000d6f 	.word	0x08000d6f
 8000ce4:	08000d6f 	.word	0x08000d6f
 8000ce8:	08000d6f 	.word	0x08000d6f
 8000cec:	08000d6f 	.word	0x08000d6f
 8000cf0:	08000d6f 	.word	0x08000d6f
 8000cf4:	08000d6f 	.word	0x08000d6f
 8000cf8:	08000d6f 	.word	0x08000d6f
 8000cfc:	08000d6f 	.word	0x08000d6f
 8000d00:	08000d6f 	.word	0x08000d6f
 8000d04:	08000d1d 	.word	0x08000d1d
 8000d08:	08000d31 	.word	0x08000d31
 8000d0c:	4a79      	ldr	r2, [pc, #484]	@ (8000ef4 <HAL_GPIO_Init+0x2b4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d12:	e02c      	b.n	8000d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e029      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	3304      	adds	r3, #4
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e024      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	623b      	str	r3, [r7, #32]
          break;
 8000d2e:	e01f      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	330c      	adds	r3, #12
 8000d36:	623b      	str	r3, [r7, #32]
          break;
 8000d38:	e01a      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d42:	2304      	movs	r3, #4
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e013      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d105      	bne.n	8000d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d50:	2308      	movs	r3, #8
 8000d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	611a      	str	r2, [r3, #16]
          break;
 8000d5a:	e009      	b.n	8000d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	615a      	str	r2, [r3, #20]
          break;
 8000d66:	e003      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e000      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          break;
 8000d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2bff      	cmp	r3, #255	@ 0xff
 8000d74:	d801      	bhi.n	8000d7a <HAL_GPIO_Init+0x13a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	e001      	b.n	8000d7e <HAL_GPIO_Init+0x13e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2bff      	cmp	r3, #255	@ 0xff
 8000d84:	d802      	bhi.n	8000d8c <HAL_GPIO_Init+0x14c>
 8000d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	e002      	b.n	8000d92 <HAL_GPIO_Init+0x152>
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8e:	3b08      	subs	r3, #8
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	210f      	movs	r1, #15
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	401a      	ands	r2, r3
 8000da4:	6a39      	ldr	r1, [r7, #32]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	431a      	orrs	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 80b1 	beq.w	8000f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a4c      	ldr	r2, [pc, #304]	@ (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef8 <HAL_GPIO_Init+0x2b8>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dd8:	4a48      	ldr	r2, [pc, #288]	@ (8000efc <HAL_GPIO_Init+0x2bc>)
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a40      	ldr	r2, [pc, #256]	@ (8000f00 <HAL_GPIO_Init+0x2c0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d013      	beq.n	8000e2c <HAL_GPIO_Init+0x1ec>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a3f      	ldr	r2, [pc, #252]	@ (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d00d      	beq.n	8000e28 <HAL_GPIO_Init+0x1e8>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f08 <HAL_GPIO_Init+0x2c8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0x1e4>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a3d      	ldr	r2, [pc, #244]	@ (8000f0c <HAL_GPIO_Init+0x2cc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d101      	bne.n	8000e20 <HAL_GPIO_Init+0x1e0>
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e006      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e20:	2304      	movs	r3, #4
 8000e22:	e004      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <HAL_GPIO_Init+0x1ee>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e30:	f002 0203 	and.w	r2, r2, #3
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	4093      	lsls	r3, r2
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e3e:	492f      	ldr	r1, [pc, #188]	@ (8000efc <HAL_GPIO_Init+0x2bc>)
 8000e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e58:	4b2d      	ldr	r3, [pc, #180]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	492c      	ldr	r1, [pc, #176]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	608b      	str	r3, [r1, #8]
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e66:	4b2a      	ldr	r3, [pc, #168]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4928      	ldr	r1, [pc, #160]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e80:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	4922      	ldr	r1, [pc, #136]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60cb      	str	r3, [r1, #12]
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e8e:	4b20      	ldr	r3, [pc, #128]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	491e      	ldr	r1, [pc, #120]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ea8:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	4918      	ldr	r1, [pc, #96]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4914      	ldr	r1, [pc, #80]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d021      	beq.n	8000f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	490e      	ldr	r1, [pc, #56]	@ (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
 8000edc:	e021      	b.n	8000f22 <HAL_GPIO_Init+0x2e2>
 8000ede:	bf00      	nop
 8000ee0:	10320000 	.word	0x10320000
 8000ee4:	10310000 	.word	0x10310000
 8000ee8:	10220000 	.word	0x10220000
 8000eec:	10210000 	.word	0x10210000
 8000ef0:	10120000 	.word	0x10120000
 8000ef4:	10110000 	.word	0x10110000
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40011400 	.word	0x40011400
 8000f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <HAL_GPIO_Init+0x304>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4909      	ldr	r1, [pc, #36]	@ (8000f44 <HAL_GPIO_Init+0x304>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f24:	3301      	adds	r3, #1
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f47f ae8e 	bne.w	8000c54 <HAL_GPIO_Init+0x14>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	372c      	adds	r7, #44	@ 0x2c
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	4613      	mov	r3, r2
 8000f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f58:	787b      	ldrb	r3, [r7, #1]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f64:	e003      	b.n	8000f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	041a      	lsls	r2, r3, #16
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	611a      	str	r2, [r3, #16]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43d9      	mvns	r1, r3
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	400b      	ands	r3, r1
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	611a      	str	r2, [r3, #16]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e272      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8087 	beq.w	80010da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fcc:	4b92      	ldr	r3, [pc, #584]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d00c      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d112      	bne.n	800100a <HAL_RCC_OscConfig+0x5e>
 8000fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ff0:	d10b      	bne.n	800100a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff2:	4b89      	ldr	r3, [pc, #548]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d06c      	beq.n	80010d8 <HAL_RCC_OscConfig+0x12c>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d168      	bne.n	80010d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e24c      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001012:	d106      	bne.n	8001022 <HAL_RCC_OscConfig+0x76>
 8001014:	4b80      	ldr	r3, [pc, #512]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a7f      	ldr	r2, [pc, #508]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 800101a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	e02e      	b.n	8001080 <HAL_RCC_OscConfig+0xd4>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0x98>
 800102a:	4b7b      	ldr	r3, [pc, #492]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a7a      	ldr	r2, [pc, #488]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b78      	ldr	r3, [pc, #480]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a77      	ldr	r2, [pc, #476]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 800103c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e01d      	b.n	8001080 <HAL_RCC_OscConfig+0xd4>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800104c:	d10c      	bne.n	8001068 <HAL_RCC_OscConfig+0xbc>
 800104e:	4b72      	ldr	r3, [pc, #456]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a71      	ldr	r2, [pc, #452]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	4b6f      	ldr	r3, [pc, #444]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a6e      	ldr	r2, [pc, #440]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e00b      	b.n	8001080 <HAL_RCC_OscConfig+0xd4>
 8001068:	4b6b      	ldr	r3, [pc, #428]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a6a      	ldr	r2, [pc, #424]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 800106e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b68      	ldr	r3, [pc, #416]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a67      	ldr	r2, [pc, #412]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 800107a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800107e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d013      	beq.n	80010b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fc9e 	bl	80009c8 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001090:	f7ff fc9a 	bl	80009c8 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b64      	cmp	r3, #100	@ 0x64
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e200      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f0      	beq.n	8001090 <HAL_RCC_OscConfig+0xe4>
 80010ae:	e014      	b.n	80010da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fc8a 	bl	80009c8 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b8:	f7ff fc86 	bl	80009c8 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b64      	cmp	r3, #100	@ 0x64
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e1ec      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ca:	4b53      	ldr	r3, [pc, #332]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f0      	bne.n	80010b8 <HAL_RCC_OscConfig+0x10c>
 80010d6:	e000      	b.n	80010da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d063      	beq.n	80011ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00b      	beq.n	800110a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010f2:	4b49      	ldr	r3, [pc, #292]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d11c      	bne.n	8001138 <HAL_RCC_OscConfig+0x18c>
 80010fe:	4b46      	ldr	r3, [pc, #280]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d116      	bne.n	8001138 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110a:	4b43      	ldr	r3, [pc, #268]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <HAL_RCC_OscConfig+0x176>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d001      	beq.n	8001122 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e1c0      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001122:	4b3d      	ldr	r3, [pc, #244]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4939      	ldr	r1, [pc, #228]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001132:	4313      	orrs	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001136:	e03a      	b.n	80011ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d020      	beq.n	8001182 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001140:	4b36      	ldr	r3, [pc, #216]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fc3f 	bl	80009c8 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800114e:	f7ff fc3b 	bl	80009c8 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e1a1      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001160:	4b2d      	ldr	r3, [pc, #180]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116c:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4927      	ldr	r1, [pc, #156]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 800117c:	4313      	orrs	r3, r2
 800117e:	600b      	str	r3, [r1, #0]
 8001180:	e015      	b.n	80011ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc1e 	bl	80009c8 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001190:	f7ff fc1a 	bl	80009c8 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e180      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d03a      	beq.n	8001230 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d019      	beq.n	80011f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <HAL_RCC_OscConfig+0x274>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fbfe 	bl	80009c8 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff fbfa 	bl	80009c8 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e160      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 fa9c 	bl	800172c <RCC_Delay>
 80011f4:	e01c      	b.n	8001230 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_RCC_OscConfig+0x274>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fc:	f7ff fbe4 	bl	80009c8 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001202:	e00f      	b.n	8001224 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fbe0 	bl	80009c8 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d908      	bls.n	8001224 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e146      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	42420000 	.word	0x42420000
 8001220:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001224:	4b92      	ldr	r3, [pc, #584]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1e9      	bne.n	8001204 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80a6 	beq.w	800138a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001242:	4b8b      	ldr	r3, [pc, #556]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10d      	bne.n	800126a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4b88      	ldr	r3, [pc, #544]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a87      	ldr	r2, [pc, #540]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001258:	61d3      	str	r3, [r2, #28]
 800125a:	4b85      	ldr	r3, [pc, #532]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001266:	2301      	movs	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126a:	4b82      	ldr	r3, [pc, #520]	@ (8001474 <HAL_RCC_OscConfig+0x4c8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001272:	2b00      	cmp	r3, #0
 8001274:	d118      	bne.n	80012a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001276:	4b7f      	ldr	r3, [pc, #508]	@ (8001474 <HAL_RCC_OscConfig+0x4c8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a7e      	ldr	r2, [pc, #504]	@ (8001474 <HAL_RCC_OscConfig+0x4c8>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001282:	f7ff fba1 	bl	80009c8 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128a:	f7ff fb9d 	bl	80009c8 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b64      	cmp	r3, #100	@ 0x64
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e103      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129c:	4b75      	ldr	r3, [pc, #468]	@ (8001474 <HAL_RCC_OscConfig+0x4c8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d106      	bne.n	80012be <HAL_RCC_OscConfig+0x312>
 80012b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6213      	str	r3, [r2, #32]
 80012bc:	e02d      	b.n	800131a <HAL_RCC_OscConfig+0x36e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x334>
 80012c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a69      	ldr	r2, [pc, #420]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	6213      	str	r3, [r2, #32]
 80012d2:	4b67      	ldr	r3, [pc, #412]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4a66      	ldr	r2, [pc, #408]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	f023 0304 	bic.w	r3, r3, #4
 80012dc:	6213      	str	r3, [r2, #32]
 80012de:	e01c      	b.n	800131a <HAL_RCC_OscConfig+0x36e>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d10c      	bne.n	8001302 <HAL_RCC_OscConfig+0x356>
 80012e8:	4b61      	ldr	r3, [pc, #388]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4a60      	ldr	r2, [pc, #384]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6213      	str	r3, [r2, #32]
 80012f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6213      	str	r3, [r2, #32]
 8001300:	e00b      	b.n	800131a <HAL_RCC_OscConfig+0x36e>
 8001302:	4b5b      	ldr	r3, [pc, #364]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4a5a      	ldr	r2, [pc, #360]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6213      	str	r3, [r2, #32]
 800130e:	4b58      	ldr	r3, [pc, #352]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4a57      	ldr	r2, [pc, #348]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d015      	beq.n	800134e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fb51 	bl	80009c8 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001328:	e00a      	b.n	8001340 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132a:	f7ff fb4d 	bl	80009c8 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001338:	4293      	cmp	r3, r2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0b1      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001340:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0ee      	beq.n	800132a <HAL_RCC_OscConfig+0x37e>
 800134c:	e014      	b.n	8001378 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff fb3b 	bl	80009c8 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f7ff fb37 	bl	80009c8 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001364:	4293      	cmp	r3, r2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e09b      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136c:	4b40      	ldr	r3, [pc, #256]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1ee      	bne.n	8001356 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d105      	bne.n	800138a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800137e:	4b3c      	ldr	r3, [pc, #240]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a3b      	ldr	r2, [pc, #236]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8087 	beq.w	80014a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001394:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d061      	beq.n	8001464 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d146      	bne.n	8001436 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a8:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <HAL_RCC_OscConfig+0x4cc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fb0b 	bl	80009c8 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff fb07 	bl	80009c8 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e06d      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c8:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f0      	bne.n	80013b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013dc:	d108      	bne.n	80013f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013de:	4b24      	ldr	r3, [pc, #144]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	4921      	ldr	r1, [pc, #132]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a19      	ldr	r1, [r3, #32]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001400:	430b      	orrs	r3, r1
 8001402:	491b      	ldr	r1, [pc, #108]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_RCC_OscConfig+0x4cc>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fadb 	bl	80009c8 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff fad7 	bl	80009c8 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e03d      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x46a>
 8001434:	e035      	b.n	80014a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <HAL_RCC_OscConfig+0x4cc>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fac4 	bl	80009c8 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff fac0 	bl	80009c8 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e026      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x498>
 8001462:	e01e      	b.n	80014a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d107      	bne.n	800147c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e019      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
 8001470:	40021000 	.word	0x40021000
 8001474:	40007000 	.word	0x40007000
 8001478:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HAL_RCC_OscConfig+0x500>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	429a      	cmp	r2, r3
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149a:	429a      	cmp	r2, r3
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0d0      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d910      	bls.n	80014f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b67      	ldr	r3, [pc, #412]	@ (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 0207 	bic.w	r2, r3, #7
 80014da:	4965      	ldr	r1, [pc, #404]	@ (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b63      	ldr	r3, [pc, #396]	@ (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0b8      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d020      	beq.n	8001542 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800150c:	4b59      	ldr	r3, [pc, #356]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a58      	ldr	r2, [pc, #352]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001516:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001524:	4b53      	ldr	r3, [pc, #332]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a52      	ldr	r2, [pc, #328]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800152e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001530:	4b50      	ldr	r3, [pc, #320]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	494d      	ldr	r1, [pc, #308]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d040      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b47      	ldr	r3, [pc, #284]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d115      	bne.n	800158e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e07f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d107      	bne.n	800157e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156e:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d109      	bne.n	800158e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e073      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157e:	4b3d      	ldr	r3, [pc, #244]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e06b      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800158e:	4b39      	ldr	r3, [pc, #228]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f023 0203 	bic.w	r2, r3, #3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4936      	ldr	r1, [pc, #216]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a0:	f7ff fa12 	bl	80009c8 <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	e00a      	b.n	80015be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a8:	f7ff fa0e 	bl	80009c8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e053      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015be:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 020c 	and.w	r2, r3, #12
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d1eb      	bne.n	80015a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015d0:	4b27      	ldr	r3, [pc, #156]	@ (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d210      	bcs.n	8001600 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 0207 	bic.w	r2, r3, #7
 80015e6:	4922      	ldr	r1, [pc, #136]	@ (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e032      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4916      	ldr	r1, [pc, #88]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	490e      	ldr	r1, [pc, #56]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800163e:	f000 f821 	bl	8001684 <HAL_RCC_GetSysClockFreq>
 8001642:	4602      	mov	r2, r0
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	490a      	ldr	r1, [pc, #40]	@ (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 8001650:	5ccb      	ldrb	r3, [r1, r3]
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	4a09      	ldr	r2, [pc, #36]	@ (800167c <HAL_RCC_ClockConfig+0x1cc>)
 8001658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_RCC_ClockConfig+0x1d0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff f970 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000
 8001674:	40021000 	.word	0x40021000
 8001678:	08002f28 	.word	0x08002f28
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <HAL_RCC_GetSysClockFreq+0x94>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d002      	beq.n	80016b4 <HAL_RCC_GetSysClockFreq+0x30>
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d003      	beq.n	80016ba <HAL_RCC_GetSysClockFreq+0x36>
 80016b2:	e027      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016b4:	4b19      	ldr	r3, [pc, #100]	@ (800171c <HAL_RCC_GetSysClockFreq+0x98>)
 80016b6:	613b      	str	r3, [r7, #16]
      break;
 80016b8:	e027      	b.n	800170a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	0c9b      	lsrs	r3, r3, #18
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016c4:	5cd3      	ldrb	r3, [r2, r3]
 80016c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d010      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_RCC_GetSysClockFreq+0x94>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	0c5b      	lsrs	r3, r3, #17
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	4a11      	ldr	r2, [pc, #68]	@ (8001724 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <HAL_RCC_GetSysClockFreq+0x98>)
 80016e6:	fb03 f202 	mul.w	r2, r3, r2
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e004      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001728 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016f8:	fb02 f303 	mul.w	r3, r2, r3
 80016fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	613b      	str	r3, [r7, #16]
      break;
 8001702:	e002      	b.n	800170a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <HAL_RCC_GetSysClockFreq+0x98>)
 8001706:	613b      	str	r3, [r7, #16]
      break;
 8001708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800170a:	693b      	ldr	r3, [r7, #16]
}
 800170c:	4618      	mov	r0, r3
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	007a1200 	.word	0x007a1200
 8001720:	08002f38 	.word	0x08002f38
 8001724:	08002f48 	.word	0x08002f48
 8001728:	003d0900 	.word	0x003d0900

0800172c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001734:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <RCC_Delay+0x34>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <RCC_Delay+0x38>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0a5b      	lsrs	r3, r3, #9
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001748:	bf00      	nop
  }
  while (Delay --);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	60fa      	str	r2, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f9      	bne.n	8001748 <RCC_Delay+0x1c>
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000000 	.word	0x20000000
 8001764:	10624dd3 	.word	0x10624dd3

08001768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e041      	b.n	80017fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7fe ffe6 	bl	8000760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3304      	adds	r3, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f000 fc52 	bl	8002050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d001      	beq.n	8001820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e03a      	b.n	8001896 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a18      	ldr	r2, [pc, #96]	@ (80018a0 <HAL_TIM_Base_Start_IT+0x98>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00e      	beq.n	8001860 <HAL_TIM_Base_Start_IT+0x58>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800184a:	d009      	beq.n	8001860 <HAL_TIM_Base_Start_IT+0x58>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a14      	ldr	r2, [pc, #80]	@ (80018a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d004      	beq.n	8001860 <HAL_TIM_Base_Start_IT+0x58>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a13      	ldr	r2, [pc, #76]	@ (80018a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d111      	bne.n	8001884 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b06      	cmp	r3, #6
 8001870:	d010      	beq.n	8001894 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001882:	e007      	b.n	8001894 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40012c00 	.word	0x40012c00
 80018a4:	40000400 	.word	0x40000400
 80018a8:	40000800 	.word	0x40000800

080018ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e041      	b.n	8001942 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d106      	bne.n	80018d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f839 	bl	800194a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3304      	adds	r3, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	f000 fbb0 	bl	8002050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d104      	bne.n	800197a <HAL_TIM_IC_Start_IT+0x1e>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001976:	b2db      	uxtb	r3, r3
 8001978:	e013      	b.n	80019a2 <HAL_TIM_IC_Start_IT+0x46>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d104      	bne.n	800198a <HAL_TIM_IC_Start_IT+0x2e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001986:	b2db      	uxtb	r3, r3
 8001988:	e00b      	b.n	80019a2 <HAL_TIM_IC_Start_IT+0x46>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d104      	bne.n	800199a <HAL_TIM_IC_Start_IT+0x3e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001996:	b2db      	uxtb	r3, r3
 8001998:	e003      	b.n	80019a2 <HAL_TIM_IC_Start_IT+0x46>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d104      	bne.n	80019b4 <HAL_TIM_IC_Start_IT+0x58>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	e013      	b.n	80019dc <HAL_TIM_IC_Start_IT+0x80>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d104      	bne.n	80019c4 <HAL_TIM_IC_Start_IT+0x68>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	e00b      	b.n	80019dc <HAL_TIM_IC_Start_IT+0x80>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d104      	bne.n	80019d4 <HAL_TIM_IC_Start_IT+0x78>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	e003      	b.n	80019dc <HAL_TIM_IC_Start_IT+0x80>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d102      	bne.n	80019ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80019e4:	7b7b      	ldrb	r3, [r7, #13]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e0b8      	b.n	8001b60 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d104      	bne.n	80019fe <HAL_TIM_IC_Start_IT+0xa2>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019fc:	e013      	b.n	8001a26 <HAL_TIM_IC_Start_IT+0xca>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d104      	bne.n	8001a0e <HAL_TIM_IC_Start_IT+0xb2>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2202      	movs	r2, #2
 8001a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a0c:	e00b      	b.n	8001a26 <HAL_TIM_IC_Start_IT+0xca>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d104      	bne.n	8001a1e <HAL_TIM_IC_Start_IT+0xc2>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a1c:	e003      	b.n	8001a26 <HAL_TIM_IC_Start_IT+0xca>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2202      	movs	r2, #2
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d104      	bne.n	8001a36 <HAL_TIM_IC_Start_IT+0xda>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a34:	e013      	b.n	8001a5e <HAL_TIM_IC_Start_IT+0x102>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d104      	bne.n	8001a46 <HAL_TIM_IC_Start_IT+0xea>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a44:	e00b      	b.n	8001a5e <HAL_TIM_IC_Start_IT+0x102>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d104      	bne.n	8001a56 <HAL_TIM_IC_Start_IT+0xfa>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a54:	e003      	b.n	8001a5e <HAL_TIM_IC_Start_IT+0x102>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d841      	bhi.n	8001ae8 <HAL_TIM_IC_Start_IT+0x18c>
 8001a64:	a201      	add	r2, pc, #4	@ (adr r2, 8001a6c <HAL_TIM_IC_Start_IT+0x110>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001aa1 	.word	0x08001aa1
 8001a70:	08001ae9 	.word	0x08001ae9
 8001a74:	08001ae9 	.word	0x08001ae9
 8001a78:	08001ae9 	.word	0x08001ae9
 8001a7c:	08001ab3 	.word	0x08001ab3
 8001a80:	08001ae9 	.word	0x08001ae9
 8001a84:	08001ae9 	.word	0x08001ae9
 8001a88:	08001ae9 	.word	0x08001ae9
 8001a8c:	08001ac5 	.word	0x08001ac5
 8001a90:	08001ae9 	.word	0x08001ae9
 8001a94:	08001ae9 	.word	0x08001ae9
 8001a98:	08001ae9 	.word	0x08001ae9
 8001a9c:	08001ad7 	.word	0x08001ad7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0202 	orr.w	r2, r2, #2
 8001aae:	60da      	str	r2, [r3, #12]
      break;
 8001ab0:	e01d      	b.n	8001aee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0204 	orr.w	r2, r2, #4
 8001ac0:	60da      	str	r2, [r3, #12]
      break;
 8001ac2:	e014      	b.n	8001aee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0208 	orr.w	r2, r2, #8
 8001ad2:	60da      	str	r2, [r3, #12]
      break;
 8001ad4:	e00b      	b.n	8001aee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0210 	orr.w	r2, r2, #16
 8001ae4:	60da      	str	r2, [r3, #12]
      break;
 8001ae6:	e002      	b.n	8001aee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
      break;
 8001aec:	bf00      	nop
  }

  if (status == HAL_OK)
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d134      	bne.n	8001b5e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	6839      	ldr	r1, [r7, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fcb8 	bl	8002472 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <HAL_TIM_IC_Start_IT+0x20c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00e      	beq.n	8001b2a <HAL_TIM_IC_Start_IT+0x1ce>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b14:	d009      	beq.n	8001b2a <HAL_TIM_IC_Start_IT+0x1ce>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <HAL_TIM_IC_Start_IT+0x210>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_TIM_IC_Start_IT+0x1ce>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <HAL_TIM_IC_Start_IT+0x214>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d111      	bne.n	8001b4e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d010      	beq.n	8001b5e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4c:	e007      	b.n	8001b5e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40012c00 	.word	0x40012c00
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	40000800 	.word	0x40000800

08001b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d020      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01b      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0202 	mvn.w	r2, #2
 8001ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fbbe 	bl	8000340 <HAL_TIM_IC_CaptureCallback>
 8001bc4:	e005      	b.n	8001bd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fa27 	bl	800201a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fa2d 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d020      	beq.n	8001c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01b      	beq.n	8001c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0204 	mvn.w	r2, #4
 8001bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7fe fb98 	bl	8000340 <HAL_TIM_IC_CaptureCallback>
 8001c10:	e005      	b.n	8001c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fa01 	bl	800201a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fa07 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d020      	beq.n	8001c70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01b      	beq.n	8001c70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0208 	mvn.w	r2, #8
 8001c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2204      	movs	r2, #4
 8001c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7fe fb72 	bl	8000340 <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f9db 	bl	800201a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f9e1 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d020      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01b      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0210 	mvn.w	r2, #16
 8001c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2208      	movs	r2, #8
 8001c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe fb4c 	bl	8000340 <HAL_TIM_IC_CaptureCallback>
 8001ca8:	e005      	b.n	8001cb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f9b5 	bl	800201a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f9bb 	bl	800202c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0201 	mvn.w	r2, #1
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fb7a 	bl	80003d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fc43 	bl	800258a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f98b 	bl	800203e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0220 	mvn.w	r2, #32
 8001d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fc16 	bl	8002578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_IC_ConfigChannel+0x1e>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e088      	b.n	8001e84 <HAL_TIM_IC_ConfigChannel+0x130>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d11b      	bne.n	8001db8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001d90:	f000 f9cc 	bl	800212c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 020c 	bic.w	r2, r2, #12
 8001da2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6999      	ldr	r1, [r3, #24]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	619a      	str	r2, [r3, #24]
 8001db6:	e060      	b.n	8001e7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d11c      	bne.n	8001df8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8001dce:	f000 fa35 	bl	800223c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699a      	ldr	r2, [r3, #24]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8001de0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6999      	ldr	r1, [r3, #24]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	021a      	lsls	r2, r3, #8
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	619a      	str	r2, [r3, #24]
 8001df6:	e040      	b.n	8001e7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d11b      	bne.n	8001e36 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8001e0e:	f000 fa80 	bl	8002312 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69da      	ldr	r2, [r3, #28]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 020c 	bic.w	r2, r2, #12
 8001e20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69d9      	ldr	r1, [r3, #28]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	61da      	str	r2, [r3, #28]
 8001e34:	e021      	b.n	8001e7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0c      	cmp	r3, #12
 8001e3a:	d11c      	bne.n	8001e76 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8001e4c:	f000 fa9c 	bl	8002388 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8001e5e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69d9      	ldr	r1, [r3, #28]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	021a      	lsls	r2, r3, #8
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	61da      	str	r2, [r3, #28]
 8001e74:	e001      	b.n	8001e7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e0b4      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x186>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ee0:	d03e      	beq.n	8001f60 <HAL_TIM_ConfigClockSource+0xd4>
 8001ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ee6:	f200 8087 	bhi.w	8001ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8001eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eee:	f000 8086 	beq.w	8001ffe <HAL_TIM_ConfigClockSource+0x172>
 8001ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ef6:	d87f      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ef8:	2b70      	cmp	r3, #112	@ 0x70
 8001efa:	d01a      	beq.n	8001f32 <HAL_TIM_ConfigClockSource+0xa6>
 8001efc:	2b70      	cmp	r3, #112	@ 0x70
 8001efe:	d87b      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8001f00:	2b60      	cmp	r3, #96	@ 0x60
 8001f02:	d050      	beq.n	8001fa6 <HAL_TIM_ConfigClockSource+0x11a>
 8001f04:	2b60      	cmp	r3, #96	@ 0x60
 8001f06:	d877      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8001f08:	2b50      	cmp	r3, #80	@ 0x50
 8001f0a:	d03c      	beq.n	8001f86 <HAL_TIM_ConfigClockSource+0xfa>
 8001f0c:	2b50      	cmp	r3, #80	@ 0x50
 8001f0e:	d873      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8001f10:	2b40      	cmp	r3, #64	@ 0x40
 8001f12:	d058      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0x13a>
 8001f14:	2b40      	cmp	r3, #64	@ 0x40
 8001f16:	d86f      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8001f18:	2b30      	cmp	r3, #48	@ 0x30
 8001f1a:	d064      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8001f1c:	2b30      	cmp	r3, #48	@ 0x30
 8001f1e:	d86b      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d060      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d867      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d05c      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d05a      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8001f30:	e062      	b.n	8001ff8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f42:	f000 fa77 	bl	8002434 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	609a      	str	r2, [r3, #8]
      break;
 8001f5e:	e04f      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f70:	f000 fa60 	bl	8002434 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f82:	609a      	str	r2, [r3, #8]
      break;
 8001f84:	e03c      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f92:	461a      	mov	r2, r3
 8001f94:	f000 f924 	bl	80021e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2150      	movs	r1, #80	@ 0x50
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fa2e 	bl	8002400 <TIM_ITRx_SetConfig>
      break;
 8001fa4:	e02c      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f000 f97e 	bl	80022b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2160      	movs	r1, #96	@ 0x60
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fa1e 	bl	8002400 <TIM_ITRx_SetConfig>
      break;
 8001fc4:	e01c      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f000 f904 	bl	80021e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2140      	movs	r1, #64	@ 0x40
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fa0e 	bl	8002400 <TIM_ITRx_SetConfig>
      break;
 8001fe4:	e00c      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f000 fa05 	bl	8002400 <TIM_ITRx_SetConfig>
      break;
 8001ff6:	e003      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8001ffc:	e000      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a2f      	ldr	r2, [pc, #188]	@ (8002120 <TIM_Base_SetConfig+0xd0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00b      	beq.n	8002080 <TIM_Base_SetConfig+0x30>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800206e:	d007      	beq.n	8002080 <TIM_Base_SetConfig+0x30>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a2c      	ldr	r2, [pc, #176]	@ (8002124 <TIM_Base_SetConfig+0xd4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <TIM_Base_SetConfig+0x30>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a2b      	ldr	r2, [pc, #172]	@ (8002128 <TIM_Base_SetConfig+0xd8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d108      	bne.n	8002092 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a22      	ldr	r2, [pc, #136]	@ (8002120 <TIM_Base_SetConfig+0xd0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <TIM_Base_SetConfig+0x62>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a0:	d007      	beq.n	80020b2 <TIM_Base_SetConfig+0x62>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002124 <TIM_Base_SetConfig+0xd4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_Base_SetConfig+0x62>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002128 <TIM_Base_SetConfig+0xd8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <TIM_Base_SetConfig+0xd0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d103      	bne.n	80020f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f023 0201 	bic.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]
  }
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40012c00 	.word	0x40012c00
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800

0800212c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f023 0201 	bic.w	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4a1f      	ldr	r2, [pc, #124]	@ (80021d4 <TIM_TI1_SetConfig+0xa8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00b      	beq.n	8002172 <TIM_TI1_SetConfig+0x46>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002160:	d007      	beq.n	8002172 <TIM_TI1_SetConfig+0x46>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4a1c      	ldr	r2, [pc, #112]	@ (80021d8 <TIM_TI1_SetConfig+0xac>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d003      	beq.n	8002172 <TIM_TI1_SetConfig+0x46>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4a1b      	ldr	r2, [pc, #108]	@ (80021dc <TIM_TI1_SetConfig+0xb0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <TIM_TI1_SetConfig+0x4a>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <TIM_TI1_SetConfig+0x4c>
 8002176:	2300      	movs	r3, #0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e003      	b.n	8002196 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800219c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f023 030a 	bic.w	r3, r3, #10
 80021b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f003 030a 	and.w	r3, r3, #10
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	621a      	str	r2, [r3, #32]
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	40012c00 	.word	0x40012c00
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800

080021e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	f023 0201 	bic.w	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800220a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f023 030a 	bic.w	r3, r3, #10
 800221c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	621a      	str	r2, [r3, #32]
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f023 0210 	bic.w	r2, r3, #16
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800227a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	031b      	lsls	r3, r3, #12
 8002280:	b29b      	uxth	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800228e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	621a      	str	r2, [r3, #32]
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f023 0210 	bic.w	r2, r3, #16
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80022de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	031b      	lsls	r3, r3, #12
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80022f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	621a      	str	r2, [r3, #32]
}
 8002308:	bf00      	nop
 800230a:	371c      	adds	r7, #28
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002312:	b480      	push	{r7}
 8002314:	b087      	sub	sp, #28
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800234e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	b2db      	uxtb	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002362:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	621a      	str	r2, [r3, #32]
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80023c6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	031b      	lsls	r3, r3, #12
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023da:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	031b      	lsls	r3, r3, #12
 80023e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	621a      	str	r2, [r3, #32]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002416:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	f043 0307 	orr.w	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	609a      	str	r2, [r3, #8]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800244e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	021a      	lsls	r2, r3, #8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	431a      	orrs	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	609a      	str	r2, [r3, #8]
}
 8002468:	bf00      	nop
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002472:	b480      	push	{r7}
 8002474:	b087      	sub	sp, #28
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	2201      	movs	r2, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	43db      	mvns	r3, r3
 8002494:	401a      	ands	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1a      	ldr	r2, [r3, #32]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	431a      	orrs	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	621a      	str	r2, [r3, #32]
}
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e046      	b.n	8002562 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a16      	ldr	r2, [pc, #88]	@ (800256c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00e      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002520:	d009      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a12      	ldr	r2, [pc, #72]	@ (8002570 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d004      	beq.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a10      	ldr	r2, [pc, #64]	@ (8002574 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d10c      	bne.n	8002550 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800253c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4313      	orrs	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	40012c00 	.word	0x40012c00
 8002570:	40000400 	.word	0x40000400
 8002574:	40000800 	.word	0x40000800

08002578 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <siprintf>:
 800259c:	b40e      	push	{r1, r2, r3}
 800259e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80025a2:	b510      	push	{r4, lr}
 80025a4:	2400      	movs	r4, #0
 80025a6:	b09d      	sub	sp, #116	@ 0x74
 80025a8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80025aa:	9002      	str	r0, [sp, #8]
 80025ac:	9006      	str	r0, [sp, #24]
 80025ae:	9107      	str	r1, [sp, #28]
 80025b0:	9104      	str	r1, [sp, #16]
 80025b2:	4809      	ldr	r0, [pc, #36]	@ (80025d8 <siprintf+0x3c>)
 80025b4:	4909      	ldr	r1, [pc, #36]	@ (80025dc <siprintf+0x40>)
 80025b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80025ba:	9105      	str	r1, [sp, #20]
 80025bc:	6800      	ldr	r0, [r0, #0]
 80025be:	a902      	add	r1, sp, #8
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80025c4:	f000 f992 	bl	80028ec <_svfiprintf_r>
 80025c8:	9b02      	ldr	r3, [sp, #8]
 80025ca:	701c      	strb	r4, [r3, #0]
 80025cc:	b01d      	add	sp, #116	@ 0x74
 80025ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025d2:	b003      	add	sp, #12
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	2000000c 	.word	0x2000000c
 80025dc:	ffff0208 	.word	0xffff0208

080025e0 <memset>:
 80025e0:	4603      	mov	r3, r0
 80025e2:	4402      	add	r2, r0
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d100      	bne.n	80025ea <memset+0xa>
 80025e8:	4770      	bx	lr
 80025ea:	f803 1b01 	strb.w	r1, [r3], #1
 80025ee:	e7f9      	b.n	80025e4 <memset+0x4>

080025f0 <__errno>:
 80025f0:	4b01      	ldr	r3, [pc, #4]	@ (80025f8 <__errno+0x8>)
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000000c 	.word	0x2000000c

080025fc <__libc_init_array>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	2600      	movs	r6, #0
 8002600:	4d0c      	ldr	r5, [pc, #48]	@ (8002634 <__libc_init_array+0x38>)
 8002602:	4c0d      	ldr	r4, [pc, #52]	@ (8002638 <__libc_init_array+0x3c>)
 8002604:	1b64      	subs	r4, r4, r5
 8002606:	10a4      	asrs	r4, r4, #2
 8002608:	42a6      	cmp	r6, r4
 800260a:	d109      	bne.n	8002620 <__libc_init_array+0x24>
 800260c:	f000 fc76 	bl	8002efc <_init>
 8002610:	2600      	movs	r6, #0
 8002612:	4d0a      	ldr	r5, [pc, #40]	@ (800263c <__libc_init_array+0x40>)
 8002614:	4c0a      	ldr	r4, [pc, #40]	@ (8002640 <__libc_init_array+0x44>)
 8002616:	1b64      	subs	r4, r4, r5
 8002618:	10a4      	asrs	r4, r4, #2
 800261a:	42a6      	cmp	r6, r4
 800261c:	d105      	bne.n	800262a <__libc_init_array+0x2e>
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	f855 3b04 	ldr.w	r3, [r5], #4
 8002624:	4798      	blx	r3
 8002626:	3601      	adds	r6, #1
 8002628:	e7ee      	b.n	8002608 <__libc_init_array+0xc>
 800262a:	f855 3b04 	ldr.w	r3, [r5], #4
 800262e:	4798      	blx	r3
 8002630:	3601      	adds	r6, #1
 8002632:	e7f2      	b.n	800261a <__libc_init_array+0x1e>
 8002634:	08002f80 	.word	0x08002f80
 8002638:	08002f80 	.word	0x08002f80
 800263c:	08002f80 	.word	0x08002f80
 8002640:	08002f84 	.word	0x08002f84

08002644 <__retarget_lock_acquire_recursive>:
 8002644:	4770      	bx	lr

08002646 <__retarget_lock_release_recursive>:
 8002646:	4770      	bx	lr

08002648 <_free_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4605      	mov	r5, r0
 800264c:	2900      	cmp	r1, #0
 800264e:	d040      	beq.n	80026d2 <_free_r+0x8a>
 8002650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002654:	1f0c      	subs	r4, r1, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	bfb8      	it	lt
 800265a:	18e4      	addlt	r4, r4, r3
 800265c:	f000 f8de 	bl	800281c <__malloc_lock>
 8002660:	4a1c      	ldr	r2, [pc, #112]	@ (80026d4 <_free_r+0x8c>)
 8002662:	6813      	ldr	r3, [r2, #0]
 8002664:	b933      	cbnz	r3, 8002674 <_free_r+0x2c>
 8002666:	6063      	str	r3, [r4, #4]
 8002668:	6014      	str	r4, [r2, #0]
 800266a:	4628      	mov	r0, r5
 800266c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002670:	f000 b8da 	b.w	8002828 <__malloc_unlock>
 8002674:	42a3      	cmp	r3, r4
 8002676:	d908      	bls.n	800268a <_free_r+0x42>
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	1821      	adds	r1, r4, r0
 800267c:	428b      	cmp	r3, r1
 800267e:	bf01      	itttt	eq
 8002680:	6819      	ldreq	r1, [r3, #0]
 8002682:	685b      	ldreq	r3, [r3, #4]
 8002684:	1809      	addeq	r1, r1, r0
 8002686:	6021      	streq	r1, [r4, #0]
 8002688:	e7ed      	b.n	8002666 <_free_r+0x1e>
 800268a:	461a      	mov	r2, r3
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	b10b      	cbz	r3, 8002694 <_free_r+0x4c>
 8002690:	42a3      	cmp	r3, r4
 8002692:	d9fa      	bls.n	800268a <_free_r+0x42>
 8002694:	6811      	ldr	r1, [r2, #0]
 8002696:	1850      	adds	r0, r2, r1
 8002698:	42a0      	cmp	r0, r4
 800269a:	d10b      	bne.n	80026b4 <_free_r+0x6c>
 800269c:	6820      	ldr	r0, [r4, #0]
 800269e:	4401      	add	r1, r0
 80026a0:	1850      	adds	r0, r2, r1
 80026a2:	4283      	cmp	r3, r0
 80026a4:	6011      	str	r1, [r2, #0]
 80026a6:	d1e0      	bne.n	800266a <_free_r+0x22>
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4408      	add	r0, r1
 80026ae:	6010      	str	r0, [r2, #0]
 80026b0:	6053      	str	r3, [r2, #4]
 80026b2:	e7da      	b.n	800266a <_free_r+0x22>
 80026b4:	d902      	bls.n	80026bc <_free_r+0x74>
 80026b6:	230c      	movs	r3, #12
 80026b8:	602b      	str	r3, [r5, #0]
 80026ba:	e7d6      	b.n	800266a <_free_r+0x22>
 80026bc:	6820      	ldr	r0, [r4, #0]
 80026be:	1821      	adds	r1, r4, r0
 80026c0:	428b      	cmp	r3, r1
 80026c2:	bf01      	itttt	eq
 80026c4:	6819      	ldreq	r1, [r3, #0]
 80026c6:	685b      	ldreq	r3, [r3, #4]
 80026c8:	1809      	addeq	r1, r1, r0
 80026ca:	6021      	streq	r1, [r4, #0]
 80026cc:	6063      	str	r3, [r4, #4]
 80026ce:	6054      	str	r4, [r2, #4]
 80026d0:	e7cb      	b.n	800266a <_free_r+0x22>
 80026d2:	bd38      	pop	{r3, r4, r5, pc}
 80026d4:	20000234 	.word	0x20000234

080026d8 <sbrk_aligned>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4e0f      	ldr	r6, [pc, #60]	@ (8002718 <sbrk_aligned+0x40>)
 80026dc:	460c      	mov	r4, r1
 80026de:	6831      	ldr	r1, [r6, #0]
 80026e0:	4605      	mov	r5, r0
 80026e2:	b911      	cbnz	r1, 80026ea <sbrk_aligned+0x12>
 80026e4:	f000 fba8 	bl	8002e38 <_sbrk_r>
 80026e8:	6030      	str	r0, [r6, #0]
 80026ea:	4621      	mov	r1, r4
 80026ec:	4628      	mov	r0, r5
 80026ee:	f000 fba3 	bl	8002e38 <_sbrk_r>
 80026f2:	1c43      	adds	r3, r0, #1
 80026f4:	d103      	bne.n	80026fe <sbrk_aligned+0x26>
 80026f6:	f04f 34ff 	mov.w	r4, #4294967295
 80026fa:	4620      	mov	r0, r4
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
 80026fe:	1cc4      	adds	r4, r0, #3
 8002700:	f024 0403 	bic.w	r4, r4, #3
 8002704:	42a0      	cmp	r0, r4
 8002706:	d0f8      	beq.n	80026fa <sbrk_aligned+0x22>
 8002708:	1a21      	subs	r1, r4, r0
 800270a:	4628      	mov	r0, r5
 800270c:	f000 fb94 	bl	8002e38 <_sbrk_r>
 8002710:	3001      	adds	r0, #1
 8002712:	d1f2      	bne.n	80026fa <sbrk_aligned+0x22>
 8002714:	e7ef      	b.n	80026f6 <sbrk_aligned+0x1e>
 8002716:	bf00      	nop
 8002718:	20000230 	.word	0x20000230

0800271c <_malloc_r>:
 800271c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002720:	1ccd      	adds	r5, r1, #3
 8002722:	f025 0503 	bic.w	r5, r5, #3
 8002726:	3508      	adds	r5, #8
 8002728:	2d0c      	cmp	r5, #12
 800272a:	bf38      	it	cc
 800272c:	250c      	movcc	r5, #12
 800272e:	2d00      	cmp	r5, #0
 8002730:	4606      	mov	r6, r0
 8002732:	db01      	blt.n	8002738 <_malloc_r+0x1c>
 8002734:	42a9      	cmp	r1, r5
 8002736:	d904      	bls.n	8002742 <_malloc_r+0x26>
 8002738:	230c      	movs	r3, #12
 800273a:	6033      	str	r3, [r6, #0]
 800273c:	2000      	movs	r0, #0
 800273e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002742:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002818 <_malloc_r+0xfc>
 8002746:	f000 f869 	bl	800281c <__malloc_lock>
 800274a:	f8d8 3000 	ldr.w	r3, [r8]
 800274e:	461c      	mov	r4, r3
 8002750:	bb44      	cbnz	r4, 80027a4 <_malloc_r+0x88>
 8002752:	4629      	mov	r1, r5
 8002754:	4630      	mov	r0, r6
 8002756:	f7ff ffbf 	bl	80026d8 <sbrk_aligned>
 800275a:	1c43      	adds	r3, r0, #1
 800275c:	4604      	mov	r4, r0
 800275e:	d158      	bne.n	8002812 <_malloc_r+0xf6>
 8002760:	f8d8 4000 	ldr.w	r4, [r8]
 8002764:	4627      	mov	r7, r4
 8002766:	2f00      	cmp	r7, #0
 8002768:	d143      	bne.n	80027f2 <_malloc_r+0xd6>
 800276a:	2c00      	cmp	r4, #0
 800276c:	d04b      	beq.n	8002806 <_malloc_r+0xea>
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	4639      	mov	r1, r7
 8002772:	4630      	mov	r0, r6
 8002774:	eb04 0903 	add.w	r9, r4, r3
 8002778:	f000 fb5e 	bl	8002e38 <_sbrk_r>
 800277c:	4581      	cmp	r9, r0
 800277e:	d142      	bne.n	8002806 <_malloc_r+0xea>
 8002780:	6821      	ldr	r1, [r4, #0]
 8002782:	4630      	mov	r0, r6
 8002784:	1a6d      	subs	r5, r5, r1
 8002786:	4629      	mov	r1, r5
 8002788:	f7ff ffa6 	bl	80026d8 <sbrk_aligned>
 800278c:	3001      	adds	r0, #1
 800278e:	d03a      	beq.n	8002806 <_malloc_r+0xea>
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	442b      	add	r3, r5
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	f8d8 3000 	ldr.w	r3, [r8]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	bb62      	cbnz	r2, 80027f8 <_malloc_r+0xdc>
 800279e:	f8c8 7000 	str.w	r7, [r8]
 80027a2:	e00f      	b.n	80027c4 <_malloc_r+0xa8>
 80027a4:	6822      	ldr	r2, [r4, #0]
 80027a6:	1b52      	subs	r2, r2, r5
 80027a8:	d420      	bmi.n	80027ec <_malloc_r+0xd0>
 80027aa:	2a0b      	cmp	r2, #11
 80027ac:	d917      	bls.n	80027de <_malloc_r+0xc2>
 80027ae:	1961      	adds	r1, r4, r5
 80027b0:	42a3      	cmp	r3, r4
 80027b2:	6025      	str	r5, [r4, #0]
 80027b4:	bf18      	it	ne
 80027b6:	6059      	strne	r1, [r3, #4]
 80027b8:	6863      	ldr	r3, [r4, #4]
 80027ba:	bf08      	it	eq
 80027bc:	f8c8 1000 	streq.w	r1, [r8]
 80027c0:	5162      	str	r2, [r4, r5]
 80027c2:	604b      	str	r3, [r1, #4]
 80027c4:	4630      	mov	r0, r6
 80027c6:	f000 f82f 	bl	8002828 <__malloc_unlock>
 80027ca:	f104 000b 	add.w	r0, r4, #11
 80027ce:	1d23      	adds	r3, r4, #4
 80027d0:	f020 0007 	bic.w	r0, r0, #7
 80027d4:	1ac2      	subs	r2, r0, r3
 80027d6:	bf1c      	itt	ne
 80027d8:	1a1b      	subne	r3, r3, r0
 80027da:	50a3      	strne	r3, [r4, r2]
 80027dc:	e7af      	b.n	800273e <_malloc_r+0x22>
 80027de:	6862      	ldr	r2, [r4, #4]
 80027e0:	42a3      	cmp	r3, r4
 80027e2:	bf0c      	ite	eq
 80027e4:	f8c8 2000 	streq.w	r2, [r8]
 80027e8:	605a      	strne	r2, [r3, #4]
 80027ea:	e7eb      	b.n	80027c4 <_malloc_r+0xa8>
 80027ec:	4623      	mov	r3, r4
 80027ee:	6864      	ldr	r4, [r4, #4]
 80027f0:	e7ae      	b.n	8002750 <_malloc_r+0x34>
 80027f2:	463c      	mov	r4, r7
 80027f4:	687f      	ldr	r7, [r7, #4]
 80027f6:	e7b6      	b.n	8002766 <_malloc_r+0x4a>
 80027f8:	461a      	mov	r2, r3
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	42a3      	cmp	r3, r4
 80027fe:	d1fb      	bne.n	80027f8 <_malloc_r+0xdc>
 8002800:	2300      	movs	r3, #0
 8002802:	6053      	str	r3, [r2, #4]
 8002804:	e7de      	b.n	80027c4 <_malloc_r+0xa8>
 8002806:	230c      	movs	r3, #12
 8002808:	4630      	mov	r0, r6
 800280a:	6033      	str	r3, [r6, #0]
 800280c:	f000 f80c 	bl	8002828 <__malloc_unlock>
 8002810:	e794      	b.n	800273c <_malloc_r+0x20>
 8002812:	6005      	str	r5, [r0, #0]
 8002814:	e7d6      	b.n	80027c4 <_malloc_r+0xa8>
 8002816:	bf00      	nop
 8002818:	20000234 	.word	0x20000234

0800281c <__malloc_lock>:
 800281c:	4801      	ldr	r0, [pc, #4]	@ (8002824 <__malloc_lock+0x8>)
 800281e:	f7ff bf11 	b.w	8002644 <__retarget_lock_acquire_recursive>
 8002822:	bf00      	nop
 8002824:	2000022c 	.word	0x2000022c

08002828 <__malloc_unlock>:
 8002828:	4801      	ldr	r0, [pc, #4]	@ (8002830 <__malloc_unlock+0x8>)
 800282a:	f7ff bf0c 	b.w	8002646 <__retarget_lock_release_recursive>
 800282e:	bf00      	nop
 8002830:	2000022c 	.word	0x2000022c

08002834 <__ssputs_r>:
 8002834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002838:	461f      	mov	r7, r3
 800283a:	688e      	ldr	r6, [r1, #8]
 800283c:	4682      	mov	sl, r0
 800283e:	42be      	cmp	r6, r7
 8002840:	460c      	mov	r4, r1
 8002842:	4690      	mov	r8, r2
 8002844:	680b      	ldr	r3, [r1, #0]
 8002846:	d82d      	bhi.n	80028a4 <__ssputs_r+0x70>
 8002848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800284c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002850:	d026      	beq.n	80028a0 <__ssputs_r+0x6c>
 8002852:	6965      	ldr	r5, [r4, #20]
 8002854:	6909      	ldr	r1, [r1, #16]
 8002856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800285a:	eba3 0901 	sub.w	r9, r3, r1
 800285e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002862:	1c7b      	adds	r3, r7, #1
 8002864:	444b      	add	r3, r9
 8002866:	106d      	asrs	r5, r5, #1
 8002868:	429d      	cmp	r5, r3
 800286a:	bf38      	it	cc
 800286c:	461d      	movcc	r5, r3
 800286e:	0553      	lsls	r3, r2, #21
 8002870:	d527      	bpl.n	80028c2 <__ssputs_r+0x8e>
 8002872:	4629      	mov	r1, r5
 8002874:	f7ff ff52 	bl	800271c <_malloc_r>
 8002878:	4606      	mov	r6, r0
 800287a:	b360      	cbz	r0, 80028d6 <__ssputs_r+0xa2>
 800287c:	464a      	mov	r2, r9
 800287e:	6921      	ldr	r1, [r4, #16]
 8002880:	f000 faf8 	bl	8002e74 <memcpy>
 8002884:	89a3      	ldrh	r3, [r4, #12]
 8002886:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800288a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800288e:	81a3      	strh	r3, [r4, #12]
 8002890:	6126      	str	r6, [r4, #16]
 8002892:	444e      	add	r6, r9
 8002894:	6026      	str	r6, [r4, #0]
 8002896:	463e      	mov	r6, r7
 8002898:	6165      	str	r5, [r4, #20]
 800289a:	eba5 0509 	sub.w	r5, r5, r9
 800289e:	60a5      	str	r5, [r4, #8]
 80028a0:	42be      	cmp	r6, r7
 80028a2:	d900      	bls.n	80028a6 <__ssputs_r+0x72>
 80028a4:	463e      	mov	r6, r7
 80028a6:	4632      	mov	r2, r6
 80028a8:	4641      	mov	r1, r8
 80028aa:	6820      	ldr	r0, [r4, #0]
 80028ac:	f000 faaa 	bl	8002e04 <memmove>
 80028b0:	2000      	movs	r0, #0
 80028b2:	68a3      	ldr	r3, [r4, #8]
 80028b4:	1b9b      	subs	r3, r3, r6
 80028b6:	60a3      	str	r3, [r4, #8]
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	4433      	add	r3, r6
 80028bc:	6023      	str	r3, [r4, #0]
 80028be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028c2:	462a      	mov	r2, r5
 80028c4:	f000 fae4 	bl	8002e90 <_realloc_r>
 80028c8:	4606      	mov	r6, r0
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d1e0      	bne.n	8002890 <__ssputs_r+0x5c>
 80028ce:	4650      	mov	r0, sl
 80028d0:	6921      	ldr	r1, [r4, #16]
 80028d2:	f7ff feb9 	bl	8002648 <_free_r>
 80028d6:	230c      	movs	r3, #12
 80028d8:	f8ca 3000 	str.w	r3, [sl]
 80028dc:	89a3      	ldrh	r3, [r4, #12]
 80028de:	f04f 30ff 	mov.w	r0, #4294967295
 80028e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028e6:	81a3      	strh	r3, [r4, #12]
 80028e8:	e7e9      	b.n	80028be <__ssputs_r+0x8a>
	...

080028ec <_svfiprintf_r>:
 80028ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f0:	4698      	mov	r8, r3
 80028f2:	898b      	ldrh	r3, [r1, #12]
 80028f4:	4607      	mov	r7, r0
 80028f6:	061b      	lsls	r3, r3, #24
 80028f8:	460d      	mov	r5, r1
 80028fa:	4614      	mov	r4, r2
 80028fc:	b09d      	sub	sp, #116	@ 0x74
 80028fe:	d510      	bpl.n	8002922 <_svfiprintf_r+0x36>
 8002900:	690b      	ldr	r3, [r1, #16]
 8002902:	b973      	cbnz	r3, 8002922 <_svfiprintf_r+0x36>
 8002904:	2140      	movs	r1, #64	@ 0x40
 8002906:	f7ff ff09 	bl	800271c <_malloc_r>
 800290a:	6028      	str	r0, [r5, #0]
 800290c:	6128      	str	r0, [r5, #16]
 800290e:	b930      	cbnz	r0, 800291e <_svfiprintf_r+0x32>
 8002910:	230c      	movs	r3, #12
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	b01d      	add	sp, #116	@ 0x74
 800291a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800291e:	2340      	movs	r3, #64	@ 0x40
 8002920:	616b      	str	r3, [r5, #20]
 8002922:	2300      	movs	r3, #0
 8002924:	9309      	str	r3, [sp, #36]	@ 0x24
 8002926:	2320      	movs	r3, #32
 8002928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800292c:	2330      	movs	r3, #48	@ 0x30
 800292e:	f04f 0901 	mov.w	r9, #1
 8002932:	f8cd 800c 	str.w	r8, [sp, #12]
 8002936:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002ad0 <_svfiprintf_r+0x1e4>
 800293a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800293e:	4623      	mov	r3, r4
 8002940:	469a      	mov	sl, r3
 8002942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002946:	b10a      	cbz	r2, 800294c <_svfiprintf_r+0x60>
 8002948:	2a25      	cmp	r2, #37	@ 0x25
 800294a:	d1f9      	bne.n	8002940 <_svfiprintf_r+0x54>
 800294c:	ebba 0b04 	subs.w	fp, sl, r4
 8002950:	d00b      	beq.n	800296a <_svfiprintf_r+0x7e>
 8002952:	465b      	mov	r3, fp
 8002954:	4622      	mov	r2, r4
 8002956:	4629      	mov	r1, r5
 8002958:	4638      	mov	r0, r7
 800295a:	f7ff ff6b 	bl	8002834 <__ssputs_r>
 800295e:	3001      	adds	r0, #1
 8002960:	f000 80a7 	beq.w	8002ab2 <_svfiprintf_r+0x1c6>
 8002964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002966:	445a      	add	r2, fp
 8002968:	9209      	str	r2, [sp, #36]	@ 0x24
 800296a:	f89a 3000 	ldrb.w	r3, [sl]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 809f 	beq.w	8002ab2 <_svfiprintf_r+0x1c6>
 8002974:	2300      	movs	r3, #0
 8002976:	f04f 32ff 	mov.w	r2, #4294967295
 800297a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800297e:	f10a 0a01 	add.w	sl, sl, #1
 8002982:	9304      	str	r3, [sp, #16]
 8002984:	9307      	str	r3, [sp, #28]
 8002986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800298a:	931a      	str	r3, [sp, #104]	@ 0x68
 800298c:	4654      	mov	r4, sl
 800298e:	2205      	movs	r2, #5
 8002990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002994:	484e      	ldr	r0, [pc, #312]	@ (8002ad0 <_svfiprintf_r+0x1e4>)
 8002996:	f000 fa5f 	bl	8002e58 <memchr>
 800299a:	9a04      	ldr	r2, [sp, #16]
 800299c:	b9d8      	cbnz	r0, 80029d6 <_svfiprintf_r+0xea>
 800299e:	06d0      	lsls	r0, r2, #27
 80029a0:	bf44      	itt	mi
 80029a2:	2320      	movmi	r3, #32
 80029a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029a8:	0711      	lsls	r1, r2, #28
 80029aa:	bf44      	itt	mi
 80029ac:	232b      	movmi	r3, #43	@ 0x2b
 80029ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029b2:	f89a 3000 	ldrb.w	r3, [sl]
 80029b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80029b8:	d015      	beq.n	80029e6 <_svfiprintf_r+0xfa>
 80029ba:	4654      	mov	r4, sl
 80029bc:	2000      	movs	r0, #0
 80029be:	f04f 0c0a 	mov.w	ip, #10
 80029c2:	9a07      	ldr	r2, [sp, #28]
 80029c4:	4621      	mov	r1, r4
 80029c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029ca:	3b30      	subs	r3, #48	@ 0x30
 80029cc:	2b09      	cmp	r3, #9
 80029ce:	d94b      	bls.n	8002a68 <_svfiprintf_r+0x17c>
 80029d0:	b1b0      	cbz	r0, 8002a00 <_svfiprintf_r+0x114>
 80029d2:	9207      	str	r2, [sp, #28]
 80029d4:	e014      	b.n	8002a00 <_svfiprintf_r+0x114>
 80029d6:	eba0 0308 	sub.w	r3, r0, r8
 80029da:	fa09 f303 	lsl.w	r3, r9, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	46a2      	mov	sl, r4
 80029e2:	9304      	str	r3, [sp, #16]
 80029e4:	e7d2      	b.n	800298c <_svfiprintf_r+0xa0>
 80029e6:	9b03      	ldr	r3, [sp, #12]
 80029e8:	1d19      	adds	r1, r3, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	9103      	str	r1, [sp, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bfbb      	ittet	lt
 80029f2:	425b      	neglt	r3, r3
 80029f4:	f042 0202 	orrlt.w	r2, r2, #2
 80029f8:	9307      	strge	r3, [sp, #28]
 80029fa:	9307      	strlt	r3, [sp, #28]
 80029fc:	bfb8      	it	lt
 80029fe:	9204      	strlt	r2, [sp, #16]
 8002a00:	7823      	ldrb	r3, [r4, #0]
 8002a02:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a04:	d10a      	bne.n	8002a1c <_svfiprintf_r+0x130>
 8002a06:	7863      	ldrb	r3, [r4, #1]
 8002a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a0a:	d132      	bne.n	8002a72 <_svfiprintf_r+0x186>
 8002a0c:	9b03      	ldr	r3, [sp, #12]
 8002a0e:	3402      	adds	r4, #2
 8002a10:	1d1a      	adds	r2, r3, #4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	9203      	str	r2, [sp, #12]
 8002a16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a1a:	9305      	str	r3, [sp, #20]
 8002a1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002ad4 <_svfiprintf_r+0x1e8>
 8002a20:	2203      	movs	r2, #3
 8002a22:	4650      	mov	r0, sl
 8002a24:	7821      	ldrb	r1, [r4, #0]
 8002a26:	f000 fa17 	bl	8002e58 <memchr>
 8002a2a:	b138      	cbz	r0, 8002a3c <_svfiprintf_r+0x150>
 8002a2c:	2240      	movs	r2, #64	@ 0x40
 8002a2e:	9b04      	ldr	r3, [sp, #16]
 8002a30:	eba0 000a 	sub.w	r0, r0, sl
 8002a34:	4082      	lsls	r2, r0
 8002a36:	4313      	orrs	r3, r2
 8002a38:	3401      	adds	r4, #1
 8002a3a:	9304      	str	r3, [sp, #16]
 8002a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a40:	2206      	movs	r2, #6
 8002a42:	4825      	ldr	r0, [pc, #148]	@ (8002ad8 <_svfiprintf_r+0x1ec>)
 8002a44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a48:	f000 fa06 	bl	8002e58 <memchr>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d036      	beq.n	8002abe <_svfiprintf_r+0x1d2>
 8002a50:	4b22      	ldr	r3, [pc, #136]	@ (8002adc <_svfiprintf_r+0x1f0>)
 8002a52:	bb1b      	cbnz	r3, 8002a9c <_svfiprintf_r+0x1b0>
 8002a54:	9b03      	ldr	r3, [sp, #12]
 8002a56:	3307      	adds	r3, #7
 8002a58:	f023 0307 	bic.w	r3, r3, #7
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	9303      	str	r3, [sp, #12]
 8002a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a62:	4433      	add	r3, r6
 8002a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a66:	e76a      	b.n	800293e <_svfiprintf_r+0x52>
 8002a68:	460c      	mov	r4, r1
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a70:	e7a8      	b.n	80029c4 <_svfiprintf_r+0xd8>
 8002a72:	2300      	movs	r3, #0
 8002a74:	f04f 0c0a 	mov.w	ip, #10
 8002a78:	4619      	mov	r1, r3
 8002a7a:	3401      	adds	r4, #1
 8002a7c:	9305      	str	r3, [sp, #20]
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a84:	3a30      	subs	r2, #48	@ 0x30
 8002a86:	2a09      	cmp	r2, #9
 8002a88:	d903      	bls.n	8002a92 <_svfiprintf_r+0x1a6>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0c6      	beq.n	8002a1c <_svfiprintf_r+0x130>
 8002a8e:	9105      	str	r1, [sp, #20]
 8002a90:	e7c4      	b.n	8002a1c <_svfiprintf_r+0x130>
 8002a92:	4604      	mov	r4, r0
 8002a94:	2301      	movs	r3, #1
 8002a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a9a:	e7f0      	b.n	8002a7e <_svfiprintf_r+0x192>
 8002a9c:	ab03      	add	r3, sp, #12
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	462a      	mov	r2, r5
 8002aa2:	4638      	mov	r0, r7
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae0 <_svfiprintf_r+0x1f4>)
 8002aa6:	a904      	add	r1, sp, #16
 8002aa8:	f3af 8000 	nop.w
 8002aac:	1c42      	adds	r2, r0, #1
 8002aae:	4606      	mov	r6, r0
 8002ab0:	d1d6      	bne.n	8002a60 <_svfiprintf_r+0x174>
 8002ab2:	89ab      	ldrh	r3, [r5, #12]
 8002ab4:	065b      	lsls	r3, r3, #25
 8002ab6:	f53f af2d 	bmi.w	8002914 <_svfiprintf_r+0x28>
 8002aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002abc:	e72c      	b.n	8002918 <_svfiprintf_r+0x2c>
 8002abe:	ab03      	add	r3, sp, #12
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	462a      	mov	r2, r5
 8002ac4:	4638      	mov	r0, r7
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <_svfiprintf_r+0x1f4>)
 8002ac8:	a904      	add	r1, sp, #16
 8002aca:	f000 f87d 	bl	8002bc8 <_printf_i>
 8002ace:	e7ed      	b.n	8002aac <_svfiprintf_r+0x1c0>
 8002ad0:	08002f4a 	.word	0x08002f4a
 8002ad4:	08002f50 	.word	0x08002f50
 8002ad8:	08002f54 	.word	0x08002f54
 8002adc:	00000000 	.word	0x00000000
 8002ae0:	08002835 	.word	0x08002835

08002ae4 <_printf_common>:
 8002ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae8:	4616      	mov	r6, r2
 8002aea:	4698      	mov	r8, r3
 8002aec:	688a      	ldr	r2, [r1, #8]
 8002aee:	690b      	ldr	r3, [r1, #16]
 8002af0:	4607      	mov	r7, r0
 8002af2:	4293      	cmp	r3, r2
 8002af4:	bfb8      	it	lt
 8002af6:	4613      	movlt	r3, r2
 8002af8:	6033      	str	r3, [r6, #0]
 8002afa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002afe:	460c      	mov	r4, r1
 8002b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b04:	b10a      	cbz	r2, 8002b0a <_printf_common+0x26>
 8002b06:	3301      	adds	r3, #1
 8002b08:	6033      	str	r3, [r6, #0]
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	0699      	lsls	r1, r3, #26
 8002b0e:	bf42      	ittt	mi
 8002b10:	6833      	ldrmi	r3, [r6, #0]
 8002b12:	3302      	addmi	r3, #2
 8002b14:	6033      	strmi	r3, [r6, #0]
 8002b16:	6825      	ldr	r5, [r4, #0]
 8002b18:	f015 0506 	ands.w	r5, r5, #6
 8002b1c:	d106      	bne.n	8002b2c <_printf_common+0x48>
 8002b1e:	f104 0a19 	add.w	sl, r4, #25
 8002b22:	68e3      	ldr	r3, [r4, #12]
 8002b24:	6832      	ldr	r2, [r6, #0]
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	42ab      	cmp	r3, r5
 8002b2a:	dc2b      	bgt.n	8002b84 <_printf_common+0xa0>
 8002b2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b30:	6822      	ldr	r2, [r4, #0]
 8002b32:	3b00      	subs	r3, #0
 8002b34:	bf18      	it	ne
 8002b36:	2301      	movne	r3, #1
 8002b38:	0692      	lsls	r2, r2, #26
 8002b3a:	d430      	bmi.n	8002b9e <_printf_common+0xba>
 8002b3c:	4641      	mov	r1, r8
 8002b3e:	4638      	mov	r0, r7
 8002b40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b44:	47c8      	blx	r9
 8002b46:	3001      	adds	r0, #1
 8002b48:	d023      	beq.n	8002b92 <_printf_common+0xae>
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	6922      	ldr	r2, [r4, #16]
 8002b4e:	f003 0306 	and.w	r3, r3, #6
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	bf14      	ite	ne
 8002b56:	2500      	movne	r5, #0
 8002b58:	6833      	ldreq	r3, [r6, #0]
 8002b5a:	f04f 0600 	mov.w	r6, #0
 8002b5e:	bf08      	it	eq
 8002b60:	68e5      	ldreq	r5, [r4, #12]
 8002b62:	f104 041a 	add.w	r4, r4, #26
 8002b66:	bf08      	it	eq
 8002b68:	1aed      	subeq	r5, r5, r3
 8002b6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002b6e:	bf08      	it	eq
 8002b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b74:	4293      	cmp	r3, r2
 8002b76:	bfc4      	itt	gt
 8002b78:	1a9b      	subgt	r3, r3, r2
 8002b7a:	18ed      	addgt	r5, r5, r3
 8002b7c:	42b5      	cmp	r5, r6
 8002b7e:	d11a      	bne.n	8002bb6 <_printf_common+0xd2>
 8002b80:	2000      	movs	r0, #0
 8002b82:	e008      	b.n	8002b96 <_printf_common+0xb2>
 8002b84:	2301      	movs	r3, #1
 8002b86:	4652      	mov	r2, sl
 8002b88:	4641      	mov	r1, r8
 8002b8a:	4638      	mov	r0, r7
 8002b8c:	47c8      	blx	r9
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d103      	bne.n	8002b9a <_printf_common+0xb6>
 8002b92:	f04f 30ff 	mov.w	r0, #4294967295
 8002b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b9a:	3501      	adds	r5, #1
 8002b9c:	e7c1      	b.n	8002b22 <_printf_common+0x3e>
 8002b9e:	2030      	movs	r0, #48	@ 0x30
 8002ba0:	18e1      	adds	r1, r4, r3
 8002ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002bac:	4422      	add	r2, r4
 8002bae:	3302      	adds	r3, #2
 8002bb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002bb4:	e7c2      	b.n	8002b3c <_printf_common+0x58>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	4622      	mov	r2, r4
 8002bba:	4641      	mov	r1, r8
 8002bbc:	4638      	mov	r0, r7
 8002bbe:	47c8      	blx	r9
 8002bc0:	3001      	adds	r0, #1
 8002bc2:	d0e6      	beq.n	8002b92 <_printf_common+0xae>
 8002bc4:	3601      	adds	r6, #1
 8002bc6:	e7d9      	b.n	8002b7c <_printf_common+0x98>

08002bc8 <_printf_i>:
 8002bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bcc:	7e0f      	ldrb	r7, [r1, #24]
 8002bce:	4691      	mov	r9, r2
 8002bd0:	2f78      	cmp	r7, #120	@ 0x78
 8002bd2:	4680      	mov	r8, r0
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	469a      	mov	sl, r3
 8002bd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002bde:	d807      	bhi.n	8002bf0 <_printf_i+0x28>
 8002be0:	2f62      	cmp	r7, #98	@ 0x62
 8002be2:	d80a      	bhi.n	8002bfa <_printf_i+0x32>
 8002be4:	2f00      	cmp	r7, #0
 8002be6:	f000 80d1 	beq.w	8002d8c <_printf_i+0x1c4>
 8002bea:	2f58      	cmp	r7, #88	@ 0x58
 8002bec:	f000 80b8 	beq.w	8002d60 <_printf_i+0x198>
 8002bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002bf8:	e03a      	b.n	8002c70 <_printf_i+0xa8>
 8002bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002bfe:	2b15      	cmp	r3, #21
 8002c00:	d8f6      	bhi.n	8002bf0 <_printf_i+0x28>
 8002c02:	a101      	add	r1, pc, #4	@ (adr r1, 8002c08 <_printf_i+0x40>)
 8002c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c08:	08002c61 	.word	0x08002c61
 8002c0c:	08002c75 	.word	0x08002c75
 8002c10:	08002bf1 	.word	0x08002bf1
 8002c14:	08002bf1 	.word	0x08002bf1
 8002c18:	08002bf1 	.word	0x08002bf1
 8002c1c:	08002bf1 	.word	0x08002bf1
 8002c20:	08002c75 	.word	0x08002c75
 8002c24:	08002bf1 	.word	0x08002bf1
 8002c28:	08002bf1 	.word	0x08002bf1
 8002c2c:	08002bf1 	.word	0x08002bf1
 8002c30:	08002bf1 	.word	0x08002bf1
 8002c34:	08002d73 	.word	0x08002d73
 8002c38:	08002c9f 	.word	0x08002c9f
 8002c3c:	08002d2d 	.word	0x08002d2d
 8002c40:	08002bf1 	.word	0x08002bf1
 8002c44:	08002bf1 	.word	0x08002bf1
 8002c48:	08002d95 	.word	0x08002d95
 8002c4c:	08002bf1 	.word	0x08002bf1
 8002c50:	08002c9f 	.word	0x08002c9f
 8002c54:	08002bf1 	.word	0x08002bf1
 8002c58:	08002bf1 	.word	0x08002bf1
 8002c5c:	08002d35 	.word	0x08002d35
 8002c60:	6833      	ldr	r3, [r6, #0]
 8002c62:	1d1a      	adds	r2, r3, #4
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6032      	str	r2, [r6, #0]
 8002c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c70:	2301      	movs	r3, #1
 8002c72:	e09c      	b.n	8002dae <_printf_i+0x1e6>
 8002c74:	6833      	ldr	r3, [r6, #0]
 8002c76:	6820      	ldr	r0, [r4, #0]
 8002c78:	1d19      	adds	r1, r3, #4
 8002c7a:	6031      	str	r1, [r6, #0]
 8002c7c:	0606      	lsls	r6, r0, #24
 8002c7e:	d501      	bpl.n	8002c84 <_printf_i+0xbc>
 8002c80:	681d      	ldr	r5, [r3, #0]
 8002c82:	e003      	b.n	8002c8c <_printf_i+0xc4>
 8002c84:	0645      	lsls	r5, r0, #25
 8002c86:	d5fb      	bpl.n	8002c80 <_printf_i+0xb8>
 8002c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c8c:	2d00      	cmp	r5, #0
 8002c8e:	da03      	bge.n	8002c98 <_printf_i+0xd0>
 8002c90:	232d      	movs	r3, #45	@ 0x2d
 8002c92:	426d      	negs	r5, r5
 8002c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c98:	230a      	movs	r3, #10
 8002c9a:	4858      	ldr	r0, [pc, #352]	@ (8002dfc <_printf_i+0x234>)
 8002c9c:	e011      	b.n	8002cc2 <_printf_i+0xfa>
 8002c9e:	6821      	ldr	r1, [r4, #0]
 8002ca0:	6833      	ldr	r3, [r6, #0]
 8002ca2:	0608      	lsls	r0, r1, #24
 8002ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ca8:	d402      	bmi.n	8002cb0 <_printf_i+0xe8>
 8002caa:	0649      	lsls	r1, r1, #25
 8002cac:	bf48      	it	mi
 8002cae:	b2ad      	uxthmi	r5, r5
 8002cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002cb2:	6033      	str	r3, [r6, #0]
 8002cb4:	bf14      	ite	ne
 8002cb6:	230a      	movne	r3, #10
 8002cb8:	2308      	moveq	r3, #8
 8002cba:	4850      	ldr	r0, [pc, #320]	@ (8002dfc <_printf_i+0x234>)
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002cc2:	6866      	ldr	r6, [r4, #4]
 8002cc4:	2e00      	cmp	r6, #0
 8002cc6:	60a6      	str	r6, [r4, #8]
 8002cc8:	db05      	blt.n	8002cd6 <_printf_i+0x10e>
 8002cca:	6821      	ldr	r1, [r4, #0]
 8002ccc:	432e      	orrs	r6, r5
 8002cce:	f021 0104 	bic.w	r1, r1, #4
 8002cd2:	6021      	str	r1, [r4, #0]
 8002cd4:	d04b      	beq.n	8002d6e <_printf_i+0x1a6>
 8002cd6:	4616      	mov	r6, r2
 8002cd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002cdc:	fb03 5711 	mls	r7, r3, r1, r5
 8002ce0:	5dc7      	ldrb	r7, [r0, r7]
 8002ce2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ce6:	462f      	mov	r7, r5
 8002ce8:	42bb      	cmp	r3, r7
 8002cea:	460d      	mov	r5, r1
 8002cec:	d9f4      	bls.n	8002cd8 <_printf_i+0x110>
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d10b      	bne.n	8002d0a <_printf_i+0x142>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	07df      	lsls	r7, r3, #31
 8002cf6:	d508      	bpl.n	8002d0a <_printf_i+0x142>
 8002cf8:	6923      	ldr	r3, [r4, #16]
 8002cfa:	6861      	ldr	r1, [r4, #4]
 8002cfc:	4299      	cmp	r1, r3
 8002cfe:	bfde      	ittt	le
 8002d00:	2330      	movle	r3, #48	@ 0x30
 8002d02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d0a:	1b92      	subs	r2, r2, r6
 8002d0c:	6122      	str	r2, [r4, #16]
 8002d0e:	464b      	mov	r3, r9
 8002d10:	4621      	mov	r1, r4
 8002d12:	4640      	mov	r0, r8
 8002d14:	f8cd a000 	str.w	sl, [sp]
 8002d18:	aa03      	add	r2, sp, #12
 8002d1a:	f7ff fee3 	bl	8002ae4 <_printf_common>
 8002d1e:	3001      	adds	r0, #1
 8002d20:	d14a      	bne.n	8002db8 <_printf_i+0x1f0>
 8002d22:	f04f 30ff 	mov.w	r0, #4294967295
 8002d26:	b004      	add	sp, #16
 8002d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	f043 0320 	orr.w	r3, r3, #32
 8002d32:	6023      	str	r3, [r4, #0]
 8002d34:	2778      	movs	r7, #120	@ 0x78
 8002d36:	4832      	ldr	r0, [pc, #200]	@ (8002e00 <_printf_i+0x238>)
 8002d38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	6831      	ldr	r1, [r6, #0]
 8002d40:	061f      	lsls	r7, r3, #24
 8002d42:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d46:	d402      	bmi.n	8002d4e <_printf_i+0x186>
 8002d48:	065f      	lsls	r7, r3, #25
 8002d4a:	bf48      	it	mi
 8002d4c:	b2ad      	uxthmi	r5, r5
 8002d4e:	6031      	str	r1, [r6, #0]
 8002d50:	07d9      	lsls	r1, r3, #31
 8002d52:	bf44      	itt	mi
 8002d54:	f043 0320 	orrmi.w	r3, r3, #32
 8002d58:	6023      	strmi	r3, [r4, #0]
 8002d5a:	b11d      	cbz	r5, 8002d64 <_printf_i+0x19c>
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	e7ad      	b.n	8002cbc <_printf_i+0xf4>
 8002d60:	4826      	ldr	r0, [pc, #152]	@ (8002dfc <_printf_i+0x234>)
 8002d62:	e7e9      	b.n	8002d38 <_printf_i+0x170>
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	f023 0320 	bic.w	r3, r3, #32
 8002d6a:	6023      	str	r3, [r4, #0]
 8002d6c:	e7f6      	b.n	8002d5c <_printf_i+0x194>
 8002d6e:	4616      	mov	r6, r2
 8002d70:	e7bd      	b.n	8002cee <_printf_i+0x126>
 8002d72:	6833      	ldr	r3, [r6, #0]
 8002d74:	6825      	ldr	r5, [r4, #0]
 8002d76:	1d18      	adds	r0, r3, #4
 8002d78:	6961      	ldr	r1, [r4, #20]
 8002d7a:	6030      	str	r0, [r6, #0]
 8002d7c:	062e      	lsls	r6, r5, #24
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	d501      	bpl.n	8002d86 <_printf_i+0x1be>
 8002d82:	6019      	str	r1, [r3, #0]
 8002d84:	e002      	b.n	8002d8c <_printf_i+0x1c4>
 8002d86:	0668      	lsls	r0, r5, #25
 8002d88:	d5fb      	bpl.n	8002d82 <_printf_i+0x1ba>
 8002d8a:	8019      	strh	r1, [r3, #0]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	4616      	mov	r6, r2
 8002d90:	6123      	str	r3, [r4, #16]
 8002d92:	e7bc      	b.n	8002d0e <_printf_i+0x146>
 8002d94:	6833      	ldr	r3, [r6, #0]
 8002d96:	2100      	movs	r1, #0
 8002d98:	1d1a      	adds	r2, r3, #4
 8002d9a:	6032      	str	r2, [r6, #0]
 8002d9c:	681e      	ldr	r6, [r3, #0]
 8002d9e:	6862      	ldr	r2, [r4, #4]
 8002da0:	4630      	mov	r0, r6
 8002da2:	f000 f859 	bl	8002e58 <memchr>
 8002da6:	b108      	cbz	r0, 8002dac <_printf_i+0x1e4>
 8002da8:	1b80      	subs	r0, r0, r6
 8002daa:	6060      	str	r0, [r4, #4]
 8002dac:	6863      	ldr	r3, [r4, #4]
 8002dae:	6123      	str	r3, [r4, #16]
 8002db0:	2300      	movs	r3, #0
 8002db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002db6:	e7aa      	b.n	8002d0e <_printf_i+0x146>
 8002db8:	4632      	mov	r2, r6
 8002dba:	4649      	mov	r1, r9
 8002dbc:	4640      	mov	r0, r8
 8002dbe:	6923      	ldr	r3, [r4, #16]
 8002dc0:	47d0      	blx	sl
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d0ad      	beq.n	8002d22 <_printf_i+0x15a>
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	079b      	lsls	r3, r3, #30
 8002dca:	d413      	bmi.n	8002df4 <_printf_i+0x22c>
 8002dcc:	68e0      	ldr	r0, [r4, #12]
 8002dce:	9b03      	ldr	r3, [sp, #12]
 8002dd0:	4298      	cmp	r0, r3
 8002dd2:	bfb8      	it	lt
 8002dd4:	4618      	movlt	r0, r3
 8002dd6:	e7a6      	b.n	8002d26 <_printf_i+0x15e>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	4632      	mov	r2, r6
 8002ddc:	4649      	mov	r1, r9
 8002dde:	4640      	mov	r0, r8
 8002de0:	47d0      	blx	sl
 8002de2:	3001      	adds	r0, #1
 8002de4:	d09d      	beq.n	8002d22 <_printf_i+0x15a>
 8002de6:	3501      	adds	r5, #1
 8002de8:	68e3      	ldr	r3, [r4, #12]
 8002dea:	9903      	ldr	r1, [sp, #12]
 8002dec:	1a5b      	subs	r3, r3, r1
 8002dee:	42ab      	cmp	r3, r5
 8002df0:	dcf2      	bgt.n	8002dd8 <_printf_i+0x210>
 8002df2:	e7eb      	b.n	8002dcc <_printf_i+0x204>
 8002df4:	2500      	movs	r5, #0
 8002df6:	f104 0619 	add.w	r6, r4, #25
 8002dfa:	e7f5      	b.n	8002de8 <_printf_i+0x220>
 8002dfc:	08002f5b 	.word	0x08002f5b
 8002e00:	08002f6c 	.word	0x08002f6c

08002e04 <memmove>:
 8002e04:	4288      	cmp	r0, r1
 8002e06:	b510      	push	{r4, lr}
 8002e08:	eb01 0402 	add.w	r4, r1, r2
 8002e0c:	d902      	bls.n	8002e14 <memmove+0x10>
 8002e0e:	4284      	cmp	r4, r0
 8002e10:	4623      	mov	r3, r4
 8002e12:	d807      	bhi.n	8002e24 <memmove+0x20>
 8002e14:	1e43      	subs	r3, r0, #1
 8002e16:	42a1      	cmp	r1, r4
 8002e18:	d008      	beq.n	8002e2c <memmove+0x28>
 8002e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e22:	e7f8      	b.n	8002e16 <memmove+0x12>
 8002e24:	4601      	mov	r1, r0
 8002e26:	4402      	add	r2, r0
 8002e28:	428a      	cmp	r2, r1
 8002e2a:	d100      	bne.n	8002e2e <memmove+0x2a>
 8002e2c:	bd10      	pop	{r4, pc}
 8002e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e36:	e7f7      	b.n	8002e28 <memmove+0x24>

08002e38 <_sbrk_r>:
 8002e38:	b538      	push	{r3, r4, r5, lr}
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	4d05      	ldr	r5, [pc, #20]	@ (8002e54 <_sbrk_r+0x1c>)
 8002e3e:	4604      	mov	r4, r0
 8002e40:	4608      	mov	r0, r1
 8002e42:	602b      	str	r3, [r5, #0]
 8002e44:	f7fd fd06 	bl	8000854 <_sbrk>
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	d102      	bne.n	8002e52 <_sbrk_r+0x1a>
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	b103      	cbz	r3, 8002e52 <_sbrk_r+0x1a>
 8002e50:	6023      	str	r3, [r4, #0]
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
 8002e54:	20000228 	.word	0x20000228

08002e58 <memchr>:
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b510      	push	{r4, lr}
 8002e5c:	b2c9      	uxtb	r1, r1
 8002e5e:	4402      	add	r2, r0
 8002e60:	4293      	cmp	r3, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	d101      	bne.n	8002e6a <memchr+0x12>
 8002e66:	2000      	movs	r0, #0
 8002e68:	e003      	b.n	8002e72 <memchr+0x1a>
 8002e6a:	7804      	ldrb	r4, [r0, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	428c      	cmp	r4, r1
 8002e70:	d1f6      	bne.n	8002e60 <memchr+0x8>
 8002e72:	bd10      	pop	{r4, pc}

08002e74 <memcpy>:
 8002e74:	440a      	add	r2, r1
 8002e76:	4291      	cmp	r1, r2
 8002e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e7c:	d100      	bne.n	8002e80 <memcpy+0xc>
 8002e7e:	4770      	bx	lr
 8002e80:	b510      	push	{r4, lr}
 8002e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e86:	4291      	cmp	r1, r2
 8002e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e8c:	d1f9      	bne.n	8002e82 <memcpy+0xe>
 8002e8e:	bd10      	pop	{r4, pc}

08002e90 <_realloc_r>:
 8002e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e94:	4607      	mov	r7, r0
 8002e96:	4614      	mov	r4, r2
 8002e98:	460d      	mov	r5, r1
 8002e9a:	b921      	cbnz	r1, 8002ea6 <_realloc_r+0x16>
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea2:	f7ff bc3b 	b.w	800271c <_malloc_r>
 8002ea6:	b92a      	cbnz	r2, 8002eb4 <_realloc_r+0x24>
 8002ea8:	f7ff fbce 	bl	8002648 <_free_r>
 8002eac:	4625      	mov	r5, r4
 8002eae:	4628      	mov	r0, r5
 8002eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eb4:	f000 f81a 	bl	8002eec <_malloc_usable_size_r>
 8002eb8:	4284      	cmp	r4, r0
 8002eba:	4606      	mov	r6, r0
 8002ebc:	d802      	bhi.n	8002ec4 <_realloc_r+0x34>
 8002ebe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002ec2:	d8f4      	bhi.n	8002eae <_realloc_r+0x1e>
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	4638      	mov	r0, r7
 8002ec8:	f7ff fc28 	bl	800271c <_malloc_r>
 8002ecc:	4680      	mov	r8, r0
 8002ece:	b908      	cbnz	r0, 8002ed4 <_realloc_r+0x44>
 8002ed0:	4645      	mov	r5, r8
 8002ed2:	e7ec      	b.n	8002eae <_realloc_r+0x1e>
 8002ed4:	42b4      	cmp	r4, r6
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	4629      	mov	r1, r5
 8002eda:	bf28      	it	cs
 8002edc:	4632      	movcs	r2, r6
 8002ede:	f7ff ffc9 	bl	8002e74 <memcpy>
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	4638      	mov	r0, r7
 8002ee6:	f7ff fbaf 	bl	8002648 <_free_r>
 8002eea:	e7f1      	b.n	8002ed0 <_realloc_r+0x40>

08002eec <_malloc_usable_size_r>:
 8002eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef0:	1f18      	subs	r0, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	bfbc      	itt	lt
 8002ef6:	580b      	ldrlt	r3, [r1, r0]
 8002ef8:	18c0      	addlt	r0, r0, r3
 8002efa:	4770      	bx	lr

08002efc <_init>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	bf00      	nop
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr

08002f08 <_fini>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr
