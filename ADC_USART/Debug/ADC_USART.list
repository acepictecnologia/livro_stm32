
ADC_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d6c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002e78  08002e78  00003e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef4  08002ef4  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002ef4  08002ef4  00003ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002efc  08002efc  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002efc  08002efc  00003efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f00  08002f00  00003f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002f04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08002f60  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08002f60  00004258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000843b  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000192a  00000000  00000000  0000c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ef  00000000  00000000  0000e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177b0  00000000  00000000  0000eba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009eb2  00000000  00000000  00026357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087296  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b749f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000236c  00000000  00000000  000b74e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000b9850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e60 	.word	0x08002e60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002e60 	.word	0x08002e60

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fa66 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f83a 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8f2 	bl	8000350 <MX_GPIO_Init>
  MX_ADC1_Init();
 800016c:	f000 f888 	bl	8000280 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f8c4 	bl	80002fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Calibra o ADC na inicialização para melhor precisão
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000174:	4814      	ldr	r0, [pc, #80]	@ (80001c8 <main+0x6c>)
 8000176:	f000 ff0d 	bl	8000f94 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Inicia o ADC
	  HAL_ADC_Start(&hadc1);
 800017a:	4813      	ldr	r0, [pc, #76]	@ (80001c8 <main+0x6c>)
 800017c:	f000 fbb6 	bl	80008ec <HAL_ADC_Start>

	  // Seleciona o periférico ADC1 com timeout de 1000ms
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000180:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000184:	4810      	ldr	r0, [pc, #64]	@ (80001c8 <main+0x6c>)
 8000186:	f000 fc5f 	bl	8000a48 <HAL_ADC_PollForConversion>

	  AD_RES = HAL_ADC_GetValue(&hadc1);
 800018a:	480f      	ldr	r0, [pc, #60]	@ (80001c8 <main+0x6c>)
 800018c:	f000 fd62 	bl	8000c54 <HAL_ADC_GetValue>
 8000190:	4603      	mov	r3, r0
 8000192:	b29a      	uxth	r2, r3
 8000194:	4b0d      	ldr	r3, [pc, #52]	@ (80001cc <main+0x70>)
 8000196:	801a      	strh	r2, [r3, #0]

	  sprintf(strBuffer, "%d\r\n", AD_RES);
 8000198:	4b0c      	ldr	r3, [pc, #48]	@ (80001cc <main+0x70>)
 800019a:	881b      	ldrh	r3, [r3, #0]
 800019c:	461a      	mov	r2, r3
 800019e:	490c      	ldr	r1, [pc, #48]	@ (80001d0 <main+0x74>)
 80001a0:	480c      	ldr	r0, [pc, #48]	@ (80001d4 <main+0x78>)
 80001a2:	f002 f9ad 	bl	8002500 <siprintf>

	  HAL_UART_Transmit(&huart1, (uint8_t*)strBuffer, strlen(strBuffer), 500);
 80001a6:	480b      	ldr	r0, [pc, #44]	@ (80001d4 <main+0x78>)
 80001a8:	f7ff ffd0 	bl	800014c <strlen>
 80001ac:	4603      	mov	r3, r0
 80001ae:	b29a      	uxth	r2, r3
 80001b0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80001b4:	4907      	ldr	r1, [pc, #28]	@ (80001d4 <main+0x78>)
 80001b6:	4808      	ldr	r0, [pc, #32]	@ (80001d8 <main+0x7c>)
 80001b8:	f001 ffce 	bl	8002158 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80001bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001c0:	f000 fa98 	bl	80006f4 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80001c4:	bf00      	nop
 80001c6:	e7d8      	b.n	800017a <main+0x1e>
 80001c8:	20000078 	.word	0x20000078
 80001cc:	200000f0 	.word	0x200000f0
 80001d0:	08002e78 	.word	0x08002e78
 80001d4:	200000f4 	.word	0x200000f4
 80001d8:	200000a8 	.word	0x200000a8

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b094      	sub	sp, #80	@ 0x50
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001e6:	2228      	movs	r2, #40	@ 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 f9aa 	bl	8002544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020c:	2301      	movs	r3, #1
 800020e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000210:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000214:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000216:	2300      	movs	r3, #0
 8000218:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800021e:	4618      	mov	r0, r3
 8000220:	f001 f9ce 	bl	80015c0 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x52>
  {
    Error_Handler();
 800022a:	f000 f8b3 	bl	8000394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000232:	2301      	movs	r3, #1
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 fc3a 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000256:	f000 f89d 	bl	8000394 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800025a:	2302      	movs	r3, #2
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800025e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000262:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fdba 	bl	8001de0 <HAL_RCCEx_PeriphCLKConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000272:	f000 f88f 	bl	8000394 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3750      	adds	r7, #80	@ 0x50
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000290:	4b18      	ldr	r3, [pc, #96]	@ (80002f4 <MX_ADC1_Init+0x74>)
 8000292:	4a19      	ldr	r2, [pc, #100]	@ (80002f8 <MX_ADC1_Init+0x78>)
 8000294:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000296:	4b17      	ldr	r3, [pc, #92]	@ (80002f4 <MX_ADC1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800029c:	4b15      	ldr	r3, [pc, #84]	@ (80002f4 <MX_ADC1_Init+0x74>)
 800029e:	2200      	movs	r2, #0
 80002a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002a2:	4b14      	ldr	r3, [pc, #80]	@ (80002f4 <MX_ADC1_Init+0x74>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002a8:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <MX_ADC1_Init+0x74>)
 80002aa:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b0:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <MX_ADC1_Init+0x74>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002b6:	4b0f      	ldr	r3, [pc, #60]	@ (80002f4 <MX_ADC1_Init+0x74>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002bc:	480d      	ldr	r0, [pc, #52]	@ (80002f4 <MX_ADC1_Init+0x74>)
 80002be:	f000 fa3d 	bl	800073c <HAL_ADC_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002c8:	f000 f864 	bl	8000394 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d0:	2301      	movs	r3, #1
 80002d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4619      	mov	r1, r3
 80002dc:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <MX_ADC1_Init+0x74>)
 80002de:	f000 fcc5 	bl	8000c6c <HAL_ADC_ConfigChannel>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002e8:	f000 f854 	bl	8000394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000078 	.word	0x20000078
 80002f8:	40012400 	.word	0x40012400

080002fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000300:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000302:	4a12      	ldr	r2, [pc, #72]	@ (800034c <MX_USART1_UART_Init+0x50>)
 8000304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000306:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000308:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800030c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000314:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800031a:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000322:	220c      	movs	r2, #12
 8000324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000326:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000332:	4805      	ldr	r0, [pc, #20]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000334:	f001 fec0 	bl	80020b8 <HAL_UART_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800033e:	f000 f829 	bl	8000394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	200000a8 	.word	0x200000a8
 800034c:	40013800 	.word	0x40013800

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000356:	4b0e      	ldr	r3, [pc, #56]	@ (8000390 <MX_GPIO_Init+0x40>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <MX_GPIO_Init+0x40>)
 800035c:	f043 0320 	orr.w	r3, r3, #32
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b0b      	ldr	r3, [pc, #44]	@ (8000390 <MX_GPIO_Init+0x40>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0320 	and.w	r3, r3, #32
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <MX_GPIO_Init+0x40>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a07      	ldr	r2, [pc, #28]	@ (8000390 <MX_GPIO_Init+0x40>)
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b05      	ldr	r3, [pc, #20]	@ (8000390 <MX_GPIO_Init+0x40>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0304 	and.w	r3, r3, #4
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000

08000394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000398:	b672      	cpsid	i
}
 800039a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <Error_Handler+0x8>

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a6:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <HAL_MspInit+0x5c>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a14      	ldr	r2, [pc, #80]	@ (80003fc <HAL_MspInit+0x5c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <HAL_MspInit+0x5c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <HAL_MspInit+0x5c>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	4a0e      	ldr	r2, [pc, #56]	@ (80003fc <HAL_MspInit+0x5c>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c8:	61d3      	str	r3, [r2, #28]
 80003ca:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <HAL_MspInit+0x5c>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <HAL_MspInit+0x60>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	4a04      	ldr	r2, [pc, #16]	@ (8000400 <HAL_MspInit+0x60>)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010000 	.word	0x40010000

08000404 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a14      	ldr	r2, [pc, #80]	@ (8000470 <HAL_ADC_MspInit+0x6c>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d121      	bne.n	8000468 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <HAL_ADC_MspInit+0x70>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a12      	ldr	r2, [pc, #72]	@ (8000474 <HAL_ADC_MspInit+0x70>)
 800042a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <HAL_ADC_MspInit+0x70>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b0d      	ldr	r3, [pc, #52]	@ (8000474 <HAL_ADC_MspInit+0x70>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a0c      	ldr	r2, [pc, #48]	@ (8000474 <HAL_ADC_MspInit+0x70>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <HAL_ADC_MspInit+0x70>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000454:	2301      	movs	r3, #1
 8000456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000458:	2303      	movs	r3, #3
 800045a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	4805      	ldr	r0, [pc, #20]	@ (8000478 <HAL_ADC_MspInit+0x74>)
 8000464:	f000 ff28 	bl	80012b8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40012400 	.word	0x40012400
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800

0800047c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a1c      	ldr	r2, [pc, #112]	@ (8000508 <HAL_UART_MspInit+0x8c>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d131      	bne.n	8000500 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800049c:	4b1b      	ldr	r3, [pc, #108]	@ (800050c <HAL_UART_MspInit+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a1a      	ldr	r2, [pc, #104]	@ (800050c <HAL_UART_MspInit+0x90>)
 80004a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b18      	ldr	r3, [pc, #96]	@ (800050c <HAL_UART_MspInit+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b15      	ldr	r3, [pc, #84]	@ (800050c <HAL_UART_MspInit+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a14      	ldr	r2, [pc, #80]	@ (800050c <HAL_UART_MspInit+0x90>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b12      	ldr	r3, [pc, #72]	@ (800050c <HAL_UART_MspInit+0x90>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d2:	2302      	movs	r3, #2
 80004d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d6:	2303      	movs	r3, #3
 80004d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	480b      	ldr	r0, [pc, #44]	@ (8000510 <HAL_UART_MspInit+0x94>)
 80004e2:	f000 fee9 	bl	80012b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	4805      	ldr	r0, [pc, #20]	@ (8000510 <HAL_UART_MspInit+0x94>)
 80004fc:	f000 fedc 	bl	80012b8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40013800 	.word	0x40013800
 800050c:	40021000 	.word	0x40021000
 8000510:	40010800 	.word	0x40010800

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <NMI_Handler+0x4>

0800051c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <MemManage_Handler+0x4>

0800052c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <UsageFault_Handler+0x4>

0800053c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000564:	f000 f8aa 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}

0800056c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000574:	4a14      	ldr	r2, [pc, #80]	@ (80005c8 <_sbrk+0x5c>)
 8000576:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <_sbrk+0x60>)
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <_sbrk+0x64>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d102      	bne.n	800058e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <_sbrk+0x64>)
 800058a:	4a12      	ldr	r2, [pc, #72]	@ (80005d4 <_sbrk+0x68>)
 800058c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <_sbrk+0x64>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	429a      	cmp	r2, r3
 800059a:	d207      	bcs.n	80005ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800059c:	f001 ffda 	bl	8002554 <__errno>
 80005a0:	4603      	mov	r3, r0
 80005a2:	220c      	movs	r2, #12
 80005a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	e009      	b.n	80005c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <_sbrk+0x64>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <_sbrk+0x64>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	4a05      	ldr	r2, [pc, #20]	@ (80005d0 <_sbrk+0x64>)
 80005bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20005000 	.word	0x20005000
 80005cc:	00000400 	.word	0x00000400
 80005d0:	20000108 	.word	0x20000108
 80005d4:	20000258 	.word	0x20000258

080005d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e4:	f7ff fff8 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480b      	ldr	r0, [pc, #44]	@ (8000618 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ea:	490c      	ldr	r1, [pc, #48]	@ (800061c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000600:	4c09      	ldr	r4, [pc, #36]	@ (8000628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060e:	f001 ffa7 	bl	8002560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff fda3 	bl	800015c <main>
  bx lr
 8000616:	4770      	bx	lr
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000620:	08002f04 	.word	0x08002f04
  ldr r2, =_sbss
 8000624:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000628:	20000258 	.word	0x20000258

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <HAL_Init+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	@ (8000658 <HAL_Init+0x28>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 fe05 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	200f      	movs	r0, #15
 8000648:	f000 f808 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff fea8 	bl	80003a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <HAL_InitTick+0x54>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <HAL_InitTick+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fe0f 	bl	800129e <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e00e      	b.n	80006a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d80a      	bhi.n	80006a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 fde5 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4a06      	ldr	r2, [pc, #24]	@ (80006b8 <HAL_InitTick+0x5c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <HAL_IncTick+0x1c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_IncTick+0x20>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a03      	ldr	r2, [pc, #12]	@ (80006dc <HAL_IncTick+0x20>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	20000008 	.word	0x20000008
 80006dc:	2000010c 	.word	0x2000010c

080006e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b02      	ldr	r3, [pc, #8]	@ (80006f0 <HAL_GetTick+0x10>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	2000010c 	.word	0x2000010c

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff fff0 	bl	80006e0 <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_Delay+0x44>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffe0 	bl	80006e0 <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000008 	.word	0x20000008

0800073c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e0be      	b.n	80008dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000768:	2b00      	cmp	r3, #0
 800076a:	d109      	bne.n	8000780 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff fe42 	bl	8000404 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 fbc5 	bl	8000f10 <ADC_ConversionStop_Disable>
 8000786:	4603      	mov	r3, r0
 8000788:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	2b00      	cmp	r3, #0
 8000794:	f040 8099 	bne.w	80008ca <HAL_ADC_Init+0x18e>
 8000798:	7dfb      	ldrb	r3, [r7, #23]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f040 8095 	bne.w	80008ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80007a8:	f023 0302 	bic.w	r3, r3, #2
 80007ac:	f043 0202 	orr.w	r2, r3, #2
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7b1b      	ldrb	r3, [r3, #12]
 80007c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007d4:	d003      	beq.n	80007de <HAL_ADC_Init+0xa2>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d102      	bne.n	80007e4 <HAL_ADC_Init+0xa8>
 80007de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e2:	e000      	b.n	80007e6 <HAL_ADC_Init+0xaa>
 80007e4:	2300      	movs	r3, #0
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7d1b      	ldrb	r3, [r3, #20]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d119      	bne.n	8000828 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7b1b      	ldrb	r3, [r3, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d109      	bne.n	8000810 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	3b01      	subs	r3, #1
 8000802:	035a      	lsls	r2, r3, #13
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	4313      	orrs	r3, r2
 8000808:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	e00b      	b.n	8000828 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000814:	f043 0220 	orr.w	r2, r3, #32
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000820:	f043 0201 	orr.w	r2, r3, #1
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	430a      	orrs	r2, r1
 800083a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <HAL_ADC_Init+0x1a8>)
 8000844:	4013      	ands	r3, r2
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	68b9      	ldr	r1, [r7, #8]
 800084c:	430b      	orrs	r3, r1
 800084e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000858:	d003      	beq.n	8000862 <HAL_ADC_Init+0x126>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d104      	bne.n	800086c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	3b01      	subs	r3, #1
 8000868:	051b      	lsls	r3, r3, #20
 800086a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000872:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	430a      	orrs	r2, r1
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <HAL_ADC_Init+0x1ac>)
 8000888:	4013      	ands	r3, r2
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	429a      	cmp	r2, r3
 800088e:	d10b      	bne.n	80008a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800089a:	f023 0303 	bic.w	r3, r3, #3
 800089e:	f043 0201 	orr.w	r2, r3, #1
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008a6:	e018      	b.n	80008da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008ac:	f023 0312 	bic.w	r3, r3, #18
 80008b0:	f043 0210 	orr.w	r2, r3, #16
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008bc:	f043 0201 	orr.w	r2, r3, #1
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008c8:	e007      	b.n	80008da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008ce:	f043 0210 	orr.w	r2, r3, #16
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008da:	7dfb      	ldrb	r3, [r7, #23]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	ffe1f7fd 	.word	0xffe1f7fd
 80008e8:	ff1f0efe 	.word	0xff1f0efe

080008ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d101      	bne.n	8000906 <HAL_ADC_Start+0x1a>
 8000902:	2302      	movs	r3, #2
 8000904:	e098      	b.n	8000a38 <HAL_ADC_Start+0x14c>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2201      	movs	r2, #1
 800090a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 faa4 	bl	8000e5c <ADC_Enable>
 8000914:	4603      	mov	r3, r0
 8000916:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	2b00      	cmp	r3, #0
 800091c:	f040 8087 	bne.w	8000a2e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000928:	f023 0301 	bic.w	r3, r3, #1
 800092c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a41      	ldr	r2, [pc, #260]	@ (8000a40 <HAL_ADC_Start+0x154>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d105      	bne.n	800094a <HAL_ADC_Start+0x5e>
 800093e:	4b41      	ldr	r3, [pc, #260]	@ (8000a44 <HAL_ADC_Start+0x158>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d115      	bne.n	8000976 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800094e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000960:	2b00      	cmp	r3, #0
 8000962:	d026      	beq.n	80009b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000968:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800096c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000974:	e01d      	b.n	80009b2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a2f      	ldr	r2, [pc, #188]	@ (8000a44 <HAL_ADC_Start+0x158>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d004      	beq.n	8000996 <HAL_ADC_Start+0xaa>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2b      	ldr	r2, [pc, #172]	@ (8000a40 <HAL_ADC_Start+0x154>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d10d      	bne.n	80009b2 <HAL_ADC_Start+0xc6>
 8000996:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <HAL_ADC_Start+0x158>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d007      	beq.n	80009b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80009aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d006      	beq.n	80009cc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c2:	f023 0206 	bic.w	r2, r3, #6
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009ca:	e002      	b.n	80009d2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f06f 0202 	mvn.w	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80009ee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80009f2:	d113      	bne.n	8000a1c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009f8:	4a11      	ldr	r2, [pc, #68]	@ (8000a40 <HAL_ADC_Start+0x154>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d105      	bne.n	8000a0a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <HAL_ADC_Start+0x158>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d108      	bne.n	8000a1c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	e00c      	b.n	8000a36 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	e003      	b.n	8000a36 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40012800 	.word	0x40012800
 8000a44:	40012400 	.word	0x40012400

08000a48 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b087      	sub	sp, #28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a5e:	f7ff fe3f 	bl	80006e0 <HAL_GetTick>
 8000a62:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a76:	f043 0220 	orr.w	r2, r3, #32
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e0d3      	b.n	8000c32 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d131      	bne.n	8000afc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d12a      	bne.n	8000afc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000aa6:	e021      	b.n	8000aec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aae:	d01d      	beq.n	8000aec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <HAL_ADC_PollForConversion+0x7e>
 8000ab6:	f7ff fe13 	bl	80006e0 <HAL_GetTick>
 8000aba:	4602      	mov	r2, r0
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d212      	bcs.n	8000aec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d10b      	bne.n	8000aec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad8:	f043 0204 	orr.w	r2, r3, #4
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	e0a2      	b.n	8000c32 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0d6      	beq.n	8000aa8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000afa:	e070      	b.n	8000bde <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000afc:	4b4f      	ldr	r3, [pc, #316]	@ (8000c3c <HAL_ADC_PollForConversion+0x1f4>)
 8000afe:	681c      	ldr	r4, [r3, #0]
 8000b00:	2002      	movs	r0, #2
 8000b02:	f001 fa23 	bl	8001f4c <HAL_RCCEx_GetPeriphCLKFreq>
 8000b06:	4603      	mov	r3, r0
 8000b08:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6919      	ldr	r1, [r3, #16]
 8000b12:	4b4b      	ldr	r3, [pc, #300]	@ (8000c40 <HAL_ADC_PollForConversion+0x1f8>)
 8000b14:	400b      	ands	r3, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d118      	bne.n	8000b4c <HAL_ADC_PollForConversion+0x104>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68d9      	ldr	r1, [r3, #12]
 8000b20:	4b48      	ldr	r3, [pc, #288]	@ (8000c44 <HAL_ADC_PollForConversion+0x1fc>)
 8000b22:	400b      	ands	r3, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d111      	bne.n	8000b4c <HAL_ADC_PollForConversion+0x104>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6919      	ldr	r1, [r3, #16]
 8000b2e:	4b46      	ldr	r3, [pc, #280]	@ (8000c48 <HAL_ADC_PollForConversion+0x200>)
 8000b30:	400b      	ands	r3, r1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d108      	bne.n	8000b48 <HAL_ADC_PollForConversion+0x100>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68d9      	ldr	r1, [r3, #12]
 8000b3c:	4b43      	ldr	r3, [pc, #268]	@ (8000c4c <HAL_ADC_PollForConversion+0x204>)
 8000b3e:	400b      	ands	r3, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <HAL_ADC_PollForConversion+0x100>
 8000b44:	2314      	movs	r3, #20
 8000b46:	e020      	b.n	8000b8a <HAL_ADC_PollForConversion+0x142>
 8000b48:	2329      	movs	r3, #41	@ 0x29
 8000b4a:	e01e      	b.n	8000b8a <HAL_ADC_PollForConversion+0x142>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6919      	ldr	r1, [r3, #16]
 8000b52:	4b3d      	ldr	r3, [pc, #244]	@ (8000c48 <HAL_ADC_PollForConversion+0x200>)
 8000b54:	400b      	ands	r3, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d106      	bne.n	8000b68 <HAL_ADC_PollForConversion+0x120>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68d9      	ldr	r1, [r3, #12]
 8000b60:	4b3a      	ldr	r3, [pc, #232]	@ (8000c4c <HAL_ADC_PollForConversion+0x204>)
 8000b62:	400b      	ands	r3, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00d      	beq.n	8000b84 <HAL_ADC_PollForConversion+0x13c>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6919      	ldr	r1, [r3, #16]
 8000b6e:	4b38      	ldr	r3, [pc, #224]	@ (8000c50 <HAL_ADC_PollForConversion+0x208>)
 8000b70:	400b      	ands	r3, r1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d108      	bne.n	8000b88 <HAL_ADC_PollForConversion+0x140>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68d9      	ldr	r1, [r3, #12]
 8000b7c:	4b34      	ldr	r3, [pc, #208]	@ (8000c50 <HAL_ADC_PollForConversion+0x208>)
 8000b7e:	400b      	ands	r3, r1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d101      	bne.n	8000b88 <HAL_ADC_PollForConversion+0x140>
 8000b84:	2354      	movs	r3, #84	@ 0x54
 8000b86:	e000      	b.n	8000b8a <HAL_ADC_PollForConversion+0x142>
 8000b88:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000b8a:	fb02 f303 	mul.w	r3, r2, r3
 8000b8e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b90:	e021      	b.n	8000bd6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d01a      	beq.n	8000bd0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d007      	beq.n	8000bb0 <HAL_ADC_PollForConversion+0x168>
 8000ba0:	f7ff fd9e 	bl	80006e0 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d20f      	bcs.n	8000bd0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d90b      	bls.n	8000bd0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bbc:	f043 0204 	orr.w	r2, r3, #4
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e030      	b.n	8000c32 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d8d9      	bhi.n	8000b92 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f06f 0212 	mvn.w	r2, #18
 8000be6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000bfe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c02:	d115      	bne.n	8000c30 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d111      	bne.n	8000c30 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d105      	bne.n	8000c30 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c28:	f043 0201 	orr.w	r2, r3, #1
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	371c      	adds	r7, #28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd90      	pop	{r4, r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	24924924 	.word	0x24924924
 8000c44:	00924924 	.word	0x00924924
 8000c48:	12492492 	.word	0x12492492
 8000c4c:	00492492 	.word	0x00492492
 8000c50:	00249249 	.word	0x00249249

08000c54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d101      	bne.n	8000c8c <HAL_ADC_ConfigChannel+0x20>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e0dc      	b.n	8000e46 <HAL_ADC_ConfigChannel+0x1da>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b06      	cmp	r3, #6
 8000c9a:	d81c      	bhi.n	8000cd6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	3b05      	subs	r3, #5
 8000cae:	221f      	movs	r2, #31
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4019      	ands	r1, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3b05      	subs	r3, #5
 8000cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cd4:	e03c      	b.n	8000d50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b0c      	cmp	r3, #12
 8000cdc:	d81c      	bhi.n	8000d18 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	3b23      	subs	r3, #35	@ 0x23
 8000cf0:	221f      	movs	r2, #31
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	4019      	ands	r1, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	3b23      	subs	r3, #35	@ 0x23
 8000d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d16:	e01b      	b.n	8000d50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	3b41      	subs	r3, #65	@ 0x41
 8000d2a:	221f      	movs	r2, #31
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	4019      	ands	r1, r3
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	3b41      	subs	r3, #65	@ 0x41
 8000d44:	fa00 f203 	lsl.w	r2, r0, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b09      	cmp	r3, #9
 8000d56:	d91c      	bls.n	8000d92 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68d9      	ldr	r1, [r3, #12]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	3b1e      	subs	r3, #30
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4019      	ands	r1, r3
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	6898      	ldr	r0, [r3, #8]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	3b1e      	subs	r3, #30
 8000d84:	fa00 f203 	lsl.w	r2, r0, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	e019      	b.n	8000dc6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6919      	ldr	r1, [r3, #16]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	2207      	movs	r2, #7
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	4019      	ands	r1, r3
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	6898      	ldr	r0, [r3, #8]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	fa00 f203 	lsl.w	r2, r0, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b10      	cmp	r3, #16
 8000dcc:	d003      	beq.n	8000dd6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dd2:	2b11      	cmp	r3, #17
 8000dd4:	d132      	bne.n	8000e3c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a1d      	ldr	r2, [pc, #116]	@ (8000e50 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d125      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d126      	bne.n	8000e3c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000dfc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b10      	cmp	r3, #16
 8000e04:	d11a      	bne.n	8000e3c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a13      	ldr	r2, [pc, #76]	@ (8000e58 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	0c9a      	lsrs	r2, r3, #18
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e1c:	e002      	b.n	8000e24 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f9      	bne.n	8000e1e <HAL_ADC_ConfigChannel+0x1b2>
 8000e2a:	e007      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e30:	f043 0220 	orr.w	r2, r3, #32
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	40012400 	.word	0x40012400
 8000e54:	20000000 	.word	0x20000000
 8000e58:	431bde83 	.word	0x431bde83

08000e5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d040      	beq.n	8000efc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0201 	orr.w	r2, r2, #1
 8000e88:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f08 <ADC_Enable+0xac>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000f0c <ADC_Enable+0xb0>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	0c9b      	lsrs	r3, r3, #18
 8000e96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e98:	e002      	b.n	8000ea0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f9      	bne.n	8000e9a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ea6:	f7ff fc1b 	bl	80006e0 <HAL_GetTick>
 8000eaa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000eac:	e01f      	b.n	8000eee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000eae:	f7ff fc17 	bl	80006e0 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d918      	bls.n	8000eee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d011      	beq.n	8000eee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ece:	f043 0210 	orr.w	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eda:	f043 0201 	orr.w	r2, r3, #1
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e007      	b.n	8000efe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d1d8      	bne.n	8000eae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	431bde83 	.word	0x431bde83

08000f10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d12e      	bne.n	8000f88 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0201 	bic.w	r2, r2, #1
 8000f38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f3a:	f7ff fbd1 	bl	80006e0 <HAL_GetTick>
 8000f3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f40:	e01b      	b.n	8000f7a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f42:	f7ff fbcd 	bl	80006e0 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d914      	bls.n	8000f7a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d10d      	bne.n	8000f7a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f62:	f043 0210 	orr.w	r2, r3, #16
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f6e:	f043 0201 	orr.w	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e007      	b.n	8000f8a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d0dc      	beq.n	8000f42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <HAL_ADCEx_Calibration_Start+0x1e>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e097      	b.n	80010e2 <HAL_ADCEx_Calibration_Start+0x14e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffa8 	bl	8000f10 <ADC_ConversionStop_Disable>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff49 	bl	8000e5c <ADC_Enable>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 8081 	bne.w	80010d8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fda:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fde:	f023 0302 	bic.w	r3, r3, #2
 8000fe2:	f043 0202 	orr.w	r2, r3, #2
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000fea:	4b40      	ldr	r3, [pc, #256]	@ (80010ec <HAL_ADCEx_Calibration_Start+0x158>)
 8000fec:	681c      	ldr	r4, [r3, #0]
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f000 ffac 	bl	8001f4c <HAL_RCCEx_GetPeriphCLKFreq>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000ffa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000ffc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000ffe:	e002      	b.n	8001006 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3b01      	subs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f9      	bne.n	8001000 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0208 	orr.w	r2, r2, #8
 800101a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800101c:	f7ff fb60 	bl	80006e0 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001022:	e01b      	b.n	800105c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001024:	f7ff fb5c 	bl	80006e0 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d914      	bls.n	800105c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00d      	beq.n	800105c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001044:	f023 0312 	bic.w	r3, r3, #18
 8001048:	f043 0210 	orr.w	r2, r3, #16
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e042      	b.n	80010e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1dc      	bne.n	8001024 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0204 	orr.w	r2, r2, #4
 8001078:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800107a:	f7ff fb31 	bl	80006e0 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001080:	e01b      	b.n	80010ba <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001082:	f7ff fb2d 	bl	80006e0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b0a      	cmp	r3, #10
 800108e:	d914      	bls.n	80010ba <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00d      	beq.n	80010ba <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a2:	f023 0312 	bic.w	r3, r3, #18
 80010a6:	f043 0210 	orr.w	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e013      	b.n	80010e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1dc      	bne.n	8001082 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010cc:	f023 0303 	bic.w	r3, r3, #3
 80010d0:	f043 0201 	orr.w	r2, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000000 	.word	0x20000000

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	@ (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	@ 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	@ 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff90 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	@ (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff49 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff5e 	bl	8001138 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff90 	bl	80011a8 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5f 	bl	8001154 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffb0 	bl	800120c <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b08b      	sub	sp, #44	@ 0x2c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	e169      	b.n	80015a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012cc:	2201      	movs	r2, #1
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f040 8158 	bne.w	800159a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a9a      	ldr	r2, [pc, #616]	@ (8001558 <HAL_GPIO_Init+0x2a0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d05e      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 80012f4:	4a98      	ldr	r2, [pc, #608]	@ (8001558 <HAL_GPIO_Init+0x2a0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d875      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 80012fa:	4a98      	ldr	r2, [pc, #608]	@ (800155c <HAL_GPIO_Init+0x2a4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d058      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001300:	4a96      	ldr	r2, [pc, #600]	@ (800155c <HAL_GPIO_Init+0x2a4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d86f      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001306:	4a96      	ldr	r2, [pc, #600]	@ (8001560 <HAL_GPIO_Init+0x2a8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d052      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 800130c:	4a94      	ldr	r2, [pc, #592]	@ (8001560 <HAL_GPIO_Init+0x2a8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d869      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001312:	4a94      	ldr	r2, [pc, #592]	@ (8001564 <HAL_GPIO_Init+0x2ac>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d04c      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001318:	4a92      	ldr	r2, [pc, #584]	@ (8001564 <HAL_GPIO_Init+0x2ac>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d863      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 800131e:	4a92      	ldr	r2, [pc, #584]	@ (8001568 <HAL_GPIO_Init+0x2b0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d046      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001324:	4a90      	ldr	r2, [pc, #576]	@ (8001568 <HAL_GPIO_Init+0x2b0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d85d      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 800132a:	2b12      	cmp	r3, #18
 800132c:	d82a      	bhi.n	8001384 <HAL_GPIO_Init+0xcc>
 800132e:	2b12      	cmp	r3, #18
 8001330:	d859      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001332:	a201      	add	r2, pc, #4	@ (adr r2, 8001338 <HAL_GPIO_Init+0x80>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	080013b3 	.word	0x080013b3
 800133c:	0800138d 	.word	0x0800138d
 8001340:	0800139f 	.word	0x0800139f
 8001344:	080013e1 	.word	0x080013e1
 8001348:	080013e7 	.word	0x080013e7
 800134c:	080013e7 	.word	0x080013e7
 8001350:	080013e7 	.word	0x080013e7
 8001354:	080013e7 	.word	0x080013e7
 8001358:	080013e7 	.word	0x080013e7
 800135c:	080013e7 	.word	0x080013e7
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013e7 	.word	0x080013e7
 8001368:	080013e7 	.word	0x080013e7
 800136c:	080013e7 	.word	0x080013e7
 8001370:	080013e7 	.word	0x080013e7
 8001374:	080013e7 	.word	0x080013e7
 8001378:	080013e7 	.word	0x080013e7
 800137c:	08001395 	.word	0x08001395
 8001380:	080013a9 	.word	0x080013a9
 8001384:	4a79      	ldr	r2, [pc, #484]	@ (800156c <HAL_GPIO_Init+0x2b4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800138a:	e02c      	b.n	80013e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	623b      	str	r3, [r7, #32]
          break;
 8001392:	e029      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	3304      	adds	r3, #4
 800139a:	623b      	str	r3, [r7, #32]
          break;
 800139c:	e024      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	3308      	adds	r3, #8
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e01f      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	330c      	adds	r3, #12
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e01a      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ba:	2304      	movs	r3, #4
 80013bc:	623b      	str	r3, [r7, #32]
          break;
 80013be:	e013      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d105      	bne.n	80013d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c8:	2308      	movs	r3, #8
 80013ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	611a      	str	r2, [r3, #16]
          break;
 80013d2:	e009      	b.n	80013e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d4:	2308      	movs	r3, #8
 80013d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	615a      	str	r2, [r3, #20]
          break;
 80013de:	e003      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
          break;
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          break;
 80013e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2bff      	cmp	r3, #255	@ 0xff
 80013ec:	d801      	bhi.n	80013f2 <HAL_GPIO_Init+0x13a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	e001      	b.n	80013f6 <HAL_GPIO_Init+0x13e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3304      	adds	r3, #4
 80013f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2bff      	cmp	r3, #255	@ 0xff
 80013fc:	d802      	bhi.n	8001404 <HAL_GPIO_Init+0x14c>
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x152>
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	3b08      	subs	r3, #8
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	210f      	movs	r1, #15
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	401a      	ands	r2, r3
 800141c:	6a39      	ldr	r1, [r7, #32]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80b1 	beq.w	800159a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001438:	4b4d      	ldr	r3, [pc, #308]	@ (8001570 <HAL_GPIO_Init+0x2b8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a4c      	ldr	r2, [pc, #304]	@ (8001570 <HAL_GPIO_Init+0x2b8>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b4a      	ldr	r3, [pc, #296]	@ (8001570 <HAL_GPIO_Init+0x2b8>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001450:	4a48      	ldr	r2, [pc, #288]	@ (8001574 <HAL_GPIO_Init+0x2bc>)
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a40      	ldr	r2, [pc, #256]	@ (8001578 <HAL_GPIO_Init+0x2c0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d013      	beq.n	80014a4 <HAL_GPIO_Init+0x1ec>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a3f      	ldr	r2, [pc, #252]	@ (800157c <HAL_GPIO_Init+0x2c4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d00d      	beq.n	80014a0 <HAL_GPIO_Init+0x1e8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a3e      	ldr	r2, [pc, #248]	@ (8001580 <HAL_GPIO_Init+0x2c8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d007      	beq.n	800149c <HAL_GPIO_Init+0x1e4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a3d      	ldr	r2, [pc, #244]	@ (8001584 <HAL_GPIO_Init+0x2cc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d101      	bne.n	8001498 <HAL_GPIO_Init+0x1e0>
 8001494:	2303      	movs	r3, #3
 8001496:	e006      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 8001498:	2304      	movs	r3, #4
 800149a:	e004      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 800149c:	2302      	movs	r3, #2
 800149e:	e002      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 80014a4:	2300      	movs	r3, #0
 80014a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014a8:	f002 0203 	and.w	r2, r2, #3
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	4093      	lsls	r3, r2
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014b6:	492f      	ldr	r1, [pc, #188]	@ (8001574 <HAL_GPIO_Init+0x2bc>)
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	492c      	ldr	r1, [pc, #176]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	608b      	str	r3, [r1, #8]
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014de:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	4928      	ldr	r1, [pc, #160]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014f8:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	4922      	ldr	r1, [pc, #136]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	60cb      	str	r3, [r1, #12]
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001506:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	43db      	mvns	r3, r3
 800150e:	491e      	ldr	r1, [pc, #120]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 8001510:	4013      	ands	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4918      	ldr	r1, [pc, #96]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	43db      	mvns	r3, r3
 8001536:	4914      	ldr	r1, [pc, #80]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 8001538:	4013      	ands	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d021      	beq.n	800158c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	490e      	ldr	r1, [pc, #56]	@ (8001588 <HAL_GPIO_Init+0x2d0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e021      	b.n	800159a <HAL_GPIO_Init+0x2e2>
 8001556:	bf00      	nop
 8001558:	10320000 	.word	0x10320000
 800155c:	10310000 	.word	0x10310000
 8001560:	10220000 	.word	0x10220000
 8001564:	10210000 	.word	0x10210000
 8001568:	10120000 	.word	0x10120000
 800156c:	10110000 	.word	0x10110000
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000
 8001578:	40010800 	.word	0x40010800
 800157c:	40010c00 	.word	0x40010c00
 8001580:	40011000 	.word	0x40011000
 8001584:	40011400 	.word	0x40011400
 8001588:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800158c:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <HAL_GPIO_Init+0x304>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	43db      	mvns	r3, r3
 8001594:	4909      	ldr	r1, [pc, #36]	@ (80015bc <HAL_GPIO_Init+0x304>)
 8001596:	4013      	ands	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	3301      	adds	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f47f ae8e 	bne.w	80012cc <HAL_GPIO_Init+0x14>
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	372c      	adds	r7, #44	@ 0x2c
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e272      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8087 	beq.w	80016ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e0:	4b92      	ldr	r3, [pc, #584]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d00c      	beq.n	8001606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015ec:	4b8f      	ldr	r3, [pc, #572]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d112      	bne.n	800161e <HAL_RCC_OscConfig+0x5e>
 80015f8:	4b8c      	ldr	r3, [pc, #560]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001604:	d10b      	bne.n	800161e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001606:	4b89      	ldr	r3, [pc, #548]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d06c      	beq.n	80016ec <HAL_RCC_OscConfig+0x12c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d168      	bne.n	80016ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e24c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x76>
 8001628:	4b80      	ldr	r3, [pc, #512]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a7f      	ldr	r2, [pc, #508]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 800162e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e02e      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x98>
 800163e:	4b7b      	ldr	r3, [pc, #492]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7a      	ldr	r2, [pc, #488]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b78      	ldr	r3, [pc, #480]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a77      	ldr	r2, [pc, #476]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001650:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e01d      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0xbc>
 8001662:	4b72      	ldr	r3, [pc, #456]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a71      	ldr	r2, [pc, #452]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b6f      	ldr	r3, [pc, #444]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a6e      	ldr	r2, [pc, #440]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e00b      	b.n	8001694 <HAL_RCC_OscConfig+0xd4>
 800167c:	4b6b      	ldr	r3, [pc, #428]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a6a      	ldr	r2, [pc, #424]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b68      	ldr	r3, [pc, #416]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a67      	ldr	r2, [pc, #412]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 800168e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff f820 	bl	80006e0 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff f81c 	bl	80006e0 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	@ 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e200      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b5d      	ldr	r3, [pc, #372]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0xe4>
 80016c2:	e014      	b.n	80016ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff f80c 	bl	80006e0 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff f808 	bl	80006e0 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	@ 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1ec      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	4b53      	ldr	r3, [pc, #332]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x10c>
 80016ea:	e000      	b.n	80016ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d063      	beq.n	80017c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fa:	4b4c      	ldr	r3, [pc, #304]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001706:	4b49      	ldr	r3, [pc, #292]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b08      	cmp	r3, #8
 8001710:	d11c      	bne.n	800174c <HAL_RCC_OscConfig+0x18c>
 8001712:	4b46      	ldr	r3, [pc, #280]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d116      	bne.n	800174c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	4b43      	ldr	r3, [pc, #268]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_RCC_OscConfig+0x176>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e1c0      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b3d      	ldr	r3, [pc, #244]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4939      	ldr	r1, [pc, #228]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174a:	e03a      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001754:	4b36      	ldr	r3, [pc, #216]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7fe ffc1 	bl	80006e0 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001762:	f7fe ffbd 	bl	80006e0 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e1a1      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4927      	ldr	r1, [pc, #156]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
 8001794:	e015      	b.n	80017c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001796:	4b26      	ldr	r3, [pc, #152]	@ (8001830 <HAL_RCC_OscConfig+0x270>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7fe ffa0 	bl	80006e0 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a4:	f7fe ff9c 	bl	80006e0 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e180      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d03a      	beq.n	8001844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d019      	beq.n	800180a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d6:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7fe ff80 	bl	80006e0 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e4:	f7fe ff7c 	bl	80006e0 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e160      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001802:	2001      	movs	r0, #1
 8001804:	f000 face 	bl	8001da4 <RCC_Delay>
 8001808:	e01c      	b.n	8001844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7fe ff66 	bl	80006e0 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001816:	e00f      	b.n	8001838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001818:	f7fe ff62 	bl	80006e0 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d908      	bls.n	8001838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e146      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	42420000 	.word	0x42420000
 8001834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4b92      	ldr	r3, [pc, #584]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1e9      	bne.n	8001818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a6 	beq.w	800199e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001856:	4b8b      	ldr	r3, [pc, #556]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10d      	bne.n	800187e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b88      	ldr	r3, [pc, #544]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a87      	ldr	r2, [pc, #540]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b85      	ldr	r3, [pc, #532]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187a:	2301      	movs	r3, #1
 800187c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187e:	4b82      	ldr	r3, [pc, #520]	@ (8001a88 <HAL_RCC_OscConfig+0x4c8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d118      	bne.n	80018bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a88 <HAL_RCC_OscConfig+0x4c8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a88 <HAL_RCC_OscConfig+0x4c8>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001896:	f7fe ff23 	bl	80006e0 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189e:	f7fe ff1f 	bl	80006e0 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b64      	cmp	r3, #100	@ 0x64
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e103      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	4b75      	ldr	r3, [pc, #468]	@ (8001a88 <HAL_RCC_OscConfig+0x4c8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x312>
 80018c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a6e      	ldr	r2, [pc, #440]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	e02d      	b.n	800192e <HAL_RCC_OscConfig+0x36e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x334>
 80018da:	4b6a      	ldr	r3, [pc, #424]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	4a69      	ldr	r2, [pc, #420]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	6213      	str	r3, [r2, #32]
 80018e6:	4b67      	ldr	r3, [pc, #412]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a66      	ldr	r2, [pc, #408]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	e01c      	b.n	800192e <HAL_RCC_OscConfig+0x36e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d10c      	bne.n	8001916 <HAL_RCC_OscConfig+0x356>
 80018fc:	4b61      	ldr	r3, [pc, #388]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a60      	ldr	r2, [pc, #384]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	4b5e      	ldr	r3, [pc, #376]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4a5d      	ldr	r2, [pc, #372]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6213      	str	r3, [r2, #32]
 8001914:	e00b      	b.n	800192e <HAL_RCC_OscConfig+0x36e>
 8001916:	4b5b      	ldr	r3, [pc, #364]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a5a      	ldr	r2, [pc, #360]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a57      	ldr	r2, [pc, #348]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d015      	beq.n	8001962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7fe fed3 	bl	80006e0 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7fe fecf 	bl	80006e0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0b1      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	4b4b      	ldr	r3, [pc, #300]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ee      	beq.n	800193e <HAL_RCC_OscConfig+0x37e>
 8001960:	e014      	b.n	800198c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001962:	f7fe febd 	bl	80006e0 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7fe feb9 	bl	80006e0 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e09b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001980:	4b40      	ldr	r3, [pc, #256]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ee      	bne.n	800196a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d105      	bne.n	800199e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001992:	4b3c      	ldr	r3, [pc, #240]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a3b      	ldr	r2, [pc, #236]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800199c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a8:	4b36      	ldr	r3, [pc, #216]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d061      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d146      	bne.n	8001a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019bc:	4b33      	ldr	r3, [pc, #204]	@ (8001a8c <HAL_RCC_OscConfig+0x4cc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7fe fe8d 	bl	80006e0 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7fe fe89 	bl	80006e0 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e06d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019dc:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019f2:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	4921      	ldr	r1, [pc, #132]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a19      	ldr	r1, [r3, #32]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	430b      	orrs	r3, r1
 8001a16:	491b      	ldr	r1, [pc, #108]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <HAL_RCC_OscConfig+0x4cc>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7fe fe5d 	bl	80006e0 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7fe fe59 	bl	80006e0 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e03d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x46a>
 8001a48:	e035      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <HAL_RCC_OscConfig+0x4cc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7fe fe46 	bl	80006e0 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7fe fe42 	bl	80006e0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e026      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x498>
 8001a76:	e01e      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e019      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_RCC_OscConfig+0x500>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0d0      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d910      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b67      	ldr	r3, [pc, #412]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	4965      	ldr	r1, [pc, #404]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b63      	ldr	r3, [pc, #396]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0b8      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b20:	4b59      	ldr	r3, [pc, #356]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4a58      	ldr	r2, [pc, #352]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b38:	4b53      	ldr	r3, [pc, #332]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a52      	ldr	r2, [pc, #328]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b50      	ldr	r3, [pc, #320]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	494d      	ldr	r1, [pc, #308]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d040      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	4b47      	ldr	r3, [pc, #284]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d115      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e07f      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b82:	4b41      	ldr	r3, [pc, #260]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e073      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	4b3d      	ldr	r3, [pc, #244]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e06b      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4936      	ldr	r1, [pc, #216]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb4:	f7fe fd94 	bl	80006e0 <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7fe fd90 	bl	80006e0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e053      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 020c 	and.w	r2, r3, #12
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1eb      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d210      	bcs.n	8001c14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 0207 	bic.w	r2, r3, #7
 8001bfa:	4922      	ldr	r1, [pc, #136]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e032      	b.n	8001c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c20:	4b19      	ldr	r3, [pc, #100]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4916      	ldr	r1, [pc, #88]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	490e      	ldr	r1, [pc, #56]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c52:	f000 f821 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	490a      	ldr	r1, [pc, #40]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c64:	5ccb      	ldrb	r3, [r1, r3]
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	4a09      	ldr	r2, [pc, #36]	@ (8001c90 <HAL_RCC_ClockConfig+0x1cc>)
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c6e:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <HAL_RCC_ClockConfig+0x1d0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fcf2 	bl	800065c <HAL_InitTick>

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40022000 	.word	0x40022000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08002e80 	.word	0x08002e80
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d002      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x30>
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x36>
 8001cc6:	e027      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cca:	613b      	str	r3, [r7, #16]
      break;
 8001ccc:	e027      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	0c9b      	lsrs	r3, r3, #18
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	4a17      	ldr	r2, [pc, #92]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cd8:	5cd3      	ldrb	r3, [r2, r3]
 8001cda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d010      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	0c5b      	lsrs	r3, r3, #17
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	4a11      	ldr	r2, [pc, #68]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cfa:	fb03 f202 	mul.w	r2, r3, r2
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e004      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	613b      	str	r3, [r7, #16]
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d1a:	613b      	str	r3, [r7, #16]
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	693b      	ldr	r3, [r7, #16]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	007a1200 	.word	0x007a1200
 8001d34:	08002e98 	.word	0x08002e98
 8001d38:	08002ea8 	.word	0x08002ea8
 8001d3c:	003d0900 	.word	0x003d0900

08001d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d44:	4b02      	ldr	r3, [pc, #8]	@ (8001d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000000 	.word	0x20000000

08001d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d58:	f7ff fff2 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4903      	ldr	r1, [pc, #12]	@ (8001d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08002e90 	.word	0x08002e90

08001d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0adb      	lsrs	r3, r3, #11
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4903      	ldr	r1, [pc, #12]	@ (8001da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08002e90 	.word	0x08002e90

08001da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dac:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <RCC_Delay+0x34>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <RCC_Delay+0x38>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0a5b      	lsrs	r3, r3, #9
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc0:	bf00      	nop
  }
  while (Delay --);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1e5a      	subs	r2, r3, #1
 8001dc6:	60fa      	str	r2, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f9      	bne.n	8001dc0 <RCC_Delay+0x1c>
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	10624dd3 	.word	0x10624dd3

08001de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d07d      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e00:	4b4f      	ldr	r3, [pc, #316]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10d      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	4a4b      	ldr	r2, [pc, #300]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	61d3      	str	r3, [r2, #28]
 8001e18:	4b49      	ldr	r3, [pc, #292]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e24:	2301      	movs	r3, #1
 8001e26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b46      	ldr	r3, [pc, #280]	@ (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d118      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e34:	4b43      	ldr	r3, [pc, #268]	@ (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a42      	ldr	r2, [pc, #264]	@ (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e40:	f7fe fc4e 	bl	80006e0 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e46:	e008      	b.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e48:	f7fe fc4a 	bl	80006e0 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	@ 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e06d      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e66:	4b36      	ldr	r3, [pc, #216]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d02e      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d027      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e84:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e94:	4b2c      	ldr	r3, [pc, #176]	@ (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e9a:	4a29      	ldr	r2, [pc, #164]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d014      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fc19 	bl	80006e0 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7fe fc15 	bl	80006e0 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e036      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ee      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4917      	ldr	r1, [pc, #92]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	4a13      	ldr	r2, [pc, #76]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f04:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	490b      	ldr	r1, [pc, #44]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f22:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4904      	ldr	r1, [pc, #16]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40007000 	.word	0x40007000
 8001f48:	42420440 	.word	0x42420440

08001f4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b10      	cmp	r3, #16
 8001f72:	f200 808a 	bhi.w	800208a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d045      	beq.n	8002008 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d075      	beq.n	800206e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001f82:	e082      	b.n	800208a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001f84:	4b46      	ldr	r3, [pc, #280]	@ (80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f8a:	4b45      	ldr	r3, [pc, #276]	@ (80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d07b      	beq.n	800208e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a41      	ldr	r2, [pc, #260]	@ (80020a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d015      	beq.n	8001fda <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fae:	4b3c      	ldr	r3, [pc, #240]	@ (80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	0c5b      	lsrs	r3, r3, #17
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	4a3b      	ldr	r2, [pc, #236]	@ (80020a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001fc8:	4a38      	ldr	r2, [pc, #224]	@ (80020ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	e004      	b.n	8001fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4a34      	ldr	r2, [pc, #208]	@ (80020b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ff0:	d102      	bne.n	8001ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	61bb      	str	r3, [r7, #24]
      break;
 8001ff6:	e04a      	b.n	800208e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80020b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
      break;
 8002006:	e042      	b.n	800208e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002008:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002018:	d108      	bne.n	800202c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002024:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	e01f      	b.n	800206c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002036:	d109      	bne.n	800204c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002038:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002044:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	e00f      	b.n	800206c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002056:	d11c      	bne.n	8002092 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d016      	beq.n	8002092 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002064:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002068:	61bb      	str	r3, [r7, #24]
      break;
 800206a:	e012      	b.n	8002092 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800206c:	e011      	b.n	8002092 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800206e:	f7ff fe85 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	0b9b      	lsrs	r3, r3, #14
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	3301      	adds	r3, #1
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	61bb      	str	r3, [r7, #24]
      break;
 8002088:	e004      	b.n	8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800208a:	bf00      	nop
 800208c:	e002      	b.n	8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800208e:	bf00      	nop
 8002090:	e000      	b.n	8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002092:	bf00      	nop
    }
  }
  return (frequency);
 8002094:	69bb      	ldr	r3, [r7, #24]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3720      	adds	r7, #32
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08002eac 	.word	0x08002eac
 80020a8:	08002ebc 	.word	0x08002ebc
 80020ac:	007a1200 	.word	0x007a1200
 80020b0:	003d0900 	.word	0x003d0900
 80020b4:	aaaaaaab 	.word	0xaaaaaaab

080020b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e042      	b.n	8002150 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe f9cc 	bl	800047c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2224      	movs	r2, #36	@ 0x24
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f971 	bl	80023e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	@ 0x28
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b20      	cmp	r3, #32
 8002176:	d175      	bne.n	8002264 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_UART_Transmit+0x2c>
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e06e      	b.n	8002266 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2221      	movs	r2, #33	@ 0x21
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002196:	f7fe faa3 	bl	80006e0 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	88fa      	ldrh	r2, [r7, #6]
 80021a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	88fa      	ldrh	r2, [r7, #6]
 80021a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021b0:	d108      	bne.n	80021c4 <HAL_UART_Transmit+0x6c>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d104      	bne.n	80021c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	e003      	b.n	80021cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021cc:	e02e      	b.n	800222c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	@ 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f848 	bl	800226e <UART_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e03a      	b.n	8002266 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10b      	bne.n	800220e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3302      	adds	r3, #2
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e007      	b.n	800221e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3301      	adds	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1cb      	bne.n	80021ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2200      	movs	r2, #0
 800223e:	2140      	movs	r1, #64	@ 0x40
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f814 	bl	800226e <UART_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e006      	b.n	8002266 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	e000      	b.n	8002266 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002264:	2302      	movs	r3, #2
  }
}
 8002266:	4618      	mov	r0, r3
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227e:	e03b      	b.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002286:	d037      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002288:	f7fe fa2a 	bl	80006e0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	429a      	cmp	r2, r3
 8002296:	d302      	bcc.n	800229e <UART_WaitOnFlagUntilTimeout+0x30>
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e03a      	b.n	8002318 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b80      	cmp	r3, #128	@ 0x80
 80022b4:	d020      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b40      	cmp	r3, #64	@ 0x40
 80022ba:	d01d      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d116      	bne.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f81d 	bl	8002320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2208      	movs	r2, #8
 80022ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e00f      	b.n	8002318 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4013      	ands	r3, r2
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	429a      	cmp	r2, r3
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	429a      	cmp	r2, r3
 8002314:	d0b4      	beq.n	8002280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002320:	b480      	push	{r7}
 8002322:	b095      	sub	sp, #84	@ 0x54
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002332:	e853 3f00 	ldrex	r3, [r3]
 8002336:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800233e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002348:	643a      	str	r2, [r7, #64]	@ 0x40
 800234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800234e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002350:	e841 2300 	strex	r3, r2, [r1]
 8002354:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e5      	bne.n	8002328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3314      	adds	r3, #20
 8002362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	e853 3f00 	ldrex	r3, [r3]
 800236a:	61fb      	str	r3, [r7, #28]
   return(result);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3314      	adds	r3, #20
 800237a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800237c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002380:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002384:	e841 2300 	strex	r3, r2, [r1]
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e5      	bne.n	800235c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002394:	2b01      	cmp	r3, #1
 8002396:	d119      	bne.n	80023cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	330c      	adds	r3, #12
 800239e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	e853 3f00 	ldrex	r3, [r3]
 80023a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f023 0310 	bic.w	r3, r3, #16
 80023ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	330c      	adds	r3, #12
 80023b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023b8:	61ba      	str	r2, [r7, #24]
 80023ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023bc:	6979      	ldr	r1, [r7, #20]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	e841 2300 	strex	r3, r2, [r1]
 80023c4:	613b      	str	r3, [r7, #16]
   return(result);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e5      	bne.n	8002398 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023da:	bf00      	nop
 80023dc:	3754      	adds	r7, #84	@ 0x54
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800241e:	f023 030c 	bic.w	r3, r3, #12
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	430b      	orrs	r3, r1
 800242a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2c      	ldr	r2, [pc, #176]	@ (80024f8 <UART_SetConfig+0x114>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d103      	bne.n	8002454 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800244c:	f7ff fc96 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	e002      	b.n	800245a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002454:	f7ff fc7e 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8002458:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009a      	lsls	r2, r3, #2
 8002464:	441a      	add	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	4a22      	ldr	r2, [pc, #136]	@ (80024fc <UART_SetConfig+0x118>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	0119      	lsls	r1, r3, #4
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	009a      	lsls	r2, r3, #2
 8002484:	441a      	add	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002490:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <UART_SetConfig+0x118>)
 8002492:	fba3 0302 	umull	r0, r3, r3, r2
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2064      	movs	r0, #100	@ 0x64
 800249a:	fb00 f303 	mul.w	r3, r0, r3
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	3332      	adds	r3, #50	@ 0x32
 80024a4:	4a15      	ldr	r2, [pc, #84]	@ (80024fc <UART_SetConfig+0x118>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b0:	4419      	add	r1, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009a      	lsls	r2, r3, #2
 80024bc:	441a      	add	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <UART_SetConfig+0x118>)
 80024ca:	fba3 0302 	umull	r0, r3, r3, r2
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2064      	movs	r0, #100	@ 0x64
 80024d2:	fb00 f303 	mul.w	r3, r0, r3
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	3332      	adds	r3, #50	@ 0x32
 80024dc:	4a07      	ldr	r2, [pc, #28]	@ (80024fc <UART_SetConfig+0x118>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	f003 020f 	and.w	r2, r3, #15
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	440a      	add	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40013800 	.word	0x40013800
 80024fc:	51eb851f 	.word	0x51eb851f

08002500 <siprintf>:
 8002500:	b40e      	push	{r1, r2, r3}
 8002502:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002506:	b510      	push	{r4, lr}
 8002508:	2400      	movs	r4, #0
 800250a:	b09d      	sub	sp, #116	@ 0x74
 800250c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800250e:	9002      	str	r0, [sp, #8]
 8002510:	9006      	str	r0, [sp, #24]
 8002512:	9107      	str	r1, [sp, #28]
 8002514:	9104      	str	r1, [sp, #16]
 8002516:	4809      	ldr	r0, [pc, #36]	@ (800253c <siprintf+0x3c>)
 8002518:	4909      	ldr	r1, [pc, #36]	@ (8002540 <siprintf+0x40>)
 800251a:	f853 2b04 	ldr.w	r2, [r3], #4
 800251e:	9105      	str	r1, [sp, #20]
 8002520:	6800      	ldr	r0, [r0, #0]
 8002522:	a902      	add	r1, sp, #8
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002528:	f000 f992 	bl	8002850 <_svfiprintf_r>
 800252c:	9b02      	ldr	r3, [sp, #8]
 800252e:	701c      	strb	r4, [r3, #0]
 8002530:	b01d      	add	sp, #116	@ 0x74
 8002532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002536:	b003      	add	sp, #12
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	2000000c 	.word	0x2000000c
 8002540:	ffff0208 	.word	0xffff0208

08002544 <memset>:
 8002544:	4603      	mov	r3, r0
 8002546:	4402      	add	r2, r0
 8002548:	4293      	cmp	r3, r2
 800254a:	d100      	bne.n	800254e <memset+0xa>
 800254c:	4770      	bx	lr
 800254e:	f803 1b01 	strb.w	r1, [r3], #1
 8002552:	e7f9      	b.n	8002548 <memset+0x4>

08002554 <__errno>:
 8002554:	4b01      	ldr	r3, [pc, #4]	@ (800255c <__errno+0x8>)
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000000c 	.word	0x2000000c

08002560 <__libc_init_array>:
 8002560:	b570      	push	{r4, r5, r6, lr}
 8002562:	2600      	movs	r6, #0
 8002564:	4d0c      	ldr	r5, [pc, #48]	@ (8002598 <__libc_init_array+0x38>)
 8002566:	4c0d      	ldr	r4, [pc, #52]	@ (800259c <__libc_init_array+0x3c>)
 8002568:	1b64      	subs	r4, r4, r5
 800256a:	10a4      	asrs	r4, r4, #2
 800256c:	42a6      	cmp	r6, r4
 800256e:	d109      	bne.n	8002584 <__libc_init_array+0x24>
 8002570:	f000 fc76 	bl	8002e60 <_init>
 8002574:	2600      	movs	r6, #0
 8002576:	4d0a      	ldr	r5, [pc, #40]	@ (80025a0 <__libc_init_array+0x40>)
 8002578:	4c0a      	ldr	r4, [pc, #40]	@ (80025a4 <__libc_init_array+0x44>)
 800257a:	1b64      	subs	r4, r4, r5
 800257c:	10a4      	asrs	r4, r4, #2
 800257e:	42a6      	cmp	r6, r4
 8002580:	d105      	bne.n	800258e <__libc_init_array+0x2e>
 8002582:	bd70      	pop	{r4, r5, r6, pc}
 8002584:	f855 3b04 	ldr.w	r3, [r5], #4
 8002588:	4798      	blx	r3
 800258a:	3601      	adds	r6, #1
 800258c:	e7ee      	b.n	800256c <__libc_init_array+0xc>
 800258e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002592:	4798      	blx	r3
 8002594:	3601      	adds	r6, #1
 8002596:	e7f2      	b.n	800257e <__libc_init_array+0x1e>
 8002598:	08002efc 	.word	0x08002efc
 800259c:	08002efc 	.word	0x08002efc
 80025a0:	08002efc 	.word	0x08002efc
 80025a4:	08002f00 	.word	0x08002f00

080025a8 <__retarget_lock_acquire_recursive>:
 80025a8:	4770      	bx	lr

080025aa <__retarget_lock_release_recursive>:
 80025aa:	4770      	bx	lr

080025ac <_free_r>:
 80025ac:	b538      	push	{r3, r4, r5, lr}
 80025ae:	4605      	mov	r5, r0
 80025b0:	2900      	cmp	r1, #0
 80025b2:	d040      	beq.n	8002636 <_free_r+0x8a>
 80025b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025b8:	1f0c      	subs	r4, r1, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bfb8      	it	lt
 80025be:	18e4      	addlt	r4, r4, r3
 80025c0:	f000 f8de 	bl	8002780 <__malloc_lock>
 80025c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002638 <_free_r+0x8c>)
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	b933      	cbnz	r3, 80025d8 <_free_r+0x2c>
 80025ca:	6063      	str	r3, [r4, #4]
 80025cc:	6014      	str	r4, [r2, #0]
 80025ce:	4628      	mov	r0, r5
 80025d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025d4:	f000 b8da 	b.w	800278c <__malloc_unlock>
 80025d8:	42a3      	cmp	r3, r4
 80025da:	d908      	bls.n	80025ee <_free_r+0x42>
 80025dc:	6820      	ldr	r0, [r4, #0]
 80025de:	1821      	adds	r1, r4, r0
 80025e0:	428b      	cmp	r3, r1
 80025e2:	bf01      	itttt	eq
 80025e4:	6819      	ldreq	r1, [r3, #0]
 80025e6:	685b      	ldreq	r3, [r3, #4]
 80025e8:	1809      	addeq	r1, r1, r0
 80025ea:	6021      	streq	r1, [r4, #0]
 80025ec:	e7ed      	b.n	80025ca <_free_r+0x1e>
 80025ee:	461a      	mov	r2, r3
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	b10b      	cbz	r3, 80025f8 <_free_r+0x4c>
 80025f4:	42a3      	cmp	r3, r4
 80025f6:	d9fa      	bls.n	80025ee <_free_r+0x42>
 80025f8:	6811      	ldr	r1, [r2, #0]
 80025fa:	1850      	adds	r0, r2, r1
 80025fc:	42a0      	cmp	r0, r4
 80025fe:	d10b      	bne.n	8002618 <_free_r+0x6c>
 8002600:	6820      	ldr	r0, [r4, #0]
 8002602:	4401      	add	r1, r0
 8002604:	1850      	adds	r0, r2, r1
 8002606:	4283      	cmp	r3, r0
 8002608:	6011      	str	r1, [r2, #0]
 800260a:	d1e0      	bne.n	80025ce <_free_r+0x22>
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4408      	add	r0, r1
 8002612:	6010      	str	r0, [r2, #0]
 8002614:	6053      	str	r3, [r2, #4]
 8002616:	e7da      	b.n	80025ce <_free_r+0x22>
 8002618:	d902      	bls.n	8002620 <_free_r+0x74>
 800261a:	230c      	movs	r3, #12
 800261c:	602b      	str	r3, [r5, #0]
 800261e:	e7d6      	b.n	80025ce <_free_r+0x22>
 8002620:	6820      	ldr	r0, [r4, #0]
 8002622:	1821      	adds	r1, r4, r0
 8002624:	428b      	cmp	r3, r1
 8002626:	bf01      	itttt	eq
 8002628:	6819      	ldreq	r1, [r3, #0]
 800262a:	685b      	ldreq	r3, [r3, #4]
 800262c:	1809      	addeq	r1, r1, r0
 800262e:	6021      	streq	r1, [r4, #0]
 8002630:	6063      	str	r3, [r4, #4]
 8002632:	6054      	str	r4, [r2, #4]
 8002634:	e7cb      	b.n	80025ce <_free_r+0x22>
 8002636:	bd38      	pop	{r3, r4, r5, pc}
 8002638:	20000254 	.word	0x20000254

0800263c <sbrk_aligned>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	4e0f      	ldr	r6, [pc, #60]	@ (800267c <sbrk_aligned+0x40>)
 8002640:	460c      	mov	r4, r1
 8002642:	6831      	ldr	r1, [r6, #0]
 8002644:	4605      	mov	r5, r0
 8002646:	b911      	cbnz	r1, 800264e <sbrk_aligned+0x12>
 8002648:	f000 fba8 	bl	8002d9c <_sbrk_r>
 800264c:	6030      	str	r0, [r6, #0]
 800264e:	4621      	mov	r1, r4
 8002650:	4628      	mov	r0, r5
 8002652:	f000 fba3 	bl	8002d9c <_sbrk_r>
 8002656:	1c43      	adds	r3, r0, #1
 8002658:	d103      	bne.n	8002662 <sbrk_aligned+0x26>
 800265a:	f04f 34ff 	mov.w	r4, #4294967295
 800265e:	4620      	mov	r0, r4
 8002660:	bd70      	pop	{r4, r5, r6, pc}
 8002662:	1cc4      	adds	r4, r0, #3
 8002664:	f024 0403 	bic.w	r4, r4, #3
 8002668:	42a0      	cmp	r0, r4
 800266a:	d0f8      	beq.n	800265e <sbrk_aligned+0x22>
 800266c:	1a21      	subs	r1, r4, r0
 800266e:	4628      	mov	r0, r5
 8002670:	f000 fb94 	bl	8002d9c <_sbrk_r>
 8002674:	3001      	adds	r0, #1
 8002676:	d1f2      	bne.n	800265e <sbrk_aligned+0x22>
 8002678:	e7ef      	b.n	800265a <sbrk_aligned+0x1e>
 800267a:	bf00      	nop
 800267c:	20000250 	.word	0x20000250

08002680 <_malloc_r>:
 8002680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002684:	1ccd      	adds	r5, r1, #3
 8002686:	f025 0503 	bic.w	r5, r5, #3
 800268a:	3508      	adds	r5, #8
 800268c:	2d0c      	cmp	r5, #12
 800268e:	bf38      	it	cc
 8002690:	250c      	movcc	r5, #12
 8002692:	2d00      	cmp	r5, #0
 8002694:	4606      	mov	r6, r0
 8002696:	db01      	blt.n	800269c <_malloc_r+0x1c>
 8002698:	42a9      	cmp	r1, r5
 800269a:	d904      	bls.n	80026a6 <_malloc_r+0x26>
 800269c:	230c      	movs	r3, #12
 800269e:	6033      	str	r3, [r6, #0]
 80026a0:	2000      	movs	r0, #0
 80026a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800277c <_malloc_r+0xfc>
 80026aa:	f000 f869 	bl	8002780 <__malloc_lock>
 80026ae:	f8d8 3000 	ldr.w	r3, [r8]
 80026b2:	461c      	mov	r4, r3
 80026b4:	bb44      	cbnz	r4, 8002708 <_malloc_r+0x88>
 80026b6:	4629      	mov	r1, r5
 80026b8:	4630      	mov	r0, r6
 80026ba:	f7ff ffbf 	bl	800263c <sbrk_aligned>
 80026be:	1c43      	adds	r3, r0, #1
 80026c0:	4604      	mov	r4, r0
 80026c2:	d158      	bne.n	8002776 <_malloc_r+0xf6>
 80026c4:	f8d8 4000 	ldr.w	r4, [r8]
 80026c8:	4627      	mov	r7, r4
 80026ca:	2f00      	cmp	r7, #0
 80026cc:	d143      	bne.n	8002756 <_malloc_r+0xd6>
 80026ce:	2c00      	cmp	r4, #0
 80026d0:	d04b      	beq.n	800276a <_malloc_r+0xea>
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	4639      	mov	r1, r7
 80026d6:	4630      	mov	r0, r6
 80026d8:	eb04 0903 	add.w	r9, r4, r3
 80026dc:	f000 fb5e 	bl	8002d9c <_sbrk_r>
 80026e0:	4581      	cmp	r9, r0
 80026e2:	d142      	bne.n	800276a <_malloc_r+0xea>
 80026e4:	6821      	ldr	r1, [r4, #0]
 80026e6:	4630      	mov	r0, r6
 80026e8:	1a6d      	subs	r5, r5, r1
 80026ea:	4629      	mov	r1, r5
 80026ec:	f7ff ffa6 	bl	800263c <sbrk_aligned>
 80026f0:	3001      	adds	r0, #1
 80026f2:	d03a      	beq.n	800276a <_malloc_r+0xea>
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	442b      	add	r3, r5
 80026f8:	6023      	str	r3, [r4, #0]
 80026fa:	f8d8 3000 	ldr.w	r3, [r8]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	bb62      	cbnz	r2, 800275c <_malloc_r+0xdc>
 8002702:	f8c8 7000 	str.w	r7, [r8]
 8002706:	e00f      	b.n	8002728 <_malloc_r+0xa8>
 8002708:	6822      	ldr	r2, [r4, #0]
 800270a:	1b52      	subs	r2, r2, r5
 800270c:	d420      	bmi.n	8002750 <_malloc_r+0xd0>
 800270e:	2a0b      	cmp	r2, #11
 8002710:	d917      	bls.n	8002742 <_malloc_r+0xc2>
 8002712:	1961      	adds	r1, r4, r5
 8002714:	42a3      	cmp	r3, r4
 8002716:	6025      	str	r5, [r4, #0]
 8002718:	bf18      	it	ne
 800271a:	6059      	strne	r1, [r3, #4]
 800271c:	6863      	ldr	r3, [r4, #4]
 800271e:	bf08      	it	eq
 8002720:	f8c8 1000 	streq.w	r1, [r8]
 8002724:	5162      	str	r2, [r4, r5]
 8002726:	604b      	str	r3, [r1, #4]
 8002728:	4630      	mov	r0, r6
 800272a:	f000 f82f 	bl	800278c <__malloc_unlock>
 800272e:	f104 000b 	add.w	r0, r4, #11
 8002732:	1d23      	adds	r3, r4, #4
 8002734:	f020 0007 	bic.w	r0, r0, #7
 8002738:	1ac2      	subs	r2, r0, r3
 800273a:	bf1c      	itt	ne
 800273c:	1a1b      	subne	r3, r3, r0
 800273e:	50a3      	strne	r3, [r4, r2]
 8002740:	e7af      	b.n	80026a2 <_malloc_r+0x22>
 8002742:	6862      	ldr	r2, [r4, #4]
 8002744:	42a3      	cmp	r3, r4
 8002746:	bf0c      	ite	eq
 8002748:	f8c8 2000 	streq.w	r2, [r8]
 800274c:	605a      	strne	r2, [r3, #4]
 800274e:	e7eb      	b.n	8002728 <_malloc_r+0xa8>
 8002750:	4623      	mov	r3, r4
 8002752:	6864      	ldr	r4, [r4, #4]
 8002754:	e7ae      	b.n	80026b4 <_malloc_r+0x34>
 8002756:	463c      	mov	r4, r7
 8002758:	687f      	ldr	r7, [r7, #4]
 800275a:	e7b6      	b.n	80026ca <_malloc_r+0x4a>
 800275c:	461a      	mov	r2, r3
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	42a3      	cmp	r3, r4
 8002762:	d1fb      	bne.n	800275c <_malloc_r+0xdc>
 8002764:	2300      	movs	r3, #0
 8002766:	6053      	str	r3, [r2, #4]
 8002768:	e7de      	b.n	8002728 <_malloc_r+0xa8>
 800276a:	230c      	movs	r3, #12
 800276c:	4630      	mov	r0, r6
 800276e:	6033      	str	r3, [r6, #0]
 8002770:	f000 f80c 	bl	800278c <__malloc_unlock>
 8002774:	e794      	b.n	80026a0 <_malloc_r+0x20>
 8002776:	6005      	str	r5, [r0, #0]
 8002778:	e7d6      	b.n	8002728 <_malloc_r+0xa8>
 800277a:	bf00      	nop
 800277c:	20000254 	.word	0x20000254

08002780 <__malloc_lock>:
 8002780:	4801      	ldr	r0, [pc, #4]	@ (8002788 <__malloc_lock+0x8>)
 8002782:	f7ff bf11 	b.w	80025a8 <__retarget_lock_acquire_recursive>
 8002786:	bf00      	nop
 8002788:	2000024c 	.word	0x2000024c

0800278c <__malloc_unlock>:
 800278c:	4801      	ldr	r0, [pc, #4]	@ (8002794 <__malloc_unlock+0x8>)
 800278e:	f7ff bf0c 	b.w	80025aa <__retarget_lock_release_recursive>
 8002792:	bf00      	nop
 8002794:	2000024c 	.word	0x2000024c

08002798 <__ssputs_r>:
 8002798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800279c:	461f      	mov	r7, r3
 800279e:	688e      	ldr	r6, [r1, #8]
 80027a0:	4682      	mov	sl, r0
 80027a2:	42be      	cmp	r6, r7
 80027a4:	460c      	mov	r4, r1
 80027a6:	4690      	mov	r8, r2
 80027a8:	680b      	ldr	r3, [r1, #0]
 80027aa:	d82d      	bhi.n	8002808 <__ssputs_r+0x70>
 80027ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80027b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80027b4:	d026      	beq.n	8002804 <__ssputs_r+0x6c>
 80027b6:	6965      	ldr	r5, [r4, #20]
 80027b8:	6909      	ldr	r1, [r1, #16]
 80027ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027be:	eba3 0901 	sub.w	r9, r3, r1
 80027c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027c6:	1c7b      	adds	r3, r7, #1
 80027c8:	444b      	add	r3, r9
 80027ca:	106d      	asrs	r5, r5, #1
 80027cc:	429d      	cmp	r5, r3
 80027ce:	bf38      	it	cc
 80027d0:	461d      	movcc	r5, r3
 80027d2:	0553      	lsls	r3, r2, #21
 80027d4:	d527      	bpl.n	8002826 <__ssputs_r+0x8e>
 80027d6:	4629      	mov	r1, r5
 80027d8:	f7ff ff52 	bl	8002680 <_malloc_r>
 80027dc:	4606      	mov	r6, r0
 80027de:	b360      	cbz	r0, 800283a <__ssputs_r+0xa2>
 80027e0:	464a      	mov	r2, r9
 80027e2:	6921      	ldr	r1, [r4, #16]
 80027e4:	f000 faf8 	bl	8002dd8 <memcpy>
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80027ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f2:	81a3      	strh	r3, [r4, #12]
 80027f4:	6126      	str	r6, [r4, #16]
 80027f6:	444e      	add	r6, r9
 80027f8:	6026      	str	r6, [r4, #0]
 80027fa:	463e      	mov	r6, r7
 80027fc:	6165      	str	r5, [r4, #20]
 80027fe:	eba5 0509 	sub.w	r5, r5, r9
 8002802:	60a5      	str	r5, [r4, #8]
 8002804:	42be      	cmp	r6, r7
 8002806:	d900      	bls.n	800280a <__ssputs_r+0x72>
 8002808:	463e      	mov	r6, r7
 800280a:	4632      	mov	r2, r6
 800280c:	4641      	mov	r1, r8
 800280e:	6820      	ldr	r0, [r4, #0]
 8002810:	f000 faaa 	bl	8002d68 <memmove>
 8002814:	2000      	movs	r0, #0
 8002816:	68a3      	ldr	r3, [r4, #8]
 8002818:	1b9b      	subs	r3, r3, r6
 800281a:	60a3      	str	r3, [r4, #8]
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	4433      	add	r3, r6
 8002820:	6023      	str	r3, [r4, #0]
 8002822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002826:	462a      	mov	r2, r5
 8002828:	f000 fae4 	bl	8002df4 <_realloc_r>
 800282c:	4606      	mov	r6, r0
 800282e:	2800      	cmp	r0, #0
 8002830:	d1e0      	bne.n	80027f4 <__ssputs_r+0x5c>
 8002832:	4650      	mov	r0, sl
 8002834:	6921      	ldr	r1, [r4, #16]
 8002836:	f7ff feb9 	bl	80025ac <_free_r>
 800283a:	230c      	movs	r3, #12
 800283c:	f8ca 3000 	str.w	r3, [sl]
 8002840:	89a3      	ldrh	r3, [r4, #12]
 8002842:	f04f 30ff 	mov.w	r0, #4294967295
 8002846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800284a:	81a3      	strh	r3, [r4, #12]
 800284c:	e7e9      	b.n	8002822 <__ssputs_r+0x8a>
	...

08002850 <_svfiprintf_r>:
 8002850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002854:	4698      	mov	r8, r3
 8002856:	898b      	ldrh	r3, [r1, #12]
 8002858:	4607      	mov	r7, r0
 800285a:	061b      	lsls	r3, r3, #24
 800285c:	460d      	mov	r5, r1
 800285e:	4614      	mov	r4, r2
 8002860:	b09d      	sub	sp, #116	@ 0x74
 8002862:	d510      	bpl.n	8002886 <_svfiprintf_r+0x36>
 8002864:	690b      	ldr	r3, [r1, #16]
 8002866:	b973      	cbnz	r3, 8002886 <_svfiprintf_r+0x36>
 8002868:	2140      	movs	r1, #64	@ 0x40
 800286a:	f7ff ff09 	bl	8002680 <_malloc_r>
 800286e:	6028      	str	r0, [r5, #0]
 8002870:	6128      	str	r0, [r5, #16]
 8002872:	b930      	cbnz	r0, 8002882 <_svfiprintf_r+0x32>
 8002874:	230c      	movs	r3, #12
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	b01d      	add	sp, #116	@ 0x74
 800287e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002882:	2340      	movs	r3, #64	@ 0x40
 8002884:	616b      	str	r3, [r5, #20]
 8002886:	2300      	movs	r3, #0
 8002888:	9309      	str	r3, [sp, #36]	@ 0x24
 800288a:	2320      	movs	r3, #32
 800288c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002890:	2330      	movs	r3, #48	@ 0x30
 8002892:	f04f 0901 	mov.w	r9, #1
 8002896:	f8cd 800c 	str.w	r8, [sp, #12]
 800289a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002a34 <_svfiprintf_r+0x1e4>
 800289e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80028a2:	4623      	mov	r3, r4
 80028a4:	469a      	mov	sl, r3
 80028a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028aa:	b10a      	cbz	r2, 80028b0 <_svfiprintf_r+0x60>
 80028ac:	2a25      	cmp	r2, #37	@ 0x25
 80028ae:	d1f9      	bne.n	80028a4 <_svfiprintf_r+0x54>
 80028b0:	ebba 0b04 	subs.w	fp, sl, r4
 80028b4:	d00b      	beq.n	80028ce <_svfiprintf_r+0x7e>
 80028b6:	465b      	mov	r3, fp
 80028b8:	4622      	mov	r2, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	4638      	mov	r0, r7
 80028be:	f7ff ff6b 	bl	8002798 <__ssputs_r>
 80028c2:	3001      	adds	r0, #1
 80028c4:	f000 80a7 	beq.w	8002a16 <_svfiprintf_r+0x1c6>
 80028c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80028ca:	445a      	add	r2, fp
 80028cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80028ce:	f89a 3000 	ldrb.w	r3, [sl]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 809f 	beq.w	8002a16 <_svfiprintf_r+0x1c6>
 80028d8:	2300      	movs	r3, #0
 80028da:	f04f 32ff 	mov.w	r2, #4294967295
 80028de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028e2:	f10a 0a01 	add.w	sl, sl, #1
 80028e6:	9304      	str	r3, [sp, #16]
 80028e8:	9307      	str	r3, [sp, #28]
 80028ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80028ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80028f0:	4654      	mov	r4, sl
 80028f2:	2205      	movs	r2, #5
 80028f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f8:	484e      	ldr	r0, [pc, #312]	@ (8002a34 <_svfiprintf_r+0x1e4>)
 80028fa:	f000 fa5f 	bl	8002dbc <memchr>
 80028fe:	9a04      	ldr	r2, [sp, #16]
 8002900:	b9d8      	cbnz	r0, 800293a <_svfiprintf_r+0xea>
 8002902:	06d0      	lsls	r0, r2, #27
 8002904:	bf44      	itt	mi
 8002906:	2320      	movmi	r3, #32
 8002908:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800290c:	0711      	lsls	r1, r2, #28
 800290e:	bf44      	itt	mi
 8002910:	232b      	movmi	r3, #43	@ 0x2b
 8002912:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002916:	f89a 3000 	ldrb.w	r3, [sl]
 800291a:	2b2a      	cmp	r3, #42	@ 0x2a
 800291c:	d015      	beq.n	800294a <_svfiprintf_r+0xfa>
 800291e:	4654      	mov	r4, sl
 8002920:	2000      	movs	r0, #0
 8002922:	f04f 0c0a 	mov.w	ip, #10
 8002926:	9a07      	ldr	r2, [sp, #28]
 8002928:	4621      	mov	r1, r4
 800292a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800292e:	3b30      	subs	r3, #48	@ 0x30
 8002930:	2b09      	cmp	r3, #9
 8002932:	d94b      	bls.n	80029cc <_svfiprintf_r+0x17c>
 8002934:	b1b0      	cbz	r0, 8002964 <_svfiprintf_r+0x114>
 8002936:	9207      	str	r2, [sp, #28]
 8002938:	e014      	b.n	8002964 <_svfiprintf_r+0x114>
 800293a:	eba0 0308 	sub.w	r3, r0, r8
 800293e:	fa09 f303 	lsl.w	r3, r9, r3
 8002942:	4313      	orrs	r3, r2
 8002944:	46a2      	mov	sl, r4
 8002946:	9304      	str	r3, [sp, #16]
 8002948:	e7d2      	b.n	80028f0 <_svfiprintf_r+0xa0>
 800294a:	9b03      	ldr	r3, [sp, #12]
 800294c:	1d19      	adds	r1, r3, #4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	9103      	str	r1, [sp, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	bfbb      	ittet	lt
 8002956:	425b      	neglt	r3, r3
 8002958:	f042 0202 	orrlt.w	r2, r2, #2
 800295c:	9307      	strge	r3, [sp, #28]
 800295e:	9307      	strlt	r3, [sp, #28]
 8002960:	bfb8      	it	lt
 8002962:	9204      	strlt	r2, [sp, #16]
 8002964:	7823      	ldrb	r3, [r4, #0]
 8002966:	2b2e      	cmp	r3, #46	@ 0x2e
 8002968:	d10a      	bne.n	8002980 <_svfiprintf_r+0x130>
 800296a:	7863      	ldrb	r3, [r4, #1]
 800296c:	2b2a      	cmp	r3, #42	@ 0x2a
 800296e:	d132      	bne.n	80029d6 <_svfiprintf_r+0x186>
 8002970:	9b03      	ldr	r3, [sp, #12]
 8002972:	3402      	adds	r4, #2
 8002974:	1d1a      	adds	r2, r3, #4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	9203      	str	r2, [sp, #12]
 800297a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800297e:	9305      	str	r3, [sp, #20]
 8002980:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002a38 <_svfiprintf_r+0x1e8>
 8002984:	2203      	movs	r2, #3
 8002986:	4650      	mov	r0, sl
 8002988:	7821      	ldrb	r1, [r4, #0]
 800298a:	f000 fa17 	bl	8002dbc <memchr>
 800298e:	b138      	cbz	r0, 80029a0 <_svfiprintf_r+0x150>
 8002990:	2240      	movs	r2, #64	@ 0x40
 8002992:	9b04      	ldr	r3, [sp, #16]
 8002994:	eba0 000a 	sub.w	r0, r0, sl
 8002998:	4082      	lsls	r2, r0
 800299a:	4313      	orrs	r3, r2
 800299c:	3401      	adds	r4, #1
 800299e:	9304      	str	r3, [sp, #16]
 80029a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029a4:	2206      	movs	r2, #6
 80029a6:	4825      	ldr	r0, [pc, #148]	@ (8002a3c <_svfiprintf_r+0x1ec>)
 80029a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80029ac:	f000 fa06 	bl	8002dbc <memchr>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d036      	beq.n	8002a22 <_svfiprintf_r+0x1d2>
 80029b4:	4b22      	ldr	r3, [pc, #136]	@ (8002a40 <_svfiprintf_r+0x1f0>)
 80029b6:	bb1b      	cbnz	r3, 8002a00 <_svfiprintf_r+0x1b0>
 80029b8:	9b03      	ldr	r3, [sp, #12]
 80029ba:	3307      	adds	r3, #7
 80029bc:	f023 0307 	bic.w	r3, r3, #7
 80029c0:	3308      	adds	r3, #8
 80029c2:	9303      	str	r3, [sp, #12]
 80029c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029c6:	4433      	add	r3, r6
 80029c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80029ca:	e76a      	b.n	80028a2 <_svfiprintf_r+0x52>
 80029cc:	460c      	mov	r4, r1
 80029ce:	2001      	movs	r0, #1
 80029d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80029d4:	e7a8      	b.n	8002928 <_svfiprintf_r+0xd8>
 80029d6:	2300      	movs	r3, #0
 80029d8:	f04f 0c0a 	mov.w	ip, #10
 80029dc:	4619      	mov	r1, r3
 80029de:	3401      	adds	r4, #1
 80029e0:	9305      	str	r3, [sp, #20]
 80029e2:	4620      	mov	r0, r4
 80029e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029e8:	3a30      	subs	r2, #48	@ 0x30
 80029ea:	2a09      	cmp	r2, #9
 80029ec:	d903      	bls.n	80029f6 <_svfiprintf_r+0x1a6>
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0c6      	beq.n	8002980 <_svfiprintf_r+0x130>
 80029f2:	9105      	str	r1, [sp, #20]
 80029f4:	e7c4      	b.n	8002980 <_svfiprintf_r+0x130>
 80029f6:	4604      	mov	r4, r0
 80029f8:	2301      	movs	r3, #1
 80029fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80029fe:	e7f0      	b.n	80029e2 <_svfiprintf_r+0x192>
 8002a00:	ab03      	add	r3, sp, #12
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	462a      	mov	r2, r5
 8002a06:	4638      	mov	r0, r7
 8002a08:	4b0e      	ldr	r3, [pc, #56]	@ (8002a44 <_svfiprintf_r+0x1f4>)
 8002a0a:	a904      	add	r1, sp, #16
 8002a0c:	f3af 8000 	nop.w
 8002a10:	1c42      	adds	r2, r0, #1
 8002a12:	4606      	mov	r6, r0
 8002a14:	d1d6      	bne.n	80029c4 <_svfiprintf_r+0x174>
 8002a16:	89ab      	ldrh	r3, [r5, #12]
 8002a18:	065b      	lsls	r3, r3, #25
 8002a1a:	f53f af2d 	bmi.w	8002878 <_svfiprintf_r+0x28>
 8002a1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a20:	e72c      	b.n	800287c <_svfiprintf_r+0x2c>
 8002a22:	ab03      	add	r3, sp, #12
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	462a      	mov	r2, r5
 8002a28:	4638      	mov	r0, r7
 8002a2a:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <_svfiprintf_r+0x1f4>)
 8002a2c:	a904      	add	r1, sp, #16
 8002a2e:	f000 f87d 	bl	8002b2c <_printf_i>
 8002a32:	e7ed      	b.n	8002a10 <_svfiprintf_r+0x1c0>
 8002a34:	08002ebe 	.word	0x08002ebe
 8002a38:	08002ec4 	.word	0x08002ec4
 8002a3c:	08002ec8 	.word	0x08002ec8
 8002a40:	00000000 	.word	0x00000000
 8002a44:	08002799 	.word	0x08002799

08002a48 <_printf_common>:
 8002a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a4c:	4616      	mov	r6, r2
 8002a4e:	4698      	mov	r8, r3
 8002a50:	688a      	ldr	r2, [r1, #8]
 8002a52:	690b      	ldr	r3, [r1, #16]
 8002a54:	4607      	mov	r7, r0
 8002a56:	4293      	cmp	r3, r2
 8002a58:	bfb8      	it	lt
 8002a5a:	4613      	movlt	r3, r2
 8002a5c:	6033      	str	r3, [r6, #0]
 8002a5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a62:	460c      	mov	r4, r1
 8002a64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a68:	b10a      	cbz	r2, 8002a6e <_printf_common+0x26>
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	6033      	str	r3, [r6, #0]
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	0699      	lsls	r1, r3, #26
 8002a72:	bf42      	ittt	mi
 8002a74:	6833      	ldrmi	r3, [r6, #0]
 8002a76:	3302      	addmi	r3, #2
 8002a78:	6033      	strmi	r3, [r6, #0]
 8002a7a:	6825      	ldr	r5, [r4, #0]
 8002a7c:	f015 0506 	ands.w	r5, r5, #6
 8002a80:	d106      	bne.n	8002a90 <_printf_common+0x48>
 8002a82:	f104 0a19 	add.w	sl, r4, #25
 8002a86:	68e3      	ldr	r3, [r4, #12]
 8002a88:	6832      	ldr	r2, [r6, #0]
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	42ab      	cmp	r3, r5
 8002a8e:	dc2b      	bgt.n	8002ae8 <_printf_common+0xa0>
 8002a90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a94:	6822      	ldr	r2, [r4, #0]
 8002a96:	3b00      	subs	r3, #0
 8002a98:	bf18      	it	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	0692      	lsls	r2, r2, #26
 8002a9e:	d430      	bmi.n	8002b02 <_printf_common+0xba>
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	4638      	mov	r0, r7
 8002aa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002aa8:	47c8      	blx	r9
 8002aaa:	3001      	adds	r0, #1
 8002aac:	d023      	beq.n	8002af6 <_printf_common+0xae>
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	6922      	ldr	r2, [r4, #16]
 8002ab2:	f003 0306 	and.w	r3, r3, #6
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	bf14      	ite	ne
 8002aba:	2500      	movne	r5, #0
 8002abc:	6833      	ldreq	r3, [r6, #0]
 8002abe:	f04f 0600 	mov.w	r6, #0
 8002ac2:	bf08      	it	eq
 8002ac4:	68e5      	ldreq	r5, [r4, #12]
 8002ac6:	f104 041a 	add.w	r4, r4, #26
 8002aca:	bf08      	it	eq
 8002acc:	1aed      	subeq	r5, r5, r3
 8002ace:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002ad2:	bf08      	it	eq
 8002ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	bfc4      	itt	gt
 8002adc:	1a9b      	subgt	r3, r3, r2
 8002ade:	18ed      	addgt	r5, r5, r3
 8002ae0:	42b5      	cmp	r5, r6
 8002ae2:	d11a      	bne.n	8002b1a <_printf_common+0xd2>
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	e008      	b.n	8002afa <_printf_common+0xb2>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	4652      	mov	r2, sl
 8002aec:	4641      	mov	r1, r8
 8002aee:	4638      	mov	r0, r7
 8002af0:	47c8      	blx	r9
 8002af2:	3001      	adds	r0, #1
 8002af4:	d103      	bne.n	8002afe <_printf_common+0xb6>
 8002af6:	f04f 30ff 	mov.w	r0, #4294967295
 8002afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002afe:	3501      	adds	r5, #1
 8002b00:	e7c1      	b.n	8002a86 <_printf_common+0x3e>
 8002b02:	2030      	movs	r0, #48	@ 0x30
 8002b04:	18e1      	adds	r1, r4, r3
 8002b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b10:	4422      	add	r2, r4
 8002b12:	3302      	adds	r3, #2
 8002b14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b18:	e7c2      	b.n	8002aa0 <_printf_common+0x58>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	4641      	mov	r1, r8
 8002b20:	4638      	mov	r0, r7
 8002b22:	47c8      	blx	r9
 8002b24:	3001      	adds	r0, #1
 8002b26:	d0e6      	beq.n	8002af6 <_printf_common+0xae>
 8002b28:	3601      	adds	r6, #1
 8002b2a:	e7d9      	b.n	8002ae0 <_printf_common+0x98>

08002b2c <_printf_i>:
 8002b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b30:	7e0f      	ldrb	r7, [r1, #24]
 8002b32:	4691      	mov	r9, r2
 8002b34:	2f78      	cmp	r7, #120	@ 0x78
 8002b36:	4680      	mov	r8, r0
 8002b38:	460c      	mov	r4, r1
 8002b3a:	469a      	mov	sl, r3
 8002b3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b42:	d807      	bhi.n	8002b54 <_printf_i+0x28>
 8002b44:	2f62      	cmp	r7, #98	@ 0x62
 8002b46:	d80a      	bhi.n	8002b5e <_printf_i+0x32>
 8002b48:	2f00      	cmp	r7, #0
 8002b4a:	f000 80d1 	beq.w	8002cf0 <_printf_i+0x1c4>
 8002b4e:	2f58      	cmp	r7, #88	@ 0x58
 8002b50:	f000 80b8 	beq.w	8002cc4 <_printf_i+0x198>
 8002b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b5c:	e03a      	b.n	8002bd4 <_printf_i+0xa8>
 8002b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b62:	2b15      	cmp	r3, #21
 8002b64:	d8f6      	bhi.n	8002b54 <_printf_i+0x28>
 8002b66:	a101      	add	r1, pc, #4	@ (adr r1, 8002b6c <_printf_i+0x40>)
 8002b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b6c:	08002bc5 	.word	0x08002bc5
 8002b70:	08002bd9 	.word	0x08002bd9
 8002b74:	08002b55 	.word	0x08002b55
 8002b78:	08002b55 	.word	0x08002b55
 8002b7c:	08002b55 	.word	0x08002b55
 8002b80:	08002b55 	.word	0x08002b55
 8002b84:	08002bd9 	.word	0x08002bd9
 8002b88:	08002b55 	.word	0x08002b55
 8002b8c:	08002b55 	.word	0x08002b55
 8002b90:	08002b55 	.word	0x08002b55
 8002b94:	08002b55 	.word	0x08002b55
 8002b98:	08002cd7 	.word	0x08002cd7
 8002b9c:	08002c03 	.word	0x08002c03
 8002ba0:	08002c91 	.word	0x08002c91
 8002ba4:	08002b55 	.word	0x08002b55
 8002ba8:	08002b55 	.word	0x08002b55
 8002bac:	08002cf9 	.word	0x08002cf9
 8002bb0:	08002b55 	.word	0x08002b55
 8002bb4:	08002c03 	.word	0x08002c03
 8002bb8:	08002b55 	.word	0x08002b55
 8002bbc:	08002b55 	.word	0x08002b55
 8002bc0:	08002c99 	.word	0x08002c99
 8002bc4:	6833      	ldr	r3, [r6, #0]
 8002bc6:	1d1a      	adds	r2, r3, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6032      	str	r2, [r6, #0]
 8002bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e09c      	b.n	8002d12 <_printf_i+0x1e6>
 8002bd8:	6833      	ldr	r3, [r6, #0]
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	1d19      	adds	r1, r3, #4
 8002bde:	6031      	str	r1, [r6, #0]
 8002be0:	0606      	lsls	r6, r0, #24
 8002be2:	d501      	bpl.n	8002be8 <_printf_i+0xbc>
 8002be4:	681d      	ldr	r5, [r3, #0]
 8002be6:	e003      	b.n	8002bf0 <_printf_i+0xc4>
 8002be8:	0645      	lsls	r5, r0, #25
 8002bea:	d5fb      	bpl.n	8002be4 <_printf_i+0xb8>
 8002bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	da03      	bge.n	8002bfc <_printf_i+0xd0>
 8002bf4:	232d      	movs	r3, #45	@ 0x2d
 8002bf6:	426d      	negs	r5, r5
 8002bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bfc:	230a      	movs	r3, #10
 8002bfe:	4858      	ldr	r0, [pc, #352]	@ (8002d60 <_printf_i+0x234>)
 8002c00:	e011      	b.n	8002c26 <_printf_i+0xfa>
 8002c02:	6821      	ldr	r1, [r4, #0]
 8002c04:	6833      	ldr	r3, [r6, #0]
 8002c06:	0608      	lsls	r0, r1, #24
 8002c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c0c:	d402      	bmi.n	8002c14 <_printf_i+0xe8>
 8002c0e:	0649      	lsls	r1, r1, #25
 8002c10:	bf48      	it	mi
 8002c12:	b2ad      	uxthmi	r5, r5
 8002c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c16:	6033      	str	r3, [r6, #0]
 8002c18:	bf14      	ite	ne
 8002c1a:	230a      	movne	r3, #10
 8002c1c:	2308      	moveq	r3, #8
 8002c1e:	4850      	ldr	r0, [pc, #320]	@ (8002d60 <_printf_i+0x234>)
 8002c20:	2100      	movs	r1, #0
 8002c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c26:	6866      	ldr	r6, [r4, #4]
 8002c28:	2e00      	cmp	r6, #0
 8002c2a:	60a6      	str	r6, [r4, #8]
 8002c2c:	db05      	blt.n	8002c3a <_printf_i+0x10e>
 8002c2e:	6821      	ldr	r1, [r4, #0]
 8002c30:	432e      	orrs	r6, r5
 8002c32:	f021 0104 	bic.w	r1, r1, #4
 8002c36:	6021      	str	r1, [r4, #0]
 8002c38:	d04b      	beq.n	8002cd2 <_printf_i+0x1a6>
 8002c3a:	4616      	mov	r6, r2
 8002c3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c40:	fb03 5711 	mls	r7, r3, r1, r5
 8002c44:	5dc7      	ldrb	r7, [r0, r7]
 8002c46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c4a:	462f      	mov	r7, r5
 8002c4c:	42bb      	cmp	r3, r7
 8002c4e:	460d      	mov	r5, r1
 8002c50:	d9f4      	bls.n	8002c3c <_printf_i+0x110>
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d10b      	bne.n	8002c6e <_printf_i+0x142>
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	07df      	lsls	r7, r3, #31
 8002c5a:	d508      	bpl.n	8002c6e <_printf_i+0x142>
 8002c5c:	6923      	ldr	r3, [r4, #16]
 8002c5e:	6861      	ldr	r1, [r4, #4]
 8002c60:	4299      	cmp	r1, r3
 8002c62:	bfde      	ittt	le
 8002c64:	2330      	movle	r3, #48	@ 0x30
 8002c66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c6e:	1b92      	subs	r2, r2, r6
 8002c70:	6122      	str	r2, [r4, #16]
 8002c72:	464b      	mov	r3, r9
 8002c74:	4621      	mov	r1, r4
 8002c76:	4640      	mov	r0, r8
 8002c78:	f8cd a000 	str.w	sl, [sp]
 8002c7c:	aa03      	add	r2, sp, #12
 8002c7e:	f7ff fee3 	bl	8002a48 <_printf_common>
 8002c82:	3001      	adds	r0, #1
 8002c84:	d14a      	bne.n	8002d1c <_printf_i+0x1f0>
 8002c86:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8a:	b004      	add	sp, #16
 8002c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	f043 0320 	orr.w	r3, r3, #32
 8002c96:	6023      	str	r3, [r4, #0]
 8002c98:	2778      	movs	r7, #120	@ 0x78
 8002c9a:	4832      	ldr	r0, [pc, #200]	@ (8002d64 <_printf_i+0x238>)
 8002c9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	6831      	ldr	r1, [r6, #0]
 8002ca4:	061f      	lsls	r7, r3, #24
 8002ca6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002caa:	d402      	bmi.n	8002cb2 <_printf_i+0x186>
 8002cac:	065f      	lsls	r7, r3, #25
 8002cae:	bf48      	it	mi
 8002cb0:	b2ad      	uxthmi	r5, r5
 8002cb2:	6031      	str	r1, [r6, #0]
 8002cb4:	07d9      	lsls	r1, r3, #31
 8002cb6:	bf44      	itt	mi
 8002cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8002cbc:	6023      	strmi	r3, [r4, #0]
 8002cbe:	b11d      	cbz	r5, 8002cc8 <_printf_i+0x19c>
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	e7ad      	b.n	8002c20 <_printf_i+0xf4>
 8002cc4:	4826      	ldr	r0, [pc, #152]	@ (8002d60 <_printf_i+0x234>)
 8002cc6:	e7e9      	b.n	8002c9c <_printf_i+0x170>
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	f023 0320 	bic.w	r3, r3, #32
 8002cce:	6023      	str	r3, [r4, #0]
 8002cd0:	e7f6      	b.n	8002cc0 <_printf_i+0x194>
 8002cd2:	4616      	mov	r6, r2
 8002cd4:	e7bd      	b.n	8002c52 <_printf_i+0x126>
 8002cd6:	6833      	ldr	r3, [r6, #0]
 8002cd8:	6825      	ldr	r5, [r4, #0]
 8002cda:	1d18      	adds	r0, r3, #4
 8002cdc:	6961      	ldr	r1, [r4, #20]
 8002cde:	6030      	str	r0, [r6, #0]
 8002ce0:	062e      	lsls	r6, r5, #24
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	d501      	bpl.n	8002cea <_printf_i+0x1be>
 8002ce6:	6019      	str	r1, [r3, #0]
 8002ce8:	e002      	b.n	8002cf0 <_printf_i+0x1c4>
 8002cea:	0668      	lsls	r0, r5, #25
 8002cec:	d5fb      	bpl.n	8002ce6 <_printf_i+0x1ba>
 8002cee:	8019      	strh	r1, [r3, #0]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	4616      	mov	r6, r2
 8002cf4:	6123      	str	r3, [r4, #16]
 8002cf6:	e7bc      	b.n	8002c72 <_printf_i+0x146>
 8002cf8:	6833      	ldr	r3, [r6, #0]
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	1d1a      	adds	r2, r3, #4
 8002cfe:	6032      	str	r2, [r6, #0]
 8002d00:	681e      	ldr	r6, [r3, #0]
 8002d02:	6862      	ldr	r2, [r4, #4]
 8002d04:	4630      	mov	r0, r6
 8002d06:	f000 f859 	bl	8002dbc <memchr>
 8002d0a:	b108      	cbz	r0, 8002d10 <_printf_i+0x1e4>
 8002d0c:	1b80      	subs	r0, r0, r6
 8002d0e:	6060      	str	r0, [r4, #4]
 8002d10:	6863      	ldr	r3, [r4, #4]
 8002d12:	6123      	str	r3, [r4, #16]
 8002d14:	2300      	movs	r3, #0
 8002d16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d1a:	e7aa      	b.n	8002c72 <_printf_i+0x146>
 8002d1c:	4632      	mov	r2, r6
 8002d1e:	4649      	mov	r1, r9
 8002d20:	4640      	mov	r0, r8
 8002d22:	6923      	ldr	r3, [r4, #16]
 8002d24:	47d0      	blx	sl
 8002d26:	3001      	adds	r0, #1
 8002d28:	d0ad      	beq.n	8002c86 <_printf_i+0x15a>
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	079b      	lsls	r3, r3, #30
 8002d2e:	d413      	bmi.n	8002d58 <_printf_i+0x22c>
 8002d30:	68e0      	ldr	r0, [r4, #12]
 8002d32:	9b03      	ldr	r3, [sp, #12]
 8002d34:	4298      	cmp	r0, r3
 8002d36:	bfb8      	it	lt
 8002d38:	4618      	movlt	r0, r3
 8002d3a:	e7a6      	b.n	8002c8a <_printf_i+0x15e>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4632      	mov	r2, r6
 8002d40:	4649      	mov	r1, r9
 8002d42:	4640      	mov	r0, r8
 8002d44:	47d0      	blx	sl
 8002d46:	3001      	adds	r0, #1
 8002d48:	d09d      	beq.n	8002c86 <_printf_i+0x15a>
 8002d4a:	3501      	adds	r5, #1
 8002d4c:	68e3      	ldr	r3, [r4, #12]
 8002d4e:	9903      	ldr	r1, [sp, #12]
 8002d50:	1a5b      	subs	r3, r3, r1
 8002d52:	42ab      	cmp	r3, r5
 8002d54:	dcf2      	bgt.n	8002d3c <_printf_i+0x210>
 8002d56:	e7eb      	b.n	8002d30 <_printf_i+0x204>
 8002d58:	2500      	movs	r5, #0
 8002d5a:	f104 0619 	add.w	r6, r4, #25
 8002d5e:	e7f5      	b.n	8002d4c <_printf_i+0x220>
 8002d60:	08002ecf 	.word	0x08002ecf
 8002d64:	08002ee0 	.word	0x08002ee0

08002d68 <memmove>:
 8002d68:	4288      	cmp	r0, r1
 8002d6a:	b510      	push	{r4, lr}
 8002d6c:	eb01 0402 	add.w	r4, r1, r2
 8002d70:	d902      	bls.n	8002d78 <memmove+0x10>
 8002d72:	4284      	cmp	r4, r0
 8002d74:	4623      	mov	r3, r4
 8002d76:	d807      	bhi.n	8002d88 <memmove+0x20>
 8002d78:	1e43      	subs	r3, r0, #1
 8002d7a:	42a1      	cmp	r1, r4
 8002d7c:	d008      	beq.n	8002d90 <memmove+0x28>
 8002d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d86:	e7f8      	b.n	8002d7a <memmove+0x12>
 8002d88:	4601      	mov	r1, r0
 8002d8a:	4402      	add	r2, r0
 8002d8c:	428a      	cmp	r2, r1
 8002d8e:	d100      	bne.n	8002d92 <memmove+0x2a>
 8002d90:	bd10      	pop	{r4, pc}
 8002d92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d9a:	e7f7      	b.n	8002d8c <memmove+0x24>

08002d9c <_sbrk_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	2300      	movs	r3, #0
 8002da0:	4d05      	ldr	r5, [pc, #20]	@ (8002db8 <_sbrk_r+0x1c>)
 8002da2:	4604      	mov	r4, r0
 8002da4:	4608      	mov	r0, r1
 8002da6:	602b      	str	r3, [r5, #0]
 8002da8:	f7fd fbe0 	bl	800056c <_sbrk>
 8002dac:	1c43      	adds	r3, r0, #1
 8002dae:	d102      	bne.n	8002db6 <_sbrk_r+0x1a>
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	b103      	cbz	r3, 8002db6 <_sbrk_r+0x1a>
 8002db4:	6023      	str	r3, [r4, #0]
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
 8002db8:	20000248 	.word	0x20000248

08002dbc <memchr>:
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	b510      	push	{r4, lr}
 8002dc0:	b2c9      	uxtb	r1, r1
 8002dc2:	4402      	add	r2, r0
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	d101      	bne.n	8002dce <memchr+0x12>
 8002dca:	2000      	movs	r0, #0
 8002dcc:	e003      	b.n	8002dd6 <memchr+0x1a>
 8002dce:	7804      	ldrb	r4, [r0, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	428c      	cmp	r4, r1
 8002dd4:	d1f6      	bne.n	8002dc4 <memchr+0x8>
 8002dd6:	bd10      	pop	{r4, pc}

08002dd8 <memcpy>:
 8002dd8:	440a      	add	r2, r1
 8002dda:	4291      	cmp	r1, r2
 8002ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002de0:	d100      	bne.n	8002de4 <memcpy+0xc>
 8002de2:	4770      	bx	lr
 8002de4:	b510      	push	{r4, lr}
 8002de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dea:	4291      	cmp	r1, r2
 8002dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002df0:	d1f9      	bne.n	8002de6 <memcpy+0xe>
 8002df2:	bd10      	pop	{r4, pc}

08002df4 <_realloc_r>:
 8002df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002df8:	4607      	mov	r7, r0
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	460d      	mov	r5, r1
 8002dfe:	b921      	cbnz	r1, 8002e0a <_realloc_r+0x16>
 8002e00:	4611      	mov	r1, r2
 8002e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e06:	f7ff bc3b 	b.w	8002680 <_malloc_r>
 8002e0a:	b92a      	cbnz	r2, 8002e18 <_realloc_r+0x24>
 8002e0c:	f7ff fbce 	bl	80025ac <_free_r>
 8002e10:	4625      	mov	r5, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e18:	f000 f81a 	bl	8002e50 <_malloc_usable_size_r>
 8002e1c:	4284      	cmp	r4, r0
 8002e1e:	4606      	mov	r6, r0
 8002e20:	d802      	bhi.n	8002e28 <_realloc_r+0x34>
 8002e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e26:	d8f4      	bhi.n	8002e12 <_realloc_r+0x1e>
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4638      	mov	r0, r7
 8002e2c:	f7ff fc28 	bl	8002680 <_malloc_r>
 8002e30:	4680      	mov	r8, r0
 8002e32:	b908      	cbnz	r0, 8002e38 <_realloc_r+0x44>
 8002e34:	4645      	mov	r5, r8
 8002e36:	e7ec      	b.n	8002e12 <_realloc_r+0x1e>
 8002e38:	42b4      	cmp	r4, r6
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	bf28      	it	cs
 8002e40:	4632      	movcs	r2, r6
 8002e42:	f7ff ffc9 	bl	8002dd8 <memcpy>
 8002e46:	4629      	mov	r1, r5
 8002e48:	4638      	mov	r0, r7
 8002e4a:	f7ff fbaf 	bl	80025ac <_free_r>
 8002e4e:	e7f1      	b.n	8002e34 <_realloc_r+0x40>

08002e50 <_malloc_usable_size_r>:
 8002e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e54:	1f18      	subs	r0, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bfbc      	itt	lt
 8002e5a:	580b      	ldrlt	r3, [r1, r0]
 8002e5c:	18c0      	addlt	r0, r0, r3
 8002e5e:	4770      	bx	lr

08002e60 <_init>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr

08002e6c <_fini>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr
