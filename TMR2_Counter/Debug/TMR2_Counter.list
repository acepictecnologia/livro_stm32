
TMR2_Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080027f0  080027f0  000037f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002864  08002864  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002864  08002864  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002864  08002864  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002864  08002864  00003864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002868  08002868  00003868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800286c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000005c  080028c8  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080028c8  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008090  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f3  00000000  00000000  0000c115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0000d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000764  00000000  00000000  0000e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175ac  00000000  00000000  0000ea0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7bf  00000000  00000000  00025fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fca  00000000  00000000  00030777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8741  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c64  00000000  00000000  000b8784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000bb3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027d8 	.word	0x080027d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080027d8 	.word	0x080027d8

0800014c <send_to_lcd>:
#define D7_GPIO_Port GPIOB

/*************** Funções para operação do LCD ************/

void send_to_lcd (char data, int rs)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
	/* RS = 1 para dados e RS = 0 para comandos */
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);
 8000158:	683b      	ldr	r3, [r7, #0]
 800015a:	b2db      	uxtb	r3, r3
 800015c:	461a      	mov	r2, r3
 800015e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000162:	4822      	ldr	r0, [pc, #136]	@ (80001ec <send_to_lcd+0xa0>)
 8000164:	f000 fe86 	bl	8000e74 <HAL_GPIO_WritePin>

	/* Escreve o dado em seu respectivo pino */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	08db      	lsrs	r3, r3, #3
 800016c:	b2db      	uxtb	r3, r3
 800016e:	f003 0301 	and.w	r3, r3, #1
 8000172:	b2db      	uxtb	r3, r3
 8000174:	461a      	mov	r2, r3
 8000176:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800017a:	481d      	ldr	r0, [pc, #116]	@ (80001f0 <send_to_lcd+0xa4>)
 800017c:	f000 fe7a 	bl	8000e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	089b      	lsrs	r3, r3, #2
 8000184:	b2db      	uxtb	r3, r3
 8000186:	f003 0301 	and.w	r3, r3, #1
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000192:	4817      	ldr	r0, [pc, #92]	@ (80001f0 <send_to_lcd+0xa4>)
 8000194:	f000 fe6e 	bl	8000e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	085b      	lsrs	r3, r3, #1
 800019c:	b2db      	uxtb	r3, r3
 800019e:	f003 0301 	and.w	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001aa:	4811      	ldr	r0, [pc, #68]	@ (80001f0 <send_to_lcd+0xa4>)
 80001ac:	f000 fe62 	bl	8000e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	461a      	mov	r2, r3
 80001ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001be:	480c      	ldr	r0, [pc, #48]	@ (80001f0 <send_to_lcd+0xa4>)
 80001c0:	f000 fe58 	bl	8000e74 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001ca:	4808      	ldr	r0, [pc, #32]	@ (80001ec <send_to_lcd+0xa0>)
 80001cc:	f000 fe52 	bl	8000e74 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001d6:	4805      	ldr	r0, [pc, #20]	@ (80001ec <send_to_lcd+0xa0>)
 80001d8:	f000 fe4c 	bl	8000e74 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80001dc:	2001      	movs	r0, #1
 80001de:	f000 fb93 	bl	8000908 <HAL_Delay>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010800 	.word	0x40010800
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* Envia os 4 bits mais significativos do dado */
    datatosend = ((cmd>>4)&0x0f);
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	091b      	lsrs	r3, r3, #4
 8000202:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS deve ser 0 para envio de comandos
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ff9f 	bl	800014c <send_to_lcd>

    /* Envia os 4 bits menos significativos do dado */
    datatosend = ((cmd)&0x0f);
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	f003 030f 	and.w	r3, r3, #15
 8000214:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f7ff ff96 	bl	800014c <send_to_lcd>
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* Envia os 4 bits mais significativos do dado */
	datatosend = ((data>>4)&0x0f);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	091b      	lsrs	r3, r3, #4
 8000236:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // RS deve ser 0 para envio de caracteres
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	2101      	movs	r1, #1
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <send_to_lcd>

	/* Envia os 4 bits menos significativos do dado */
	datatosend = ((data)&0x0f);
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f003 030f 	and.w	r3, r3, #15
 8000248:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2101      	movs	r1, #1
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ff7c 	bl	800014c <send_to_lcd>
}
 8000254:	bf00      	nop
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	6039      	str	r1, [r7, #0]
    switch (row)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d003      	beq.n	8000274 <lcd_put_cur+0x18>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d005      	beq.n	800027e <lcd_put_cur+0x22>
 8000272:	e009      	b.n	8000288 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800027a:	603b      	str	r3, [r7, #0]
            break;
 800027c:	e004      	b.n	8000288 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000284:	603b      	str	r3, [r7, #0]
            break;
 8000286:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4618      	mov	r0, r3
 800028e:	f7ff ffb1 	bl	80001f4 <lcd_send_cmd>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <lcd_init>:


void lcd_init (void)
{
 800029a:	b580      	push	{r7, lr}
 800029c:	af00      	add	r7, sp, #0
	// Inicialização no modo 4 bits
	HAL_Delay(50);  // Aguarda por tempo >40ms
 800029e:	2032      	movs	r0, #50	@ 0x32
 80002a0:	f000 fb32 	bl	8000908 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002a4:	2030      	movs	r0, #48	@ 0x30
 80002a6:	f7ff ffa5 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(5);  // Aguarda por tempo >4.1ms
 80002aa:	2005      	movs	r0, #5
 80002ac:	f000 fb2c 	bl	8000908 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002b0:	2030      	movs	r0, #48	@ 0x30
 80002b2:	f7ff ff9f 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(1);  // Aguarda por tempo >100us
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 fb26 	bl	8000908 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002bc:	2030      	movs	r0, #48	@ 0x30
 80002be:	f7ff ff99 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(10);
 80002c2:	200a      	movs	r0, #10
 80002c4:	f000 fb20 	bl	8000908 <HAL_Delay>

	lcd_send_cmd (0x02);  // Modo 4bits
 80002c8:	2002      	movs	r0, #2
 80002ca:	f7ff ff93 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(1);
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 fb1a 	bl	8000908 <HAL_Delay>

    // Inicialização do LCD
	lcd_send_cmd (0x28); /* Comunicação em 4 bits, display de 2 linhas e
 80002d4:	2028      	movs	r0, #40	@ 0x28
 80002d6:	f7ff ff8d 	bl	80001f4 <lcd_send_cmd>
                            matriz 7X5 */
	HAL_Delay(1);
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 fb14 	bl	8000908 <HAL_Delay>
	lcd_send_cmd (0x08); /* Controle para ligar/desligar o display
 80002e0:	2008      	movs	r0, #8
 80002e2:	f7ff ff87 	bl	80001f4 <lcd_send_cmd>
                            --> D=0,C=0, B=0  ---> display off */
	HAL_Delay(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 fb0e 	bl	8000908 <HAL_Delay>
	lcd_send_cmd (0x01); // Limpa o LCD
 80002ec:	2001      	movs	r0, #1
 80002ee:	f7ff ff81 	bl	80001f4 <lcd_send_cmd>
	HAL_Delay(1);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f000 fb08 	bl	8000908 <HAL_Delay>
	HAL_Delay(1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f000 fb05 	bl	8000908 <HAL_Delay>
	lcd_send_cmd (0x06); /* Deslocamento do cursor à direita após um novo
 80002fe:	2006      	movs	r0, #6
 8000300:	f7ff ff78 	bl	80001f4 <lcd_send_cmd>
                            caractere */
	HAL_Delay(1);
 8000304:	2001      	movs	r0, #1
 8000306:	f000 faff 	bl	8000908 <HAL_Delay>
	lcd_send_cmd (0x0C); //Liga o display sem cursor
 800030a:	200c      	movs	r0, #12
 800030c:	f7ff ff72 	bl	80001f4 <lcd_send_cmd>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}

08000314 <lcd_send_string>:


void lcd_send_string (char *str)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800031c:	e006      	b.n	800032c <lcd_send_string+0x18>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	1c5a      	adds	r2, r3, #1
 8000322:	607a      	str	r2, [r7, #4]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff7e 	bl	8000228 <lcd_send_data>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f4      	bne.n	800031e <lcd_send_string+0xa>
}
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000348:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800034c:	4803      	ldr	r0, [pc, #12]	@ (800035c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800034e:	f000 fda9 	bl	8000ea4 <HAL_GPIO_TogglePin>
}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40011000 	.word	0x40011000

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	uint16_t CounterTicks = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036a:	f000 fa6b 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036e:	f000 f837 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000372:	f000 f8cd 	bl	8000510 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000376:	f000 f879 	bl	800046c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800037a:	4814      	ldr	r0, [pc, #80]	@ (80003cc <main+0x6c>)
 800037c:	f001 f9da 	bl	8001734 <HAL_TIM_Base_Start_IT>

  lcd_init();
 8000380:	f7ff ff8b 	bl	800029a <lcd_init>
  lcd_put_cur(0, 4);
 8000384:	2104      	movs	r1, #4
 8000386:	2000      	movs	r0, #0
 8000388:	f7ff ff68 	bl	800025c <lcd_put_cur>
  lcd_send_string("CONTAGEM");
 800038c:	4810      	ldr	r0, [pc, #64]	@ (80003d0 <main+0x70>)
 800038e:	f7ff ffc1 	bl	8000314 <lcd_send_string>
  lcd_put_cur(1, 6);
 8000392:	2106      	movs	r1, #6
 8000394:	2001      	movs	r0, #1
 8000396:	f7ff ff61 	bl	800025c <lcd_put_cur>
  lcd_send_string("0000");
 800039a:	480e      	ldr	r0, [pc, #56]	@ (80003d4 <main+0x74>)
 800039c:	f7ff ffba 	bl	8000314 <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Faz a leitura do registrador de contagem do Timer2
	  CounterTicks = TIM2->CNT;
 80003a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	80fb      	strh	r3, [r7, #6]

	  sprintf(bufferLCD, "%04d", CounterTicks);
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	461a      	mov	r2, r3
 80003ac:	490a      	ldr	r1, [pc, #40]	@ (80003d8 <main+0x78>)
 80003ae:	480b      	ldr	r0, [pc, #44]	@ (80003dc <main+0x7c>)
 80003b0:	f001 fd62 	bl	8001e78 <siprintf>

	  lcd_put_cur(1, 6);
 80003b4:	2106      	movs	r1, #6
 80003b6:	2001      	movs	r0, #1
 80003b8:	f7ff ff50 	bl	800025c <lcd_put_cur>
	  lcd_send_string(bufferLCD);
 80003bc:	4807      	ldr	r0, [pc, #28]	@ (80003dc <main+0x7c>)
 80003be:	f7ff ffa9 	bl	8000314 <lcd_send_string>

	  HAL_Delay(100);
 80003c2:	2064      	movs	r0, #100	@ 0x64
 80003c4:	f000 faa0 	bl	8000908 <HAL_Delay>
	  CounterTicks = TIM2->CNT;
 80003c8:	bf00      	nop
 80003ca:	e7e9      	b.n	80003a0 <main+0x40>
 80003cc:	20000078 	.word	0x20000078
 80003d0:	080027f0 	.word	0x080027f0
 80003d4:	080027fc 	.word	0x080027fc
 80003d8:	08002804 	.word	0x08002804
 80003dc:	200000c0 	.word	0x200000c0

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b090      	sub	sp, #64	@ 0x40
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0318 	add.w	r3, r7, #24
 80003ea:	2228      	movs	r2, #40	@ 0x28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fd64 	bl	8001ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000402:	2301      	movs	r3, #1
 8000404:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000406:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800040a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	2301      	movs	r3, #1
 8000412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000414:	2302      	movs	r3, #2
 8000416:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800041c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	f107 0318 	add.w	r3, r7, #24
 8000428:	4618      	mov	r0, r3
 800042a:	f000 fd55 	bl	8000ed8 <HAL_RCC_OscConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000434:	f000 f8f2 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	230f      	movs	r3, #15
 800043a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043c:	2302      	movs	r3, #2
 800043e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000444:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000448:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2102      	movs	r1, #2
 8000452:	4618      	mov	r0, r3
 8000454:	f000 ffc2 	bl	80013dc <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800045e:	f000 f8dd 	bl	800061c <Error_Handler>
  }
}
 8000462:	bf00      	nop
 8000464:	3740      	adds	r7, #64	@ 0x40
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000480:	463b      	mov	r3, r7
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000488:	4b20      	ldr	r3, [pc, #128]	@ (800050c <MX_TIM2_Init+0xa0>)
 800048a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800048e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000490:	4b1e      	ldr	r3, [pc, #120]	@ (800050c <MX_TIM2_Init+0xa0>)
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000496:	4b1d      	ldr	r3, [pc, #116]	@ (800050c <MX_TIM2_Init+0xa0>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 800049c:	4b1b      	ldr	r3, [pc, #108]	@ (800050c <MX_TIM2_Init+0xa0>)
 800049e:	2214      	movs	r2, #20
 80004a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	@ (800050c <MX_TIM2_Init+0xa0>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004a8:	4b18      	ldr	r3, [pc, #96]	@ (800050c <MX_TIM2_Init+0xa0>)
 80004aa:	2280      	movs	r2, #128	@ 0x80
 80004ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ae:	4817      	ldr	r0, [pc, #92]	@ (800050c <MX_TIM2_Init+0xa0>)
 80004b0:	f001 f8f0 	bl	8001694 <HAL_TIM_Base_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80004ba:	f000 f8af 	bl	800061c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80004be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004c2:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_INVERTED;
 80004c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004c8:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 15;
 80004ce:	230f      	movs	r3, #15
 80004d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	4619      	mov	r1, r3
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <MX_TIM2_Init+0xa0>)
 80004da:	f001 fa6d 	bl	80019b8 <HAL_TIM_ConfigClockSource>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80004e4:	f000 f89a 	bl	800061c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e8:	2300      	movs	r3, #0
 80004ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f0:	463b      	mov	r3, r7
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	@ (800050c <MX_TIM2_Init+0xa0>)
 80004f6:	f001 fc4f 	bl	8001d98 <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000500:	f000 f88c 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000078 	.word	0x20000078

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000524:	4b39      	ldr	r3, [pc, #228]	@ (800060c <MX_GPIO_Init+0xfc>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a38      	ldr	r2, [pc, #224]	@ (800060c <MX_GPIO_Init+0xfc>)
 800052a:	f043 0310 	orr.w	r3, r3, #16
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b36      	ldr	r3, [pc, #216]	@ (800060c <MX_GPIO_Init+0xfc>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0310 	and.w	r3, r3, #16
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053c:	4b33      	ldr	r3, [pc, #204]	@ (800060c <MX_GPIO_Init+0xfc>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a32      	ldr	r2, [pc, #200]	@ (800060c <MX_GPIO_Init+0xfc>)
 8000542:	f043 0320 	orr.w	r3, r3, #32
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b30      	ldr	r3, [pc, #192]	@ (800060c <MX_GPIO_Init+0xfc>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <MX_GPIO_Init+0xfc>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a2c      	ldr	r2, [pc, #176]	@ (800060c <MX_GPIO_Init+0xfc>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <MX_GPIO_Init+0xfc>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056c:	4b27      	ldr	r3, [pc, #156]	@ (800060c <MX_GPIO_Init+0xfc>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a26      	ldr	r2, [pc, #152]	@ (800060c <MX_GPIO_Init+0xfc>)
 8000572:	f043 0308 	orr.w	r3, r3, #8
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b24      	ldr	r3, [pc, #144]	@ (800060c <MX_GPIO_Init+0xfc>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0308 	and.w	r3, r3, #8
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058a:	4821      	ldr	r0, [pc, #132]	@ (8000610 <MX_GPIO_Init+0x100>)
 800058c:	f000 fc72 	bl	8000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000596:	481f      	ldr	r0, [pc, #124]	@ (8000614 <MX_GPIO_Init+0x104>)
 8000598:	f000 fc6c 	bl	8000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80005a2:	481d      	ldr	r0, [pc, #116]	@ (8000618 <MX_GPIO_Init+0x108>)
 80005a4:	f000 fc66 	bl	8000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	4813      	ldr	r0, [pc, #76]	@ (8000610 <MX_GPIO_Init+0x100>)
 80005c2:	f000 fad3 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005c6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80005ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	480d      	ldr	r0, [pc, #52]	@ (8000614 <MX_GPIO_Init+0x104>)
 80005e0:	f000 fac4 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80005e4:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80005e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	4806      	ldr	r0, [pc, #24]	@ (8000618 <MX_GPIO_Init+0x108>)
 80005fe:	f000 fab5 	bl	8000b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000602:	bf00      	nop
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	40011000 	.word	0x40011000
 8000614:	40010c00 	.word	0x40010c00
 8000618:	40010800 	.word	0x40010800

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <Error_Handler+0x8>

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <HAL_MspInit+0x5c>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <HAL_MspInit+0x5c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <HAL_MspInit+0x5c>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <HAL_MspInit+0x5c>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800065e:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <HAL_MspInit+0x60>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	4a04      	ldr	r2, [pc, #16]	@ (8000688 <HAL_MspInit+0x60>)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000
 8000688:	40010000 	.word	0x40010000

0800068c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006aa:	d12b      	bne.n	8000704 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <HAL_TIM_Base_MspInit+0x80>)
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	4a16      	ldr	r2, [pc, #88]	@ (800070c <HAL_TIM_Base_MspInit+0x80>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	61d3      	str	r3, [r2, #28]
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <HAL_TIM_Base_MspInit+0x80>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <HAL_TIM_Base_MspInit+0x80>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a10      	ldr	r2, [pc, #64]	@ (800070c <HAL_TIM_Base_MspInit+0x80>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <HAL_TIM_Base_MspInit+0x80>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006dc:	2301      	movs	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4619      	mov	r1, r3
 80006ee:	4808      	ldr	r0, [pc, #32]	@ (8000710 <HAL_TIM_Base_MspInit+0x84>)
 80006f0:	f000 fa3c 	bl	8000b6c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	201c      	movs	r0, #28
 80006fa:	f000 fa00 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006fe:	201c      	movs	r0, #28
 8000700:	f000 fa19 	bl	8000b36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	40010800 	.word	0x40010800

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <NMI_Handler+0x4>

0800071c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <MemManage_Handler+0x4>

0800072c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <UsageFault_Handler+0x4>

0800073c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f8b4 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000770:	4802      	ldr	r0, [pc, #8]	@ (800077c <TIM2_IRQHandler+0x10>)
 8000772:	f001 f831 	bl	80017d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000078 	.word	0x20000078

08000780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000788:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <_sbrk+0x5c>)
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <_sbrk+0x60>)
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <_sbrk+0x64>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <_sbrk+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b0:	f001 fb8c 	bl	8001ecc <__errno>
 80007b4:	4603      	mov	r3, r0
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	e009      	b.n	80007d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <_sbrk+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20005000 	.word	0x20005000
 80007e0:	00000400 	.word	0x00000400
 80007e4:	200000d0 	.word	0x200000d0
 80007e8:	20000220 	.word	0x20000220

080007ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f8:	f7ff fff8 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480b      	ldr	r0, [pc, #44]	@ (800082c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007fe:	490c      	ldr	r1, [pc, #48]	@ (8000830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000800:	4a0c      	ldr	r2, [pc, #48]	@ (8000834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a09      	ldr	r2, [pc, #36]	@ (8000838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000814:	4c09      	ldr	r4, [pc, #36]	@ (800083c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000822:	f001 fb59 	bl	8001ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fd9b 	bl	8000360 <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000834:	0800286c 	.word	0x0800286c
  ldr r2, =_sbss
 8000838:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800083c:	20000220 	.word	0x20000220

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <HAL_Init+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <HAL_Init+0x28>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f947 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	200f      	movs	r0, #15
 800085c:	f000 f808 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fee2 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_InitTick+0x54>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <HAL_InitTick+0x58>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000886:	fbb3 f3f1 	udiv	r3, r3, r1
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f95f 	bl	8000b52 <HAL_SYSTICK_Config>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e00e      	b.n	80008bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d80a      	bhi.n	80008ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f000 f927 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4a06      	ldr	r2, [pc, #24]	@ (80008cc <HAL_InitTick+0x5c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d4:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <HAL_IncTick+0x1c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <HAL_IncTick+0x20>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a03      	ldr	r2, [pc, #12]	@ (80008f0 <HAL_IncTick+0x20>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000008 	.word	0x20000008
 80008f0:	200000d4 	.word	0x200000d4

080008f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return uwTick;
 80008f8:	4b02      	ldr	r3, [pc, #8]	@ (8000904 <HAL_GetTick+0x10>)
 80008fa:	681b      	ldr	r3, [r3, #0]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	200000d4 	.word	0x200000d4

08000908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff fff0 	bl	80008f4 <HAL_GetTick>
 8000914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000920:	d005      	beq.n	800092e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <HAL_Delay+0x44>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092e:	bf00      	nop
 8000930:	f7ff ffe0 	bl	80008f4 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d8f7      	bhi.n	8000930 <HAL_Delay+0x28>
  {
  }
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db0b      	blt.n	80009de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 021f 	and.w	r2, r3, #31
 80009cc:	4906      	ldr	r1, [pc, #24]	@ (80009e8 <__NVIC_EnableIRQ+0x34>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	2001      	movs	r0, #1
 80009d6:	fa00 f202 	lsl.w	r2, r0, r2
 80009da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	@ (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	@ (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	@ 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	@ 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff90 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff2d 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff42 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff90 	bl	8000a40 <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5f 	bl	80009ec <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff35 	bl	80009b4 <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffa2 	bl	8000aa4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b08b      	sub	sp, #44	@ 0x2c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	e169      	b.n	8000e54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b80:	2201      	movs	r2, #1
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	69fa      	ldr	r2, [r7, #28]
 8000b90:	4013      	ands	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	f040 8158 	bne.w	8000e4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	4a9a      	ldr	r2, [pc, #616]	@ (8000e0c <HAL_GPIO_Init+0x2a0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d05e      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000ba8:	4a98      	ldr	r2, [pc, #608]	@ (8000e0c <HAL_GPIO_Init+0x2a0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d875      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bae:	4a98      	ldr	r2, [pc, #608]	@ (8000e10 <HAL_GPIO_Init+0x2a4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d058      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bb4:	4a96      	ldr	r2, [pc, #600]	@ (8000e10 <HAL_GPIO_Init+0x2a4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d86f      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bba:	4a96      	ldr	r2, [pc, #600]	@ (8000e14 <HAL_GPIO_Init+0x2a8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d052      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bc0:	4a94      	ldr	r2, [pc, #592]	@ (8000e14 <HAL_GPIO_Init+0x2a8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d869      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bc6:	4a94      	ldr	r2, [pc, #592]	@ (8000e18 <HAL_GPIO_Init+0x2ac>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d04c      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bcc:	4a92      	ldr	r2, [pc, #584]	@ (8000e18 <HAL_GPIO_Init+0x2ac>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d863      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bd2:	4a92      	ldr	r2, [pc, #584]	@ (8000e1c <HAL_GPIO_Init+0x2b0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d046      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
 8000bd8:	4a90      	ldr	r2, [pc, #576]	@ (8000e1c <HAL_GPIO_Init+0x2b0>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d85d      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000bde:	2b12      	cmp	r3, #18
 8000be0:	d82a      	bhi.n	8000c38 <HAL_GPIO_Init+0xcc>
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d859      	bhi.n	8000c9a <HAL_GPIO_Init+0x12e>
 8000be6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bec <HAL_GPIO_Init+0x80>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000c67 	.word	0x08000c67
 8000bf0:	08000c41 	.word	0x08000c41
 8000bf4:	08000c53 	.word	0x08000c53
 8000bf8:	08000c95 	.word	0x08000c95
 8000bfc:	08000c9b 	.word	0x08000c9b
 8000c00:	08000c9b 	.word	0x08000c9b
 8000c04:	08000c9b 	.word	0x08000c9b
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000c9b 	.word	0x08000c9b
 8000c10:	08000c9b 	.word	0x08000c9b
 8000c14:	08000c9b 	.word	0x08000c9b
 8000c18:	08000c9b 	.word	0x08000c9b
 8000c1c:	08000c9b 	.word	0x08000c9b
 8000c20:	08000c9b 	.word	0x08000c9b
 8000c24:	08000c9b 	.word	0x08000c9b
 8000c28:	08000c9b 	.word	0x08000c9b
 8000c2c:	08000c9b 	.word	0x08000c9b
 8000c30:	08000c49 	.word	0x08000c49
 8000c34:	08000c5d 	.word	0x08000c5d
 8000c38:	4a79      	ldr	r2, [pc, #484]	@ (8000e20 <HAL_GPIO_Init+0x2b4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d013      	beq.n	8000c66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c3e:	e02c      	b.n	8000c9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e029      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	e024      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	3308      	adds	r3, #8
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e01f      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	330c      	adds	r3, #12
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e01a      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e013      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d105      	bne.n	8000c88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	611a      	str	r2, [r3, #16]
          break;
 8000c86:	e009      	b.n	8000c9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	615a      	str	r2, [r3, #20]
          break;
 8000c92:	e003      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
          break;
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x130>
          break;
 8000c9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	2bff      	cmp	r3, #255	@ 0xff
 8000ca0:	d801      	bhi.n	8000ca6 <HAL_GPIO_Init+0x13a>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	e001      	b.n	8000caa <HAL_GPIO_Init+0x13e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2bff      	cmp	r3, #255	@ 0xff
 8000cb0:	d802      	bhi.n	8000cb8 <HAL_GPIO_Init+0x14c>
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_Init+0x152>
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cba:	3b08      	subs	r3, #8
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	401a      	ands	r2, r3
 8000cd0:	6a39      	ldr	r1, [r7, #32]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 80b1 	beq.w	8000e4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cec:	4b4d      	ldr	r3, [pc, #308]	@ (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a4c      	ldr	r2, [pc, #304]	@ (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8000e24 <HAL_GPIO_Init+0x2b8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d04:	4a48      	ldr	r2, [pc, #288]	@ (8000e28 <HAL_GPIO_Init+0x2bc>)
 8000d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d08:	089b      	lsrs	r3, r3, #2
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	4013      	ands	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a40      	ldr	r2, [pc, #256]	@ (8000e2c <HAL_GPIO_Init+0x2c0>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d013      	beq.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a3f      	ldr	r2, [pc, #252]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d00d      	beq.n	8000d54 <HAL_GPIO_Init+0x1e8>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e34 <HAL_GPIO_Init+0x2c8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d007      	beq.n	8000d50 <HAL_GPIO_Init+0x1e4>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a3d      	ldr	r2, [pc, #244]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d101      	bne.n	8000d4c <HAL_GPIO_Init+0x1e0>
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	e004      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d50:	2302      	movs	r3, #2
 8000d52:	e002      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <HAL_GPIO_Init+0x1ee>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d5c:	f002 0203 	and.w	r2, r2, #3
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	4093      	lsls	r3, r2
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d6a:	492f      	ldr	r1, [pc, #188]	@ (8000e28 <HAL_GPIO_Init+0x2bc>)
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d84:	4b2d      	ldr	r3, [pc, #180]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	492c      	ldr	r1, [pc, #176]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	608b      	str	r3, [r1, #8]
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d92:	4b2a      	ldr	r3, [pc, #168]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4928      	ldr	r1, [pc, #160]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dac:	4b23      	ldr	r3, [pc, #140]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	4922      	ldr	r1, [pc, #136]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	60cb      	str	r3, [r1, #12]
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dba:	4b20      	ldr	r3, [pc, #128]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	491e      	ldr	r1, [pc, #120]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	4918      	ldr	r1, [pc, #96]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4914      	ldr	r1, [pc, #80]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d021      	beq.n	8000e40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	490e      	ldr	r1, [pc, #56]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
 8000e08:	e021      	b.n	8000e4e <HAL_GPIO_Init+0x2e2>
 8000e0a:	bf00      	nop
 8000e0c:	10320000 	.word	0x10320000
 8000e10:	10310000 	.word	0x10310000
 8000e14:	10220000 	.word	0x10220000
 8000e18:	10210000 	.word	0x10210000
 8000e1c:	10120000 	.word	0x10120000
 8000e20:	10110000 	.word	0x10110000
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40010c00 	.word	0x40010c00
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40011400 	.word	0x40011400
 8000e3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_GPIO_Init+0x304>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4909      	ldr	r1, [pc, #36]	@ (8000e70 <HAL_GPIO_Init+0x304>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	3301      	adds	r3, #1
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f47f ae8e 	bne.w	8000b80 <HAL_GPIO_Init+0x14>
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	372c      	adds	r7, #44	@ 0x2c
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
 8000e80:	4613      	mov	r3, r2
 8000e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e90:	e003      	b.n	8000e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	041a      	lsls	r2, r3, #16
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	611a      	str	r2, [r3, #16]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	041a      	lsls	r2, r3, #16
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43d9      	mvns	r1, r3
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	611a      	str	r2, [r3, #16]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e272      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 8087 	beq.w	8001006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef8:	4b92      	ldr	r3, [pc, #584]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d00c      	beq.n	8000f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f04:	4b8f      	ldr	r3, [pc, #572]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 030c 	and.w	r3, r3, #12
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d112      	bne.n	8000f36 <HAL_RCC_OscConfig+0x5e>
 8000f10:	4b8c      	ldr	r3, [pc, #560]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f1c:	d10b      	bne.n	8000f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1e:	4b89      	ldr	r3, [pc, #548]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d06c      	beq.n	8001004 <HAL_RCC_OscConfig+0x12c>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d168      	bne.n	8001004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e24c      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f3e:	d106      	bne.n	8000f4e <HAL_RCC_OscConfig+0x76>
 8000f40:	4b80      	ldr	r3, [pc, #512]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a7f      	ldr	r2, [pc, #508]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	e02e      	b.n	8000fac <HAL_RCC_OscConfig+0xd4>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x98>
 8000f56:	4b7b      	ldr	r3, [pc, #492]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a7a      	ldr	r2, [pc, #488]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b78      	ldr	r3, [pc, #480]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a77      	ldr	r2, [pc, #476]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e01d      	b.n	8000fac <HAL_RCC_OscConfig+0xd4>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0xbc>
 8000f7a:	4b72      	ldr	r3, [pc, #456]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a71      	ldr	r2, [pc, #452]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b6f      	ldr	r3, [pc, #444]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e00b      	b.n	8000fac <HAL_RCC_OscConfig+0xd4>
 8000f94:	4b6b      	ldr	r3, [pc, #428]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a6a      	ldr	r2, [pc, #424]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b68      	ldr	r3, [pc, #416]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a67      	ldr	r2, [pc, #412]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d013      	beq.n	8000fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fc9e 	bl	80008f4 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fc9a 	bl	80008f4 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b64      	cmp	r3, #100	@ 0x64
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e200      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	4b5d      	ldr	r3, [pc, #372]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f0      	beq.n	8000fbc <HAL_RCC_OscConfig+0xe4>
 8000fda:	e014      	b.n	8001006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fc8a 	bl	80008f4 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fc86 	bl	80008f4 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	@ 0x64
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e1ec      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	4b53      	ldr	r3, [pc, #332]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x10c>
 8001002:	e000      	b.n	8001006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d063      	beq.n	80010da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001012:	4b4c      	ldr	r3, [pc, #304]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00b      	beq.n	8001036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800101e:	4b49      	ldr	r3, [pc, #292]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b08      	cmp	r3, #8
 8001028:	d11c      	bne.n	8001064 <HAL_RCC_OscConfig+0x18c>
 800102a:	4b46      	ldr	r3, [pc, #280]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d116      	bne.n	8001064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001036:	4b43      	ldr	r3, [pc, #268]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d005      	beq.n	800104e <HAL_RCC_OscConfig+0x176>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d001      	beq.n	800104e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e1c0      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104e:	4b3d      	ldr	r3, [pc, #244]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4939      	ldr	r1, [pc, #228]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 800105e:	4313      	orrs	r3, r2
 8001060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	e03a      	b.n	80010da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d020      	beq.n	80010ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106c:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <HAL_RCC_OscConfig+0x270>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fc3f 	bl	80008f4 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107a:	f7ff fc3b 	bl	80008f4 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e1a1      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108c:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001098:	4b2a      	ldr	r3, [pc, #168]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4927      	ldr	r1, [pc, #156]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	600b      	str	r3, [r1, #0]
 80010ac:	e015      	b.n	80010da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ae:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <HAL_RCC_OscConfig+0x270>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fc1e 	bl	80008f4 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010bc:	f7ff fc1a 	bl	80008f4 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e180      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d03a      	beq.n	800115c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d019      	beq.n	8001122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <HAL_RCC_OscConfig+0x274>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f4:	f7ff fbfe 	bl	80008f4 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010fc:	f7ff fbfa 	bl	80008f4 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e160      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <HAL_RCC_OscConfig+0x26c>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f000 fa9c 	bl	8001658 <RCC_Delay>
 8001120:	e01c      	b.n	800115c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_RCC_OscConfig+0x274>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001128:	f7ff fbe4 	bl	80008f4 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112e:	e00f      	b.n	8001150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff fbe0 	bl	80008f4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d908      	bls.n	8001150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e146      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	42420000 	.word	0x42420000
 800114c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001150:	4b92      	ldr	r3, [pc, #584]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e9      	bne.n	8001130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80a6 	beq.w	80012b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800116e:	4b8b      	ldr	r3, [pc, #556]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10d      	bne.n	8001196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b88      	ldr	r3, [pc, #544]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a87      	ldr	r2, [pc, #540]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b85      	ldr	r3, [pc, #532]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001192:	2301      	movs	r3, #1
 8001194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001196:	4b82      	ldr	r3, [pc, #520]	@ (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d118      	bne.n	80011d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a2:	4b7f      	ldr	r3, [pc, #508]	@ (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a7e      	ldr	r2, [pc, #504]	@ (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fba1 	bl	80008f4 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b6:	f7ff fb9d 	bl	80008f4 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b64      	cmp	r3, #100	@ 0x64
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e103      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c8:	4b75      	ldr	r3, [pc, #468]	@ (80013a0 <HAL_RCC_OscConfig+0x4c8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x312>
 80011dc:	4b6f      	ldr	r3, [pc, #444]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a6e      	ldr	r2, [pc, #440]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6213      	str	r3, [r2, #32]
 80011e8:	e02d      	b.n	8001246 <HAL_RCC_OscConfig+0x36e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x334>
 80011f2:	4b6a      	ldr	r3, [pc, #424]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4a69      	ldr	r2, [pc, #420]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	f023 0301 	bic.w	r3, r3, #1
 80011fc:	6213      	str	r3, [r2, #32]
 80011fe:	4b67      	ldr	r3, [pc, #412]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a66      	ldr	r2, [pc, #408]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001204:	f023 0304 	bic.w	r3, r3, #4
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	e01c      	b.n	8001246 <HAL_RCC_OscConfig+0x36e>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d10c      	bne.n	800122e <HAL_RCC_OscConfig+0x356>
 8001214:	4b61      	ldr	r3, [pc, #388]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4a60      	ldr	r2, [pc, #384]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6213      	str	r3, [r2, #32]
 8001220:	4b5e      	ldr	r3, [pc, #376]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4a5d      	ldr	r2, [pc, #372]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6213      	str	r3, [r2, #32]
 800122c:	e00b      	b.n	8001246 <HAL_RCC_OscConfig+0x36e>
 800122e:	4b5b      	ldr	r3, [pc, #364]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a5a      	ldr	r2, [pc, #360]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	4b58      	ldr	r3, [pc, #352]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a57      	ldr	r2, [pc, #348]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d015      	beq.n	800127a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fb51 	bl	80008f4 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff fb4d 	bl	80008f4 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0b1      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126c:	4b4b      	ldr	r3, [pc, #300]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ee      	beq.n	8001256 <HAL_RCC_OscConfig+0x37e>
 8001278:	e014      	b.n	80012a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fb3b 	bl	80008f4 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001280:	e00a      	b.n	8001298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fb37 	bl	80008f4 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e09b      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001298:	4b40      	ldr	r3, [pc, #256]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ee      	bne.n	8001282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d105      	bne.n	80012b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012aa:	4b3c      	ldr	r3, [pc, #240]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a3b      	ldr	r2, [pc, #236]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8087 	beq.w	80013ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c0:	4b36      	ldr	r3, [pc, #216]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d061      	beq.n	8001390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d146      	bne.n	8001362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d4:	4b33      	ldr	r3, [pc, #204]	@ (80013a4 <HAL_RCC_OscConfig+0x4cc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fb0b 	bl	80008f4 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff fb07 	bl	80008f4 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e06d      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f4:	4b29      	ldr	r3, [pc, #164]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001308:	d108      	bne.n	800131c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800130a:	4b24      	ldr	r3, [pc, #144]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4921      	ldr	r1, [pc, #132]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131c:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a19      	ldr	r1, [r3, #32]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132c:	430b      	orrs	r3, r1
 800132e:	491b      	ldr	r1, [pc, #108]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001334:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <HAL_RCC_OscConfig+0x4cc>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fadb 	bl	80008f4 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff fad7 	bl	80008f4 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e03d      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x46a>
 8001360:	e035      	b.n	80013ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <HAL_RCC_OscConfig+0x4cc>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fac4 	bl	80008f4 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff fac0 	bl	80008f4 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e026      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_RCC_OscConfig+0x4c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x498>
 800138e:	e01e      	b.n	80013ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d107      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e019      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
 800139c:	40021000 	.word	0x40021000
 80013a0:	40007000 	.word	0x40007000
 80013a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <HAL_RCC_OscConfig+0x500>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0d0      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f0:	4b6a      	ldr	r3, [pc, #424]	@ (800159c <HAL_RCC_ClockConfig+0x1c0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d910      	bls.n	8001420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fe:	4b67      	ldr	r3, [pc, #412]	@ (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 0207 	bic.w	r2, r3, #7
 8001406:	4965      	ldr	r1, [pc, #404]	@ (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800140e:	4b63      	ldr	r3, [pc, #396]	@ (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0b8      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001438:	4b59      	ldr	r3, [pc, #356]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a58      	ldr	r2, [pc, #352]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001450:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a52      	ldr	r2, [pc, #328]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800145a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145c:	4b50      	ldr	r3, [pc, #320]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	494d      	ldr	r1, [pc, #308]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d040      	beq.n	80014fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d115      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e07f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149a:	4b41      	ldr	r3, [pc, #260]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e073      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e06b      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ba:	4b39      	ldr	r3, [pc, #228]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f023 0203 	bic.w	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4936      	ldr	r1, [pc, #216]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014cc:	f7ff fa12 	bl	80008f4 <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f7ff fa0e 	bl	80008f4 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e053      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 020c 	and.w	r2, r3, #12
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1eb      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014fc:	4b27      	ldr	r3, [pc, #156]	@ (800159c <HAL_RCC_ClockConfig+0x1c0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d210      	bcs.n	800152c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 0207 	bic.w	r2, r3, #7
 8001512:	4922      	ldr	r1, [pc, #136]	@ (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e032      	b.n	8001592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4916      	ldr	r1, [pc, #88]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001556:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	490e      	ldr	r1, [pc, #56]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156a:	f000 f821 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 800156e:	4602      	mov	r2, r0
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	490a      	ldr	r1, [pc, #40]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c8>)
 800157c:	5ccb      	ldrb	r3, [r1, r3]
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <HAL_RCC_ClockConfig+0x1d0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f970 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40022000 	.word	0x40022000
 80015a0:	40021000 	.word	0x40021000
 80015a4:	0800280c 	.word	0x0800280c
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <HAL_RCC_GetSysClockFreq+0x94>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x30>
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x36>
 80015de:	e027      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e0:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x98>)
 80015e2:	613b      	str	r3, [r7, #16]
      break;
 80015e4:	e027      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	4a17      	ldr	r2, [pc, #92]	@ (800164c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d010      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <HAL_RCC_GetSysClockFreq+0x94>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	0c5b      	lsrs	r3, r3, #17
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800160a:	5cd3      	ldrb	r3, [r2, r3]
 800160c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x98>)
 8001612:	fb03 f202 	mul.w	r2, r3, r2
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e004      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a0c      	ldr	r2, [pc, #48]	@ (8001654 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	613b      	str	r3, [r7, #16]
      break;
 800162e:	e002      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x98>)
 8001632:	613b      	str	r3, [r7, #16]
      break;
 8001634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001636:	693b      	ldr	r3, [r7, #16]
}
 8001638:	4618      	mov	r0, r3
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	007a1200 	.word	0x007a1200
 800164c:	0800281c 	.word	0x0800281c
 8001650:	0800282c 	.word	0x0800282c
 8001654:	003d0900 	.word	0x003d0900

08001658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001660:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <RCC_Delay+0x34>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <RCC_Delay+0x38>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0a5b      	lsrs	r3, r3, #9
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001674:	bf00      	nop
  }
  while (Delay --);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e5a      	subs	r2, r3, #1
 800167a:	60fa      	str	r2, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f9      	bne.n	8001674 <RCC_Delay+0x1c>
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000000 	.word	0x20000000
 8001690:	10624dd3 	.word	0x10624dd3

08001694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e041      	b.n	800172a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7fe ffe6 	bl	800068c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3304      	adds	r3, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f000 fa5c 	bl	8001b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d001      	beq.n	800174c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e03a      	b.n	80017c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a18      	ldr	r2, [pc, #96]	@ (80017cc <HAL_TIM_Base_Start_IT+0x98>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00e      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x58>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001776:	d009      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x58>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a14      	ldr	r2, [pc, #80]	@ (80017d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d004      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x58>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a13      	ldr	r2, [pc, #76]	@ (80017d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d111      	bne.n	80017b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b06      	cmp	r3, #6
 800179c:	d010      	beq.n	80017c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ae:	e007      	b.n	80017c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40012c00 	.word	0x40012c00
 80017d0:	40000400 	.word	0x40000400
 80017d4:	40000800 	.word	0x40000800

080017d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d020      	beq.n	800183c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0202 	mvn.w	r2, #2
 800180c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f998 	bl	8001b58 <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f98b 	bl	8001b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f99a 	bl	8001b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d020      	beq.n	8001888 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0204 	mvn.w	r2, #4
 8001858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2202      	movs	r2, #2
 800185e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f972 	bl	8001b58 <HAL_TIM_IC_CaptureCallback>
 8001874:	e005      	b.n	8001882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f965 	bl	8001b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f974 	bl	8001b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d020      	beq.n	80018d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0208 	mvn.w	r2, #8
 80018a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2204      	movs	r2, #4
 80018aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f94c 	bl	8001b58 <HAL_TIM_IC_CaptureCallback>
 80018c0:	e005      	b.n	80018ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f93f 	bl	8001b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f94e 	bl	8001b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d020      	beq.n	8001920 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0310 	and.w	r3, r3, #16
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01b      	beq.n	8001920 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0210 	mvn.w	r2, #16
 80018f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2208      	movs	r2, #8
 80018f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f926 	bl	8001b58 <HAL_TIM_IC_CaptureCallback>
 800190c:	e005      	b.n	800191a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f919 	bl	8001b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f928 	bl	8001b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00c      	beq.n	8001944 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d007      	beq.n	8001944 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0201 	mvn.w	r2, #1
 800193c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe fcfe 	bl	8000340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00c      	beq.n	8001968 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fa7f 	bl	8001e66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00c      	beq.n	800198c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f8f8 	bl	8001b7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00c      	beq.n	80019b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f06f 0220 	mvn.w	r2, #32
 80019a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fa52 	bl	8001e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_TIM_ConfigClockSource+0x1c>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e0b4      	b.n	8001b3e <HAL_TIM_ConfigClockSource+0x186>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80019f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80019fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a0c:	d03e      	beq.n	8001a8c <HAL_TIM_ConfigClockSource+0xd4>
 8001a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a12:	f200 8087 	bhi.w	8001b24 <HAL_TIM_ConfigClockSource+0x16c>
 8001a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a1a:	f000 8086 	beq.w	8001b2a <HAL_TIM_ConfigClockSource+0x172>
 8001a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a22:	d87f      	bhi.n	8001b24 <HAL_TIM_ConfigClockSource+0x16c>
 8001a24:	2b70      	cmp	r3, #112	@ 0x70
 8001a26:	d01a      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0xa6>
 8001a28:	2b70      	cmp	r3, #112	@ 0x70
 8001a2a:	d87b      	bhi.n	8001b24 <HAL_TIM_ConfigClockSource+0x16c>
 8001a2c:	2b60      	cmp	r3, #96	@ 0x60
 8001a2e:	d050      	beq.n	8001ad2 <HAL_TIM_ConfigClockSource+0x11a>
 8001a30:	2b60      	cmp	r3, #96	@ 0x60
 8001a32:	d877      	bhi.n	8001b24 <HAL_TIM_ConfigClockSource+0x16c>
 8001a34:	2b50      	cmp	r3, #80	@ 0x50
 8001a36:	d03c      	beq.n	8001ab2 <HAL_TIM_ConfigClockSource+0xfa>
 8001a38:	2b50      	cmp	r3, #80	@ 0x50
 8001a3a:	d873      	bhi.n	8001b24 <HAL_TIM_ConfigClockSource+0x16c>
 8001a3c:	2b40      	cmp	r3, #64	@ 0x40
 8001a3e:	d058      	beq.n	8001af2 <HAL_TIM_ConfigClockSource+0x13a>
 8001a40:	2b40      	cmp	r3, #64	@ 0x40
 8001a42:	d86f      	bhi.n	8001b24 <HAL_TIM_ConfigClockSource+0x16c>
 8001a44:	2b30      	cmp	r3, #48	@ 0x30
 8001a46:	d064      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0x15a>
 8001a48:	2b30      	cmp	r3, #48	@ 0x30
 8001a4a:	d86b      	bhi.n	8001b24 <HAL_TIM_ConfigClockSource+0x16c>
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d060      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0x15a>
 8001a50:	2b20      	cmp	r3, #32
 8001a52:	d867      	bhi.n	8001b24 <HAL_TIM_ConfigClockSource+0x16c>
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d05c      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0x15a>
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	d05a      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0x15a>
 8001a5c:	e062      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a6e:	f000 f974 	bl	8001d5a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	609a      	str	r2, [r3, #8]
      break;
 8001a8a:	e04f      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a9c:	f000 f95d 	bl	8001d5a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001aae:	609a      	str	r2, [r3, #8]
      break;
 8001ab0:	e03c      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f000 f8d4 	bl	8001c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2150      	movs	r1, #80	@ 0x50
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f92b 	bl	8001d26 <TIM_ITRx_SetConfig>
      break;
 8001ad0:	e02c      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f000 f8f2 	bl	8001cc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2160      	movs	r1, #96	@ 0x60
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f91b 	bl	8001d26 <TIM_ITRx_SetConfig>
      break;
 8001af0:	e01c      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001afe:	461a      	mov	r2, r3
 8001b00:	f000 f8b4 	bl	8001c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2140      	movs	r1, #64	@ 0x40
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f90b 	bl	8001d26 <TIM_ITRx_SetConfig>
      break;
 8001b10:	e00c      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	f000 f902 	bl	8001d26 <TIM_ITRx_SetConfig>
      break;
 8001b22:	e003      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
      break;
 8001b28:	e000      	b.n	8001b2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
	...

08001b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8001c60 <TIM_Base_SetConfig+0xd0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d00b      	beq.n	8001bc0 <TIM_Base_SetConfig+0x30>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bae:	d007      	beq.n	8001bc0 <TIM_Base_SetConfig+0x30>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001c64 <TIM_Base_SetConfig+0xd4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d003      	beq.n	8001bc0 <TIM_Base_SetConfig+0x30>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a2b      	ldr	r2, [pc, #172]	@ (8001c68 <TIM_Base_SetConfig+0xd8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d108      	bne.n	8001bd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	@ (8001c60 <TIM_Base_SetConfig+0xd0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00b      	beq.n	8001bf2 <TIM_Base_SetConfig+0x62>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be0:	d007      	beq.n	8001bf2 <TIM_Base_SetConfig+0x62>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c64 <TIM_Base_SetConfig+0xd4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d003      	beq.n	8001bf2 <TIM_Base_SetConfig+0x62>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1e      	ldr	r2, [pc, #120]	@ (8001c68 <TIM_Base_SetConfig+0xd8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d108      	bne.n	8001c04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <TIM_Base_SetConfig+0xd0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d103      	bne.n	8001c38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f023 0201 	bic.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	611a      	str	r2, [r3, #16]
  }
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	40000400 	.word	0x40000400
 8001c68:	40000800 	.word	0x40000800

08001c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	f023 0201 	bic.w	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f023 030a 	bic.w	r3, r3, #10
 8001ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	621a      	str	r2, [r3, #32]
}
 8001cbe:	bf00      	nop
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	f023 0210 	bic.w	r2, r3, #16
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	031b      	lsls	r3, r3, #12
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001d04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	621a      	str	r2, [r3, #32]
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f043 0307 	orr.w	r3, r3, #7
 8001d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	609a      	str	r2, [r3, #8]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b087      	sub	sp, #28
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	021a      	lsls	r2, r3, #8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	609a      	str	r2, [r3, #8]
}
 8001d8e:	bf00      	nop
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e046      	b.n	8001e3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a16      	ldr	r2, [pc, #88]	@ (8001e48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00e      	beq.n	8001e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dfc:	d009      	beq.n	8001e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a12      	ldr	r2, [pc, #72]	@ (8001e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d004      	beq.n	8001e12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a10      	ldr	r2, [pc, #64]	@ (8001e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10c      	bne.n	8001e2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	40012c00 	.word	0x40012c00
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40000800 	.word	0x40000800

08001e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <siprintf>:
 8001e78:	b40e      	push	{r1, r2, r3}
 8001e7a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001e7e:	b510      	push	{r4, lr}
 8001e80:	2400      	movs	r4, #0
 8001e82:	b09d      	sub	sp, #116	@ 0x74
 8001e84:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001e86:	9002      	str	r0, [sp, #8]
 8001e88:	9006      	str	r0, [sp, #24]
 8001e8a:	9107      	str	r1, [sp, #28]
 8001e8c:	9104      	str	r1, [sp, #16]
 8001e8e:	4809      	ldr	r0, [pc, #36]	@ (8001eb4 <siprintf+0x3c>)
 8001e90:	4909      	ldr	r1, [pc, #36]	@ (8001eb8 <siprintf+0x40>)
 8001e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e96:	9105      	str	r1, [sp, #20]
 8001e98:	6800      	ldr	r0, [r0, #0]
 8001e9a:	a902      	add	r1, sp, #8
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001ea0:	f000 f992 	bl	80021c8 <_svfiprintf_r>
 8001ea4:	9b02      	ldr	r3, [sp, #8]
 8001ea6:	701c      	strb	r4, [r3, #0]
 8001ea8:	b01d      	add	sp, #116	@ 0x74
 8001eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eae:	b003      	add	sp, #12
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	2000000c 	.word	0x2000000c
 8001eb8:	ffff0208 	.word	0xffff0208

08001ebc <memset>:
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4402      	add	r2, r0
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d100      	bne.n	8001ec6 <memset+0xa>
 8001ec4:	4770      	bx	lr
 8001ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eca:	e7f9      	b.n	8001ec0 <memset+0x4>

08001ecc <__errno>:
 8001ecc:	4b01      	ldr	r3, [pc, #4]	@ (8001ed4 <__errno+0x8>)
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	2000000c 	.word	0x2000000c

08001ed8 <__libc_init_array>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	2600      	movs	r6, #0
 8001edc:	4d0c      	ldr	r5, [pc, #48]	@ (8001f10 <__libc_init_array+0x38>)
 8001ede:	4c0d      	ldr	r4, [pc, #52]	@ (8001f14 <__libc_init_array+0x3c>)
 8001ee0:	1b64      	subs	r4, r4, r5
 8001ee2:	10a4      	asrs	r4, r4, #2
 8001ee4:	42a6      	cmp	r6, r4
 8001ee6:	d109      	bne.n	8001efc <__libc_init_array+0x24>
 8001ee8:	f000 fc76 	bl	80027d8 <_init>
 8001eec:	2600      	movs	r6, #0
 8001eee:	4d0a      	ldr	r5, [pc, #40]	@ (8001f18 <__libc_init_array+0x40>)
 8001ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8001f1c <__libc_init_array+0x44>)
 8001ef2:	1b64      	subs	r4, r4, r5
 8001ef4:	10a4      	asrs	r4, r4, #2
 8001ef6:	42a6      	cmp	r6, r4
 8001ef8:	d105      	bne.n	8001f06 <__libc_init_array+0x2e>
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f00:	4798      	blx	r3
 8001f02:	3601      	adds	r6, #1
 8001f04:	e7ee      	b.n	8001ee4 <__libc_init_array+0xc>
 8001f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f0a:	4798      	blx	r3
 8001f0c:	3601      	adds	r6, #1
 8001f0e:	e7f2      	b.n	8001ef6 <__libc_init_array+0x1e>
 8001f10:	08002864 	.word	0x08002864
 8001f14:	08002864 	.word	0x08002864
 8001f18:	08002864 	.word	0x08002864
 8001f1c:	08002868 	.word	0x08002868

08001f20 <__retarget_lock_acquire_recursive>:
 8001f20:	4770      	bx	lr

08001f22 <__retarget_lock_release_recursive>:
 8001f22:	4770      	bx	lr

08001f24 <_free_r>:
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	4605      	mov	r5, r0
 8001f28:	2900      	cmp	r1, #0
 8001f2a:	d040      	beq.n	8001fae <_free_r+0x8a>
 8001f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f30:	1f0c      	subs	r4, r1, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bfb8      	it	lt
 8001f36:	18e4      	addlt	r4, r4, r3
 8001f38:	f000 f8de 	bl	80020f8 <__malloc_lock>
 8001f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb0 <_free_r+0x8c>)
 8001f3e:	6813      	ldr	r3, [r2, #0]
 8001f40:	b933      	cbnz	r3, 8001f50 <_free_r+0x2c>
 8001f42:	6063      	str	r3, [r4, #4]
 8001f44:	6014      	str	r4, [r2, #0]
 8001f46:	4628      	mov	r0, r5
 8001f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f4c:	f000 b8da 	b.w	8002104 <__malloc_unlock>
 8001f50:	42a3      	cmp	r3, r4
 8001f52:	d908      	bls.n	8001f66 <_free_r+0x42>
 8001f54:	6820      	ldr	r0, [r4, #0]
 8001f56:	1821      	adds	r1, r4, r0
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	bf01      	itttt	eq
 8001f5c:	6819      	ldreq	r1, [r3, #0]
 8001f5e:	685b      	ldreq	r3, [r3, #4]
 8001f60:	1809      	addeq	r1, r1, r0
 8001f62:	6021      	streq	r1, [r4, #0]
 8001f64:	e7ed      	b.n	8001f42 <_free_r+0x1e>
 8001f66:	461a      	mov	r2, r3
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	b10b      	cbz	r3, 8001f70 <_free_r+0x4c>
 8001f6c:	42a3      	cmp	r3, r4
 8001f6e:	d9fa      	bls.n	8001f66 <_free_r+0x42>
 8001f70:	6811      	ldr	r1, [r2, #0]
 8001f72:	1850      	adds	r0, r2, r1
 8001f74:	42a0      	cmp	r0, r4
 8001f76:	d10b      	bne.n	8001f90 <_free_r+0x6c>
 8001f78:	6820      	ldr	r0, [r4, #0]
 8001f7a:	4401      	add	r1, r0
 8001f7c:	1850      	adds	r0, r2, r1
 8001f7e:	4283      	cmp	r3, r0
 8001f80:	6011      	str	r1, [r2, #0]
 8001f82:	d1e0      	bne.n	8001f46 <_free_r+0x22>
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4408      	add	r0, r1
 8001f8a:	6010      	str	r0, [r2, #0]
 8001f8c:	6053      	str	r3, [r2, #4]
 8001f8e:	e7da      	b.n	8001f46 <_free_r+0x22>
 8001f90:	d902      	bls.n	8001f98 <_free_r+0x74>
 8001f92:	230c      	movs	r3, #12
 8001f94:	602b      	str	r3, [r5, #0]
 8001f96:	e7d6      	b.n	8001f46 <_free_r+0x22>
 8001f98:	6820      	ldr	r0, [r4, #0]
 8001f9a:	1821      	adds	r1, r4, r0
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	bf01      	itttt	eq
 8001fa0:	6819      	ldreq	r1, [r3, #0]
 8001fa2:	685b      	ldreq	r3, [r3, #4]
 8001fa4:	1809      	addeq	r1, r1, r0
 8001fa6:	6021      	streq	r1, [r4, #0]
 8001fa8:	6063      	str	r3, [r4, #4]
 8001faa:	6054      	str	r4, [r2, #4]
 8001fac:	e7cb      	b.n	8001f46 <_free_r+0x22>
 8001fae:	bd38      	pop	{r3, r4, r5, pc}
 8001fb0:	2000021c 	.word	0x2000021c

08001fb4 <sbrk_aligned>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8001ff4 <sbrk_aligned+0x40>)
 8001fb8:	460c      	mov	r4, r1
 8001fba:	6831      	ldr	r1, [r6, #0]
 8001fbc:	4605      	mov	r5, r0
 8001fbe:	b911      	cbnz	r1, 8001fc6 <sbrk_aligned+0x12>
 8001fc0:	f000 fba8 	bl	8002714 <_sbrk_r>
 8001fc4:	6030      	str	r0, [r6, #0]
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	4628      	mov	r0, r5
 8001fca:	f000 fba3 	bl	8002714 <_sbrk_r>
 8001fce:	1c43      	adds	r3, r0, #1
 8001fd0:	d103      	bne.n	8001fda <sbrk_aligned+0x26>
 8001fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	bd70      	pop	{r4, r5, r6, pc}
 8001fda:	1cc4      	adds	r4, r0, #3
 8001fdc:	f024 0403 	bic.w	r4, r4, #3
 8001fe0:	42a0      	cmp	r0, r4
 8001fe2:	d0f8      	beq.n	8001fd6 <sbrk_aligned+0x22>
 8001fe4:	1a21      	subs	r1, r4, r0
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f000 fb94 	bl	8002714 <_sbrk_r>
 8001fec:	3001      	adds	r0, #1
 8001fee:	d1f2      	bne.n	8001fd6 <sbrk_aligned+0x22>
 8001ff0:	e7ef      	b.n	8001fd2 <sbrk_aligned+0x1e>
 8001ff2:	bf00      	nop
 8001ff4:	20000218 	.word	0x20000218

08001ff8 <_malloc_r>:
 8001ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ffc:	1ccd      	adds	r5, r1, #3
 8001ffe:	f025 0503 	bic.w	r5, r5, #3
 8002002:	3508      	adds	r5, #8
 8002004:	2d0c      	cmp	r5, #12
 8002006:	bf38      	it	cc
 8002008:	250c      	movcc	r5, #12
 800200a:	2d00      	cmp	r5, #0
 800200c:	4606      	mov	r6, r0
 800200e:	db01      	blt.n	8002014 <_malloc_r+0x1c>
 8002010:	42a9      	cmp	r1, r5
 8002012:	d904      	bls.n	800201e <_malloc_r+0x26>
 8002014:	230c      	movs	r3, #12
 8002016:	6033      	str	r3, [r6, #0]
 8002018:	2000      	movs	r0, #0
 800201a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800201e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80020f4 <_malloc_r+0xfc>
 8002022:	f000 f869 	bl	80020f8 <__malloc_lock>
 8002026:	f8d8 3000 	ldr.w	r3, [r8]
 800202a:	461c      	mov	r4, r3
 800202c:	bb44      	cbnz	r4, 8002080 <_malloc_r+0x88>
 800202e:	4629      	mov	r1, r5
 8002030:	4630      	mov	r0, r6
 8002032:	f7ff ffbf 	bl	8001fb4 <sbrk_aligned>
 8002036:	1c43      	adds	r3, r0, #1
 8002038:	4604      	mov	r4, r0
 800203a:	d158      	bne.n	80020ee <_malloc_r+0xf6>
 800203c:	f8d8 4000 	ldr.w	r4, [r8]
 8002040:	4627      	mov	r7, r4
 8002042:	2f00      	cmp	r7, #0
 8002044:	d143      	bne.n	80020ce <_malloc_r+0xd6>
 8002046:	2c00      	cmp	r4, #0
 8002048:	d04b      	beq.n	80020e2 <_malloc_r+0xea>
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	4639      	mov	r1, r7
 800204e:	4630      	mov	r0, r6
 8002050:	eb04 0903 	add.w	r9, r4, r3
 8002054:	f000 fb5e 	bl	8002714 <_sbrk_r>
 8002058:	4581      	cmp	r9, r0
 800205a:	d142      	bne.n	80020e2 <_malloc_r+0xea>
 800205c:	6821      	ldr	r1, [r4, #0]
 800205e:	4630      	mov	r0, r6
 8002060:	1a6d      	subs	r5, r5, r1
 8002062:	4629      	mov	r1, r5
 8002064:	f7ff ffa6 	bl	8001fb4 <sbrk_aligned>
 8002068:	3001      	adds	r0, #1
 800206a:	d03a      	beq.n	80020e2 <_malloc_r+0xea>
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	442b      	add	r3, r5
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	f8d8 3000 	ldr.w	r3, [r8]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	bb62      	cbnz	r2, 80020d4 <_malloc_r+0xdc>
 800207a:	f8c8 7000 	str.w	r7, [r8]
 800207e:	e00f      	b.n	80020a0 <_malloc_r+0xa8>
 8002080:	6822      	ldr	r2, [r4, #0]
 8002082:	1b52      	subs	r2, r2, r5
 8002084:	d420      	bmi.n	80020c8 <_malloc_r+0xd0>
 8002086:	2a0b      	cmp	r2, #11
 8002088:	d917      	bls.n	80020ba <_malloc_r+0xc2>
 800208a:	1961      	adds	r1, r4, r5
 800208c:	42a3      	cmp	r3, r4
 800208e:	6025      	str	r5, [r4, #0]
 8002090:	bf18      	it	ne
 8002092:	6059      	strne	r1, [r3, #4]
 8002094:	6863      	ldr	r3, [r4, #4]
 8002096:	bf08      	it	eq
 8002098:	f8c8 1000 	streq.w	r1, [r8]
 800209c:	5162      	str	r2, [r4, r5]
 800209e:	604b      	str	r3, [r1, #4]
 80020a0:	4630      	mov	r0, r6
 80020a2:	f000 f82f 	bl	8002104 <__malloc_unlock>
 80020a6:	f104 000b 	add.w	r0, r4, #11
 80020aa:	1d23      	adds	r3, r4, #4
 80020ac:	f020 0007 	bic.w	r0, r0, #7
 80020b0:	1ac2      	subs	r2, r0, r3
 80020b2:	bf1c      	itt	ne
 80020b4:	1a1b      	subne	r3, r3, r0
 80020b6:	50a3      	strne	r3, [r4, r2]
 80020b8:	e7af      	b.n	800201a <_malloc_r+0x22>
 80020ba:	6862      	ldr	r2, [r4, #4]
 80020bc:	42a3      	cmp	r3, r4
 80020be:	bf0c      	ite	eq
 80020c0:	f8c8 2000 	streq.w	r2, [r8]
 80020c4:	605a      	strne	r2, [r3, #4]
 80020c6:	e7eb      	b.n	80020a0 <_malloc_r+0xa8>
 80020c8:	4623      	mov	r3, r4
 80020ca:	6864      	ldr	r4, [r4, #4]
 80020cc:	e7ae      	b.n	800202c <_malloc_r+0x34>
 80020ce:	463c      	mov	r4, r7
 80020d0:	687f      	ldr	r7, [r7, #4]
 80020d2:	e7b6      	b.n	8002042 <_malloc_r+0x4a>
 80020d4:	461a      	mov	r2, r3
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	42a3      	cmp	r3, r4
 80020da:	d1fb      	bne.n	80020d4 <_malloc_r+0xdc>
 80020dc:	2300      	movs	r3, #0
 80020de:	6053      	str	r3, [r2, #4]
 80020e0:	e7de      	b.n	80020a0 <_malloc_r+0xa8>
 80020e2:	230c      	movs	r3, #12
 80020e4:	4630      	mov	r0, r6
 80020e6:	6033      	str	r3, [r6, #0]
 80020e8:	f000 f80c 	bl	8002104 <__malloc_unlock>
 80020ec:	e794      	b.n	8002018 <_malloc_r+0x20>
 80020ee:	6005      	str	r5, [r0, #0]
 80020f0:	e7d6      	b.n	80020a0 <_malloc_r+0xa8>
 80020f2:	bf00      	nop
 80020f4:	2000021c 	.word	0x2000021c

080020f8 <__malloc_lock>:
 80020f8:	4801      	ldr	r0, [pc, #4]	@ (8002100 <__malloc_lock+0x8>)
 80020fa:	f7ff bf11 	b.w	8001f20 <__retarget_lock_acquire_recursive>
 80020fe:	bf00      	nop
 8002100:	20000214 	.word	0x20000214

08002104 <__malloc_unlock>:
 8002104:	4801      	ldr	r0, [pc, #4]	@ (800210c <__malloc_unlock+0x8>)
 8002106:	f7ff bf0c 	b.w	8001f22 <__retarget_lock_release_recursive>
 800210a:	bf00      	nop
 800210c:	20000214 	.word	0x20000214

08002110 <__ssputs_r>:
 8002110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002114:	461f      	mov	r7, r3
 8002116:	688e      	ldr	r6, [r1, #8]
 8002118:	4682      	mov	sl, r0
 800211a:	42be      	cmp	r6, r7
 800211c:	460c      	mov	r4, r1
 800211e:	4690      	mov	r8, r2
 8002120:	680b      	ldr	r3, [r1, #0]
 8002122:	d82d      	bhi.n	8002180 <__ssputs_r+0x70>
 8002124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002128:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800212c:	d026      	beq.n	800217c <__ssputs_r+0x6c>
 800212e:	6965      	ldr	r5, [r4, #20]
 8002130:	6909      	ldr	r1, [r1, #16]
 8002132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002136:	eba3 0901 	sub.w	r9, r3, r1
 800213a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800213e:	1c7b      	adds	r3, r7, #1
 8002140:	444b      	add	r3, r9
 8002142:	106d      	asrs	r5, r5, #1
 8002144:	429d      	cmp	r5, r3
 8002146:	bf38      	it	cc
 8002148:	461d      	movcc	r5, r3
 800214a:	0553      	lsls	r3, r2, #21
 800214c:	d527      	bpl.n	800219e <__ssputs_r+0x8e>
 800214e:	4629      	mov	r1, r5
 8002150:	f7ff ff52 	bl	8001ff8 <_malloc_r>
 8002154:	4606      	mov	r6, r0
 8002156:	b360      	cbz	r0, 80021b2 <__ssputs_r+0xa2>
 8002158:	464a      	mov	r2, r9
 800215a:	6921      	ldr	r1, [r4, #16]
 800215c:	f000 faf8 	bl	8002750 <memcpy>
 8002160:	89a3      	ldrh	r3, [r4, #12]
 8002162:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800216a:	81a3      	strh	r3, [r4, #12]
 800216c:	6126      	str	r6, [r4, #16]
 800216e:	444e      	add	r6, r9
 8002170:	6026      	str	r6, [r4, #0]
 8002172:	463e      	mov	r6, r7
 8002174:	6165      	str	r5, [r4, #20]
 8002176:	eba5 0509 	sub.w	r5, r5, r9
 800217a:	60a5      	str	r5, [r4, #8]
 800217c:	42be      	cmp	r6, r7
 800217e:	d900      	bls.n	8002182 <__ssputs_r+0x72>
 8002180:	463e      	mov	r6, r7
 8002182:	4632      	mov	r2, r6
 8002184:	4641      	mov	r1, r8
 8002186:	6820      	ldr	r0, [r4, #0]
 8002188:	f000 faaa 	bl	80026e0 <memmove>
 800218c:	2000      	movs	r0, #0
 800218e:	68a3      	ldr	r3, [r4, #8]
 8002190:	1b9b      	subs	r3, r3, r6
 8002192:	60a3      	str	r3, [r4, #8]
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	4433      	add	r3, r6
 8002198:	6023      	str	r3, [r4, #0]
 800219a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800219e:	462a      	mov	r2, r5
 80021a0:	f000 fae4 	bl	800276c <_realloc_r>
 80021a4:	4606      	mov	r6, r0
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d1e0      	bne.n	800216c <__ssputs_r+0x5c>
 80021aa:	4650      	mov	r0, sl
 80021ac:	6921      	ldr	r1, [r4, #16]
 80021ae:	f7ff feb9 	bl	8001f24 <_free_r>
 80021b2:	230c      	movs	r3, #12
 80021b4:	f8ca 3000 	str.w	r3, [sl]
 80021b8:	89a3      	ldrh	r3, [r4, #12]
 80021ba:	f04f 30ff 	mov.w	r0, #4294967295
 80021be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021c2:	81a3      	strh	r3, [r4, #12]
 80021c4:	e7e9      	b.n	800219a <__ssputs_r+0x8a>
	...

080021c8 <_svfiprintf_r>:
 80021c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021cc:	4698      	mov	r8, r3
 80021ce:	898b      	ldrh	r3, [r1, #12]
 80021d0:	4607      	mov	r7, r0
 80021d2:	061b      	lsls	r3, r3, #24
 80021d4:	460d      	mov	r5, r1
 80021d6:	4614      	mov	r4, r2
 80021d8:	b09d      	sub	sp, #116	@ 0x74
 80021da:	d510      	bpl.n	80021fe <_svfiprintf_r+0x36>
 80021dc:	690b      	ldr	r3, [r1, #16]
 80021de:	b973      	cbnz	r3, 80021fe <_svfiprintf_r+0x36>
 80021e0:	2140      	movs	r1, #64	@ 0x40
 80021e2:	f7ff ff09 	bl	8001ff8 <_malloc_r>
 80021e6:	6028      	str	r0, [r5, #0]
 80021e8:	6128      	str	r0, [r5, #16]
 80021ea:	b930      	cbnz	r0, 80021fa <_svfiprintf_r+0x32>
 80021ec:	230c      	movs	r3, #12
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	b01d      	add	sp, #116	@ 0x74
 80021f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021fa:	2340      	movs	r3, #64	@ 0x40
 80021fc:	616b      	str	r3, [r5, #20]
 80021fe:	2300      	movs	r3, #0
 8002200:	9309      	str	r3, [sp, #36]	@ 0x24
 8002202:	2320      	movs	r3, #32
 8002204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002208:	2330      	movs	r3, #48	@ 0x30
 800220a:	f04f 0901 	mov.w	r9, #1
 800220e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002212:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80023ac <_svfiprintf_r+0x1e4>
 8002216:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800221a:	4623      	mov	r3, r4
 800221c:	469a      	mov	sl, r3
 800221e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002222:	b10a      	cbz	r2, 8002228 <_svfiprintf_r+0x60>
 8002224:	2a25      	cmp	r2, #37	@ 0x25
 8002226:	d1f9      	bne.n	800221c <_svfiprintf_r+0x54>
 8002228:	ebba 0b04 	subs.w	fp, sl, r4
 800222c:	d00b      	beq.n	8002246 <_svfiprintf_r+0x7e>
 800222e:	465b      	mov	r3, fp
 8002230:	4622      	mov	r2, r4
 8002232:	4629      	mov	r1, r5
 8002234:	4638      	mov	r0, r7
 8002236:	f7ff ff6b 	bl	8002110 <__ssputs_r>
 800223a:	3001      	adds	r0, #1
 800223c:	f000 80a7 	beq.w	800238e <_svfiprintf_r+0x1c6>
 8002240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002242:	445a      	add	r2, fp
 8002244:	9209      	str	r2, [sp, #36]	@ 0x24
 8002246:	f89a 3000 	ldrb.w	r3, [sl]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 809f 	beq.w	800238e <_svfiprintf_r+0x1c6>
 8002250:	2300      	movs	r3, #0
 8002252:	f04f 32ff 	mov.w	r2, #4294967295
 8002256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800225a:	f10a 0a01 	add.w	sl, sl, #1
 800225e:	9304      	str	r3, [sp, #16]
 8002260:	9307      	str	r3, [sp, #28]
 8002262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002266:	931a      	str	r3, [sp, #104]	@ 0x68
 8002268:	4654      	mov	r4, sl
 800226a:	2205      	movs	r2, #5
 800226c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002270:	484e      	ldr	r0, [pc, #312]	@ (80023ac <_svfiprintf_r+0x1e4>)
 8002272:	f000 fa5f 	bl	8002734 <memchr>
 8002276:	9a04      	ldr	r2, [sp, #16]
 8002278:	b9d8      	cbnz	r0, 80022b2 <_svfiprintf_r+0xea>
 800227a:	06d0      	lsls	r0, r2, #27
 800227c:	bf44      	itt	mi
 800227e:	2320      	movmi	r3, #32
 8002280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002284:	0711      	lsls	r1, r2, #28
 8002286:	bf44      	itt	mi
 8002288:	232b      	movmi	r3, #43	@ 0x2b
 800228a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800228e:	f89a 3000 	ldrb.w	r3, [sl]
 8002292:	2b2a      	cmp	r3, #42	@ 0x2a
 8002294:	d015      	beq.n	80022c2 <_svfiprintf_r+0xfa>
 8002296:	4654      	mov	r4, sl
 8002298:	2000      	movs	r0, #0
 800229a:	f04f 0c0a 	mov.w	ip, #10
 800229e:	9a07      	ldr	r2, [sp, #28]
 80022a0:	4621      	mov	r1, r4
 80022a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022a6:	3b30      	subs	r3, #48	@ 0x30
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	d94b      	bls.n	8002344 <_svfiprintf_r+0x17c>
 80022ac:	b1b0      	cbz	r0, 80022dc <_svfiprintf_r+0x114>
 80022ae:	9207      	str	r2, [sp, #28]
 80022b0:	e014      	b.n	80022dc <_svfiprintf_r+0x114>
 80022b2:	eba0 0308 	sub.w	r3, r0, r8
 80022b6:	fa09 f303 	lsl.w	r3, r9, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	46a2      	mov	sl, r4
 80022be:	9304      	str	r3, [sp, #16]
 80022c0:	e7d2      	b.n	8002268 <_svfiprintf_r+0xa0>
 80022c2:	9b03      	ldr	r3, [sp, #12]
 80022c4:	1d19      	adds	r1, r3, #4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	9103      	str	r1, [sp, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bfbb      	ittet	lt
 80022ce:	425b      	neglt	r3, r3
 80022d0:	f042 0202 	orrlt.w	r2, r2, #2
 80022d4:	9307      	strge	r3, [sp, #28]
 80022d6:	9307      	strlt	r3, [sp, #28]
 80022d8:	bfb8      	it	lt
 80022da:	9204      	strlt	r2, [sp, #16]
 80022dc:	7823      	ldrb	r3, [r4, #0]
 80022de:	2b2e      	cmp	r3, #46	@ 0x2e
 80022e0:	d10a      	bne.n	80022f8 <_svfiprintf_r+0x130>
 80022e2:	7863      	ldrb	r3, [r4, #1]
 80022e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80022e6:	d132      	bne.n	800234e <_svfiprintf_r+0x186>
 80022e8:	9b03      	ldr	r3, [sp, #12]
 80022ea:	3402      	adds	r4, #2
 80022ec:	1d1a      	adds	r2, r3, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	9203      	str	r2, [sp, #12]
 80022f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80022f6:	9305      	str	r3, [sp, #20]
 80022f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80023b0 <_svfiprintf_r+0x1e8>
 80022fc:	2203      	movs	r2, #3
 80022fe:	4650      	mov	r0, sl
 8002300:	7821      	ldrb	r1, [r4, #0]
 8002302:	f000 fa17 	bl	8002734 <memchr>
 8002306:	b138      	cbz	r0, 8002318 <_svfiprintf_r+0x150>
 8002308:	2240      	movs	r2, #64	@ 0x40
 800230a:	9b04      	ldr	r3, [sp, #16]
 800230c:	eba0 000a 	sub.w	r0, r0, sl
 8002310:	4082      	lsls	r2, r0
 8002312:	4313      	orrs	r3, r2
 8002314:	3401      	adds	r4, #1
 8002316:	9304      	str	r3, [sp, #16]
 8002318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800231c:	2206      	movs	r2, #6
 800231e:	4825      	ldr	r0, [pc, #148]	@ (80023b4 <_svfiprintf_r+0x1ec>)
 8002320:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002324:	f000 fa06 	bl	8002734 <memchr>
 8002328:	2800      	cmp	r0, #0
 800232a:	d036      	beq.n	800239a <_svfiprintf_r+0x1d2>
 800232c:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <_svfiprintf_r+0x1f0>)
 800232e:	bb1b      	cbnz	r3, 8002378 <_svfiprintf_r+0x1b0>
 8002330:	9b03      	ldr	r3, [sp, #12]
 8002332:	3307      	adds	r3, #7
 8002334:	f023 0307 	bic.w	r3, r3, #7
 8002338:	3308      	adds	r3, #8
 800233a:	9303      	str	r3, [sp, #12]
 800233c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800233e:	4433      	add	r3, r6
 8002340:	9309      	str	r3, [sp, #36]	@ 0x24
 8002342:	e76a      	b.n	800221a <_svfiprintf_r+0x52>
 8002344:	460c      	mov	r4, r1
 8002346:	2001      	movs	r0, #1
 8002348:	fb0c 3202 	mla	r2, ip, r2, r3
 800234c:	e7a8      	b.n	80022a0 <_svfiprintf_r+0xd8>
 800234e:	2300      	movs	r3, #0
 8002350:	f04f 0c0a 	mov.w	ip, #10
 8002354:	4619      	mov	r1, r3
 8002356:	3401      	adds	r4, #1
 8002358:	9305      	str	r3, [sp, #20]
 800235a:	4620      	mov	r0, r4
 800235c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002360:	3a30      	subs	r2, #48	@ 0x30
 8002362:	2a09      	cmp	r2, #9
 8002364:	d903      	bls.n	800236e <_svfiprintf_r+0x1a6>
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0c6      	beq.n	80022f8 <_svfiprintf_r+0x130>
 800236a:	9105      	str	r1, [sp, #20]
 800236c:	e7c4      	b.n	80022f8 <_svfiprintf_r+0x130>
 800236e:	4604      	mov	r4, r0
 8002370:	2301      	movs	r3, #1
 8002372:	fb0c 2101 	mla	r1, ip, r1, r2
 8002376:	e7f0      	b.n	800235a <_svfiprintf_r+0x192>
 8002378:	ab03      	add	r3, sp, #12
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	462a      	mov	r2, r5
 800237e:	4638      	mov	r0, r7
 8002380:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <_svfiprintf_r+0x1f4>)
 8002382:	a904      	add	r1, sp, #16
 8002384:	f3af 8000 	nop.w
 8002388:	1c42      	adds	r2, r0, #1
 800238a:	4606      	mov	r6, r0
 800238c:	d1d6      	bne.n	800233c <_svfiprintf_r+0x174>
 800238e:	89ab      	ldrh	r3, [r5, #12]
 8002390:	065b      	lsls	r3, r3, #25
 8002392:	f53f af2d 	bmi.w	80021f0 <_svfiprintf_r+0x28>
 8002396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002398:	e72c      	b.n	80021f4 <_svfiprintf_r+0x2c>
 800239a:	ab03      	add	r3, sp, #12
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	462a      	mov	r2, r5
 80023a0:	4638      	mov	r0, r7
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <_svfiprintf_r+0x1f4>)
 80023a4:	a904      	add	r1, sp, #16
 80023a6:	f000 f87d 	bl	80024a4 <_printf_i>
 80023aa:	e7ed      	b.n	8002388 <_svfiprintf_r+0x1c0>
 80023ac:	0800282e 	.word	0x0800282e
 80023b0:	08002834 	.word	0x08002834
 80023b4:	08002838 	.word	0x08002838
 80023b8:	00000000 	.word	0x00000000
 80023bc:	08002111 	.word	0x08002111

080023c0 <_printf_common>:
 80023c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023c4:	4616      	mov	r6, r2
 80023c6:	4698      	mov	r8, r3
 80023c8:	688a      	ldr	r2, [r1, #8]
 80023ca:	690b      	ldr	r3, [r1, #16]
 80023cc:	4607      	mov	r7, r0
 80023ce:	4293      	cmp	r3, r2
 80023d0:	bfb8      	it	lt
 80023d2:	4613      	movlt	r3, r2
 80023d4:	6033      	str	r3, [r6, #0]
 80023d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023da:	460c      	mov	r4, r1
 80023dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023e0:	b10a      	cbz	r2, 80023e6 <_printf_common+0x26>
 80023e2:	3301      	adds	r3, #1
 80023e4:	6033      	str	r3, [r6, #0]
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	0699      	lsls	r1, r3, #26
 80023ea:	bf42      	ittt	mi
 80023ec:	6833      	ldrmi	r3, [r6, #0]
 80023ee:	3302      	addmi	r3, #2
 80023f0:	6033      	strmi	r3, [r6, #0]
 80023f2:	6825      	ldr	r5, [r4, #0]
 80023f4:	f015 0506 	ands.w	r5, r5, #6
 80023f8:	d106      	bne.n	8002408 <_printf_common+0x48>
 80023fa:	f104 0a19 	add.w	sl, r4, #25
 80023fe:	68e3      	ldr	r3, [r4, #12]
 8002400:	6832      	ldr	r2, [r6, #0]
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	42ab      	cmp	r3, r5
 8002406:	dc2b      	bgt.n	8002460 <_printf_common+0xa0>
 8002408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800240c:	6822      	ldr	r2, [r4, #0]
 800240e:	3b00      	subs	r3, #0
 8002410:	bf18      	it	ne
 8002412:	2301      	movne	r3, #1
 8002414:	0692      	lsls	r2, r2, #26
 8002416:	d430      	bmi.n	800247a <_printf_common+0xba>
 8002418:	4641      	mov	r1, r8
 800241a:	4638      	mov	r0, r7
 800241c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002420:	47c8      	blx	r9
 8002422:	3001      	adds	r0, #1
 8002424:	d023      	beq.n	800246e <_printf_common+0xae>
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	6922      	ldr	r2, [r4, #16]
 800242a:	f003 0306 	and.w	r3, r3, #6
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf14      	ite	ne
 8002432:	2500      	movne	r5, #0
 8002434:	6833      	ldreq	r3, [r6, #0]
 8002436:	f04f 0600 	mov.w	r6, #0
 800243a:	bf08      	it	eq
 800243c:	68e5      	ldreq	r5, [r4, #12]
 800243e:	f104 041a 	add.w	r4, r4, #26
 8002442:	bf08      	it	eq
 8002444:	1aed      	subeq	r5, r5, r3
 8002446:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800244a:	bf08      	it	eq
 800244c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002450:	4293      	cmp	r3, r2
 8002452:	bfc4      	itt	gt
 8002454:	1a9b      	subgt	r3, r3, r2
 8002456:	18ed      	addgt	r5, r5, r3
 8002458:	42b5      	cmp	r5, r6
 800245a:	d11a      	bne.n	8002492 <_printf_common+0xd2>
 800245c:	2000      	movs	r0, #0
 800245e:	e008      	b.n	8002472 <_printf_common+0xb2>
 8002460:	2301      	movs	r3, #1
 8002462:	4652      	mov	r2, sl
 8002464:	4641      	mov	r1, r8
 8002466:	4638      	mov	r0, r7
 8002468:	47c8      	blx	r9
 800246a:	3001      	adds	r0, #1
 800246c:	d103      	bne.n	8002476 <_printf_common+0xb6>
 800246e:	f04f 30ff 	mov.w	r0, #4294967295
 8002472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002476:	3501      	adds	r5, #1
 8002478:	e7c1      	b.n	80023fe <_printf_common+0x3e>
 800247a:	2030      	movs	r0, #48	@ 0x30
 800247c:	18e1      	adds	r1, r4, r3
 800247e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002488:	4422      	add	r2, r4
 800248a:	3302      	adds	r3, #2
 800248c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002490:	e7c2      	b.n	8002418 <_printf_common+0x58>
 8002492:	2301      	movs	r3, #1
 8002494:	4622      	mov	r2, r4
 8002496:	4641      	mov	r1, r8
 8002498:	4638      	mov	r0, r7
 800249a:	47c8      	blx	r9
 800249c:	3001      	adds	r0, #1
 800249e:	d0e6      	beq.n	800246e <_printf_common+0xae>
 80024a0:	3601      	adds	r6, #1
 80024a2:	e7d9      	b.n	8002458 <_printf_common+0x98>

080024a4 <_printf_i>:
 80024a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024a8:	7e0f      	ldrb	r7, [r1, #24]
 80024aa:	4691      	mov	r9, r2
 80024ac:	2f78      	cmp	r7, #120	@ 0x78
 80024ae:	4680      	mov	r8, r0
 80024b0:	460c      	mov	r4, r1
 80024b2:	469a      	mov	sl, r3
 80024b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80024b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024ba:	d807      	bhi.n	80024cc <_printf_i+0x28>
 80024bc:	2f62      	cmp	r7, #98	@ 0x62
 80024be:	d80a      	bhi.n	80024d6 <_printf_i+0x32>
 80024c0:	2f00      	cmp	r7, #0
 80024c2:	f000 80d1 	beq.w	8002668 <_printf_i+0x1c4>
 80024c6:	2f58      	cmp	r7, #88	@ 0x58
 80024c8:	f000 80b8 	beq.w	800263c <_printf_i+0x198>
 80024cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024d4:	e03a      	b.n	800254c <_printf_i+0xa8>
 80024d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80024da:	2b15      	cmp	r3, #21
 80024dc:	d8f6      	bhi.n	80024cc <_printf_i+0x28>
 80024de:	a101      	add	r1, pc, #4	@ (adr r1, 80024e4 <_printf_i+0x40>)
 80024e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024e4:	0800253d 	.word	0x0800253d
 80024e8:	08002551 	.word	0x08002551
 80024ec:	080024cd 	.word	0x080024cd
 80024f0:	080024cd 	.word	0x080024cd
 80024f4:	080024cd 	.word	0x080024cd
 80024f8:	080024cd 	.word	0x080024cd
 80024fc:	08002551 	.word	0x08002551
 8002500:	080024cd 	.word	0x080024cd
 8002504:	080024cd 	.word	0x080024cd
 8002508:	080024cd 	.word	0x080024cd
 800250c:	080024cd 	.word	0x080024cd
 8002510:	0800264f 	.word	0x0800264f
 8002514:	0800257b 	.word	0x0800257b
 8002518:	08002609 	.word	0x08002609
 800251c:	080024cd 	.word	0x080024cd
 8002520:	080024cd 	.word	0x080024cd
 8002524:	08002671 	.word	0x08002671
 8002528:	080024cd 	.word	0x080024cd
 800252c:	0800257b 	.word	0x0800257b
 8002530:	080024cd 	.word	0x080024cd
 8002534:	080024cd 	.word	0x080024cd
 8002538:	08002611 	.word	0x08002611
 800253c:	6833      	ldr	r3, [r6, #0]
 800253e:	1d1a      	adds	r2, r3, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6032      	str	r2, [r6, #0]
 8002544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800254c:	2301      	movs	r3, #1
 800254e:	e09c      	b.n	800268a <_printf_i+0x1e6>
 8002550:	6833      	ldr	r3, [r6, #0]
 8002552:	6820      	ldr	r0, [r4, #0]
 8002554:	1d19      	adds	r1, r3, #4
 8002556:	6031      	str	r1, [r6, #0]
 8002558:	0606      	lsls	r6, r0, #24
 800255a:	d501      	bpl.n	8002560 <_printf_i+0xbc>
 800255c:	681d      	ldr	r5, [r3, #0]
 800255e:	e003      	b.n	8002568 <_printf_i+0xc4>
 8002560:	0645      	lsls	r5, r0, #25
 8002562:	d5fb      	bpl.n	800255c <_printf_i+0xb8>
 8002564:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002568:	2d00      	cmp	r5, #0
 800256a:	da03      	bge.n	8002574 <_printf_i+0xd0>
 800256c:	232d      	movs	r3, #45	@ 0x2d
 800256e:	426d      	negs	r5, r5
 8002570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002574:	230a      	movs	r3, #10
 8002576:	4858      	ldr	r0, [pc, #352]	@ (80026d8 <_printf_i+0x234>)
 8002578:	e011      	b.n	800259e <_printf_i+0xfa>
 800257a:	6821      	ldr	r1, [r4, #0]
 800257c:	6833      	ldr	r3, [r6, #0]
 800257e:	0608      	lsls	r0, r1, #24
 8002580:	f853 5b04 	ldr.w	r5, [r3], #4
 8002584:	d402      	bmi.n	800258c <_printf_i+0xe8>
 8002586:	0649      	lsls	r1, r1, #25
 8002588:	bf48      	it	mi
 800258a:	b2ad      	uxthmi	r5, r5
 800258c:	2f6f      	cmp	r7, #111	@ 0x6f
 800258e:	6033      	str	r3, [r6, #0]
 8002590:	bf14      	ite	ne
 8002592:	230a      	movne	r3, #10
 8002594:	2308      	moveq	r3, #8
 8002596:	4850      	ldr	r0, [pc, #320]	@ (80026d8 <_printf_i+0x234>)
 8002598:	2100      	movs	r1, #0
 800259a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800259e:	6866      	ldr	r6, [r4, #4]
 80025a0:	2e00      	cmp	r6, #0
 80025a2:	60a6      	str	r6, [r4, #8]
 80025a4:	db05      	blt.n	80025b2 <_printf_i+0x10e>
 80025a6:	6821      	ldr	r1, [r4, #0]
 80025a8:	432e      	orrs	r6, r5
 80025aa:	f021 0104 	bic.w	r1, r1, #4
 80025ae:	6021      	str	r1, [r4, #0]
 80025b0:	d04b      	beq.n	800264a <_printf_i+0x1a6>
 80025b2:	4616      	mov	r6, r2
 80025b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80025b8:	fb03 5711 	mls	r7, r3, r1, r5
 80025bc:	5dc7      	ldrb	r7, [r0, r7]
 80025be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025c2:	462f      	mov	r7, r5
 80025c4:	42bb      	cmp	r3, r7
 80025c6:	460d      	mov	r5, r1
 80025c8:	d9f4      	bls.n	80025b4 <_printf_i+0x110>
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d10b      	bne.n	80025e6 <_printf_i+0x142>
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	07df      	lsls	r7, r3, #31
 80025d2:	d508      	bpl.n	80025e6 <_printf_i+0x142>
 80025d4:	6923      	ldr	r3, [r4, #16]
 80025d6:	6861      	ldr	r1, [r4, #4]
 80025d8:	4299      	cmp	r1, r3
 80025da:	bfde      	ittt	le
 80025dc:	2330      	movle	r3, #48	@ 0x30
 80025de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025e6:	1b92      	subs	r2, r2, r6
 80025e8:	6122      	str	r2, [r4, #16]
 80025ea:	464b      	mov	r3, r9
 80025ec:	4621      	mov	r1, r4
 80025ee:	4640      	mov	r0, r8
 80025f0:	f8cd a000 	str.w	sl, [sp]
 80025f4:	aa03      	add	r2, sp, #12
 80025f6:	f7ff fee3 	bl	80023c0 <_printf_common>
 80025fa:	3001      	adds	r0, #1
 80025fc:	d14a      	bne.n	8002694 <_printf_i+0x1f0>
 80025fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002602:	b004      	add	sp, #16
 8002604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	f043 0320 	orr.w	r3, r3, #32
 800260e:	6023      	str	r3, [r4, #0]
 8002610:	2778      	movs	r7, #120	@ 0x78
 8002612:	4832      	ldr	r0, [pc, #200]	@ (80026dc <_printf_i+0x238>)
 8002614:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	6831      	ldr	r1, [r6, #0]
 800261c:	061f      	lsls	r7, r3, #24
 800261e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002622:	d402      	bmi.n	800262a <_printf_i+0x186>
 8002624:	065f      	lsls	r7, r3, #25
 8002626:	bf48      	it	mi
 8002628:	b2ad      	uxthmi	r5, r5
 800262a:	6031      	str	r1, [r6, #0]
 800262c:	07d9      	lsls	r1, r3, #31
 800262e:	bf44      	itt	mi
 8002630:	f043 0320 	orrmi.w	r3, r3, #32
 8002634:	6023      	strmi	r3, [r4, #0]
 8002636:	b11d      	cbz	r5, 8002640 <_printf_i+0x19c>
 8002638:	2310      	movs	r3, #16
 800263a:	e7ad      	b.n	8002598 <_printf_i+0xf4>
 800263c:	4826      	ldr	r0, [pc, #152]	@ (80026d8 <_printf_i+0x234>)
 800263e:	e7e9      	b.n	8002614 <_printf_i+0x170>
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	f023 0320 	bic.w	r3, r3, #32
 8002646:	6023      	str	r3, [r4, #0]
 8002648:	e7f6      	b.n	8002638 <_printf_i+0x194>
 800264a:	4616      	mov	r6, r2
 800264c:	e7bd      	b.n	80025ca <_printf_i+0x126>
 800264e:	6833      	ldr	r3, [r6, #0]
 8002650:	6825      	ldr	r5, [r4, #0]
 8002652:	1d18      	adds	r0, r3, #4
 8002654:	6961      	ldr	r1, [r4, #20]
 8002656:	6030      	str	r0, [r6, #0]
 8002658:	062e      	lsls	r6, r5, #24
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	d501      	bpl.n	8002662 <_printf_i+0x1be>
 800265e:	6019      	str	r1, [r3, #0]
 8002660:	e002      	b.n	8002668 <_printf_i+0x1c4>
 8002662:	0668      	lsls	r0, r5, #25
 8002664:	d5fb      	bpl.n	800265e <_printf_i+0x1ba>
 8002666:	8019      	strh	r1, [r3, #0]
 8002668:	2300      	movs	r3, #0
 800266a:	4616      	mov	r6, r2
 800266c:	6123      	str	r3, [r4, #16]
 800266e:	e7bc      	b.n	80025ea <_printf_i+0x146>
 8002670:	6833      	ldr	r3, [r6, #0]
 8002672:	2100      	movs	r1, #0
 8002674:	1d1a      	adds	r2, r3, #4
 8002676:	6032      	str	r2, [r6, #0]
 8002678:	681e      	ldr	r6, [r3, #0]
 800267a:	6862      	ldr	r2, [r4, #4]
 800267c:	4630      	mov	r0, r6
 800267e:	f000 f859 	bl	8002734 <memchr>
 8002682:	b108      	cbz	r0, 8002688 <_printf_i+0x1e4>
 8002684:	1b80      	subs	r0, r0, r6
 8002686:	6060      	str	r0, [r4, #4]
 8002688:	6863      	ldr	r3, [r4, #4]
 800268a:	6123      	str	r3, [r4, #16]
 800268c:	2300      	movs	r3, #0
 800268e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002692:	e7aa      	b.n	80025ea <_printf_i+0x146>
 8002694:	4632      	mov	r2, r6
 8002696:	4649      	mov	r1, r9
 8002698:	4640      	mov	r0, r8
 800269a:	6923      	ldr	r3, [r4, #16]
 800269c:	47d0      	blx	sl
 800269e:	3001      	adds	r0, #1
 80026a0:	d0ad      	beq.n	80025fe <_printf_i+0x15a>
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	079b      	lsls	r3, r3, #30
 80026a6:	d413      	bmi.n	80026d0 <_printf_i+0x22c>
 80026a8:	68e0      	ldr	r0, [r4, #12]
 80026aa:	9b03      	ldr	r3, [sp, #12]
 80026ac:	4298      	cmp	r0, r3
 80026ae:	bfb8      	it	lt
 80026b0:	4618      	movlt	r0, r3
 80026b2:	e7a6      	b.n	8002602 <_printf_i+0x15e>
 80026b4:	2301      	movs	r3, #1
 80026b6:	4632      	mov	r2, r6
 80026b8:	4649      	mov	r1, r9
 80026ba:	4640      	mov	r0, r8
 80026bc:	47d0      	blx	sl
 80026be:	3001      	adds	r0, #1
 80026c0:	d09d      	beq.n	80025fe <_printf_i+0x15a>
 80026c2:	3501      	adds	r5, #1
 80026c4:	68e3      	ldr	r3, [r4, #12]
 80026c6:	9903      	ldr	r1, [sp, #12]
 80026c8:	1a5b      	subs	r3, r3, r1
 80026ca:	42ab      	cmp	r3, r5
 80026cc:	dcf2      	bgt.n	80026b4 <_printf_i+0x210>
 80026ce:	e7eb      	b.n	80026a8 <_printf_i+0x204>
 80026d0:	2500      	movs	r5, #0
 80026d2:	f104 0619 	add.w	r6, r4, #25
 80026d6:	e7f5      	b.n	80026c4 <_printf_i+0x220>
 80026d8:	0800283f 	.word	0x0800283f
 80026dc:	08002850 	.word	0x08002850

080026e0 <memmove>:
 80026e0:	4288      	cmp	r0, r1
 80026e2:	b510      	push	{r4, lr}
 80026e4:	eb01 0402 	add.w	r4, r1, r2
 80026e8:	d902      	bls.n	80026f0 <memmove+0x10>
 80026ea:	4284      	cmp	r4, r0
 80026ec:	4623      	mov	r3, r4
 80026ee:	d807      	bhi.n	8002700 <memmove+0x20>
 80026f0:	1e43      	subs	r3, r0, #1
 80026f2:	42a1      	cmp	r1, r4
 80026f4:	d008      	beq.n	8002708 <memmove+0x28>
 80026f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026fe:	e7f8      	b.n	80026f2 <memmove+0x12>
 8002700:	4601      	mov	r1, r0
 8002702:	4402      	add	r2, r0
 8002704:	428a      	cmp	r2, r1
 8002706:	d100      	bne.n	800270a <memmove+0x2a>
 8002708:	bd10      	pop	{r4, pc}
 800270a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800270e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002712:	e7f7      	b.n	8002704 <memmove+0x24>

08002714 <_sbrk_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	2300      	movs	r3, #0
 8002718:	4d05      	ldr	r5, [pc, #20]	@ (8002730 <_sbrk_r+0x1c>)
 800271a:	4604      	mov	r4, r0
 800271c:	4608      	mov	r0, r1
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	f7fe f82e 	bl	8000780 <_sbrk>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	d102      	bne.n	800272e <_sbrk_r+0x1a>
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	b103      	cbz	r3, 800272e <_sbrk_r+0x1a>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	20000210 	.word	0x20000210

08002734 <memchr>:
 8002734:	4603      	mov	r3, r0
 8002736:	b510      	push	{r4, lr}
 8002738:	b2c9      	uxtb	r1, r1
 800273a:	4402      	add	r2, r0
 800273c:	4293      	cmp	r3, r2
 800273e:	4618      	mov	r0, r3
 8002740:	d101      	bne.n	8002746 <memchr+0x12>
 8002742:	2000      	movs	r0, #0
 8002744:	e003      	b.n	800274e <memchr+0x1a>
 8002746:	7804      	ldrb	r4, [r0, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	428c      	cmp	r4, r1
 800274c:	d1f6      	bne.n	800273c <memchr+0x8>
 800274e:	bd10      	pop	{r4, pc}

08002750 <memcpy>:
 8002750:	440a      	add	r2, r1
 8002752:	4291      	cmp	r1, r2
 8002754:	f100 33ff 	add.w	r3, r0, #4294967295
 8002758:	d100      	bne.n	800275c <memcpy+0xc>
 800275a:	4770      	bx	lr
 800275c:	b510      	push	{r4, lr}
 800275e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002762:	4291      	cmp	r1, r2
 8002764:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002768:	d1f9      	bne.n	800275e <memcpy+0xe>
 800276a:	bd10      	pop	{r4, pc}

0800276c <_realloc_r>:
 800276c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002770:	4607      	mov	r7, r0
 8002772:	4614      	mov	r4, r2
 8002774:	460d      	mov	r5, r1
 8002776:	b921      	cbnz	r1, 8002782 <_realloc_r+0x16>
 8002778:	4611      	mov	r1, r2
 800277a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800277e:	f7ff bc3b 	b.w	8001ff8 <_malloc_r>
 8002782:	b92a      	cbnz	r2, 8002790 <_realloc_r+0x24>
 8002784:	f7ff fbce 	bl	8001f24 <_free_r>
 8002788:	4625      	mov	r5, r4
 800278a:	4628      	mov	r0, r5
 800278c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002790:	f000 f81a 	bl	80027c8 <_malloc_usable_size_r>
 8002794:	4284      	cmp	r4, r0
 8002796:	4606      	mov	r6, r0
 8002798:	d802      	bhi.n	80027a0 <_realloc_r+0x34>
 800279a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800279e:	d8f4      	bhi.n	800278a <_realloc_r+0x1e>
 80027a0:	4621      	mov	r1, r4
 80027a2:	4638      	mov	r0, r7
 80027a4:	f7ff fc28 	bl	8001ff8 <_malloc_r>
 80027a8:	4680      	mov	r8, r0
 80027aa:	b908      	cbnz	r0, 80027b0 <_realloc_r+0x44>
 80027ac:	4645      	mov	r5, r8
 80027ae:	e7ec      	b.n	800278a <_realloc_r+0x1e>
 80027b0:	42b4      	cmp	r4, r6
 80027b2:	4622      	mov	r2, r4
 80027b4:	4629      	mov	r1, r5
 80027b6:	bf28      	it	cs
 80027b8:	4632      	movcs	r2, r6
 80027ba:	f7ff ffc9 	bl	8002750 <memcpy>
 80027be:	4629      	mov	r1, r5
 80027c0:	4638      	mov	r0, r7
 80027c2:	f7ff fbaf 	bl	8001f24 <_free_r>
 80027c6:	e7f1      	b.n	80027ac <_realloc_r+0x40>

080027c8 <_malloc_usable_size_r>:
 80027c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027cc:	1f18      	subs	r0, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bfbc      	itt	lt
 80027d2:	580b      	ldrlt	r3, [r1, r0]
 80027d4:	18c0      	addlt	r0, r0, r3
 80027d6:	4770      	bx	lr

080027d8 <_init>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	bf00      	nop
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr

080027e4 <_fini>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	bf00      	nop
 80027e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ea:	bc08      	pop	{r3}
 80027ec:	469e      	mov	lr, r3
 80027ee:	4770      	bx	lr
