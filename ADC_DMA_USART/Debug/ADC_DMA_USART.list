
ADC_DMA_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000319c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080032a8  080032a8  000042a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800332c  0800332c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800332c  0800332c  0000432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003334  08003334  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003334  08003334  00004334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003338  08003338  00004338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800333c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  08003398  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08003398  00005318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fb5  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca6  00000000  00000000  0000e03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0000fce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000660  00000000  00000000  00010538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001795e  00000000  00000000  00010b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acd5  00000000  00000000  000284f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874d7  00000000  00000000  000331cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba6a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b8  00000000  00000000  000ba6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000bcca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003290 	.word	0x08003290

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003290 	.word	0x08003290

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fac5 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f847 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f91b 	bl	80003a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 f8fb 	bl	8000368 <MX_DMA_Init>
  MX_ADC1_Init();
 8000172:	f000 f891 	bl	8000298 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f8cd 	bl	8000314 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 800017a:	481a      	ldr	r0, [pc, #104]	@ (80001e4 <main+0x88>)
 800017c:	f000 ff0a 	bl	8000f94 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000180:	2240      	movs	r2, #64	@ 0x40
 8000182:	4919      	ldr	r1, [pc, #100]	@ (80001e8 <main+0x8c>)
 8000184:	4817      	ldr	r0, [pc, #92]	@ (80001e4 <main+0x88>)
 8000186:	f000 fc11 	bl	80009ac <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Calcula a m√©dia das amostras
	  uint32_t sum = 0;
 800018a:	2300      	movs	r3, #0
 800018c:	60fb      	str	r3, [r7, #12]

	  for (int i=0;i<ADC_BUFFER_SIZE;i++)
 800018e:	2300      	movs	r3, #0
 8000190:	60bb      	str	r3, [r7, #8]
 8000192:	e00a      	b.n	80001aa <main+0x4e>
	  {
		  sum += adc_buffer[i];
 8000194:	4a14      	ldr	r2, [pc, #80]	@ (80001e8 <main+0x8c>)
 8000196:	68bb      	ldr	r3, [r7, #8]
 8000198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800019c:	461a      	mov	r2, r3
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	4413      	add	r3, r2
 80001a2:	60fb      	str	r3, [r7, #12]
	  for (int i=0;i<ADC_BUFFER_SIZE;i++)
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	3301      	adds	r3, #1
 80001a8:	60bb      	str	r3, [r7, #8]
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80001ae:	ddf1      	ble.n	8000194 <main+0x38>
	  }

	  uint16_t average = sum / ADC_BUFFER_SIZE;
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	099b      	lsrs	r3, r3, #6
 80001b4:	80fb      	strh	r3, [r7, #6]

	  sprintf(strBuffer, "media = %4u\r\n", average);
 80001b6:	88fb      	ldrh	r3, [r7, #6]
 80001b8:	461a      	mov	r2, r3
 80001ba:	490c      	ldr	r1, [pc, #48]	@ (80001ec <main+0x90>)
 80001bc:	480c      	ldr	r0, [pc, #48]	@ (80001f0 <main+0x94>)
 80001be:	f002 fbb7 	bl	8002930 <siprintf>

	  HAL_UART_Transmit(&huart1, (uint8_t*)strBuffer, strlen(strBuffer), 500);
 80001c2:	480b      	ldr	r0, [pc, #44]	@ (80001f0 <main+0x94>)
 80001c4:	f7ff ffc2 	bl	800014c <strlen>
 80001c8:	4603      	mov	r3, r0
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80001d0:	4907      	ldr	r1, [pc, #28]	@ (80001f0 <main+0x94>)
 80001d2:	4808      	ldr	r0, [pc, #32]	@ (80001f4 <main+0x98>)
 80001d4:	f002 f9d8 	bl	8002588 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80001d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001dc:	f000 faea 	bl	80007b4 <HAL_Delay>
  {
 80001e0:	e7d3      	b.n	800018a <main+0x2e>
 80001e2:	bf00      	nop
 80001e4:	20000078 	.word	0x20000078
 80001e8:	20000134 	.word	0x20000134
 80001ec:	080032a8 	.word	0x080032a8
 80001f0:	200001b4 	.word	0x200001b4
 80001f4:	200000ec 	.word	0x200000ec

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b094      	sub	sp, #80	@ 0x50
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000202:	2228      	movs	r2, #40	@ 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 fbb4 	bl	8002974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000232:	2300      	movs	r3, #0
 8000234:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fbd8 	bl	80019f0 <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000246:	f000 f8cf 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024a:	230f      	movs	r3, #15
 800024c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800024e:	2301      	movs	r3, #1
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	2100      	movs	r1, #0
 8000264:	4618      	mov	r0, r3
 8000266:	f001 fe45 	bl	8001ef4 <HAL_RCC_ClockConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000270:	f000 f8ba 	bl	80003e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000274:	2302      	movs	r3, #2
 8000276:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f001 ffc6 	bl	8002210 <HAL_RCCEx_PeriphCLKConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800028a:	f000 f8ad 	bl	80003e8 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3750      	adds	r7, #80	@ 0x50
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a8:	4b18      	ldr	r3, [pc, #96]	@ (800030c <MX_ADC1_Init+0x74>)
 80002aa:	4a19      	ldr	r2, [pc, #100]	@ (8000310 <MX_ADC1_Init+0x78>)
 80002ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ae:	4b17      	ldr	r3, [pc, #92]	@ (800030c <MX_ADC1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002b4:	4b15      	ldr	r3, [pc, #84]	@ (800030c <MX_ADC1_Init+0x74>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ba:	4b14      	ldr	r3, [pc, #80]	@ (800030c <MX_ADC1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <MX_ADC1_Init+0x74>)
 80002c2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c8:	4b10      	ldr	r3, [pc, #64]	@ (800030c <MX_ADC1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ce:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <MX_ADC1_Init+0x74>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002d4:	480d      	ldr	r0, [pc, #52]	@ (800030c <MX_ADC1_Init+0x74>)
 80002d6:	f000 fa91 	bl	80007fc <HAL_ADC_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002e0:	f000 f882 	bl	80003e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4619      	mov	r1, r3
 80002f4:	4805      	ldr	r0, [pc, #20]	@ (800030c <MX_ADC1_Init+0x74>)
 80002f6:	f000 fc53 	bl	8000ba0 <HAL_ADC_ConfigChannel>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000300:	f000 f872 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000078 	.word	0x20000078
 8000310:	40012400 	.word	0x40012400

08000314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000318:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <MX_USART1_UART_Init+0x4c>)
 800031a:	4a12      	ldr	r2, [pc, #72]	@ (8000364 <MX_USART1_UART_Init+0x50>)
 800031c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800031e:	4b10      	ldr	r3, [pc, #64]	@ (8000360 <MX_USART1_UART_Init+0x4c>)
 8000320:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000326:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800032c:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <MX_USART1_UART_Init+0x4c>)
 800032e:	2200      	movs	r2, #0
 8000330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000332:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000338:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <MX_USART1_UART_Init+0x4c>)
 800033a:	220c      	movs	r2, #12
 800033c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033e:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <MX_USART1_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <MX_USART1_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800034a:	4805      	ldr	r0, [pc, #20]	@ (8000360 <MX_USART1_UART_Init+0x4c>)
 800034c:	f002 f8cc 	bl	80024e8 <HAL_UART_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000356:	f000 f847 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	200000ec 	.word	0x200000ec
 8000364:	40013800 	.word	0x40013800

08000368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800036e:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <MX_DMA_Init+0x38>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a0b      	ldr	r2, [pc, #44]	@ (80003a0 <MX_DMA_Init+0x38>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <MX_DMA_Init+0x38>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000386:	2200      	movs	r2, #0
 8000388:	2100      	movs	r1, #0
 800038a:	200b      	movs	r0, #11
 800038c:	f000 ff87 	bl	800129e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000390:	200b      	movs	r0, #11
 8000392:	f000 ffa0 	bl	80012d6 <HAL_NVIC_EnableIRQ>

}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <MX_GPIO_Init+0x40>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	@ (80003e4 <MX_GPIO_Init+0x40>)
 80003b0:	f043 0320 	orr.w	r3, r3, #32
 80003b4:	6193      	str	r3, [r2, #24]
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <MX_GPIO_Init+0x40>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f003 0320 	and.w	r3, r3, #32
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <MX_GPIO_Init+0x40>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a07      	ldr	r2, [pc, #28]	@ (80003e4 <MX_GPIO_Init+0x40>)
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <MX_GPIO_Init+0x40>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0304 	and.w	r3, r3, #4
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <Error_Handler+0x8>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a14      	ldr	r2, [pc, #80]	@ (8000450 <HAL_MspInit+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b12      	ldr	r3, [pc, #72]	@ (8000450 <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <HAL_MspInit+0x5c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <HAL_MspInit+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	@ (8000454 <HAL_MspInit+0x60>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a28      	ldr	r2, [pc, #160]	@ (8000514 <HAL_ADC_MspInit+0xbc>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d149      	bne.n	800050c <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000478:	4b27      	ldr	r3, [pc, #156]	@ (8000518 <HAL_ADC_MspInit+0xc0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a26      	ldr	r2, [pc, #152]	@ (8000518 <HAL_ADC_MspInit+0xc0>)
 800047e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b24      	ldr	r3, [pc, #144]	@ (8000518 <HAL_ADC_MspInit+0xc0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b21      	ldr	r3, [pc, #132]	@ (8000518 <HAL_ADC_MspInit+0xc0>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a20      	ldr	r2, [pc, #128]	@ (8000518 <HAL_ADC_MspInit+0xc0>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b1e      	ldr	r3, [pc, #120]	@ (8000518 <HAL_ADC_MspInit+0xc0>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a8:	2301      	movs	r3, #1
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ac:	2303      	movs	r3, #3
 80004ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4819      	ldr	r0, [pc, #100]	@ (800051c <HAL_ADC_MspInit+0xc4>)
 80004b8:	f001 f916 	bl	80016e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004bc:	4b18      	ldr	r3, [pc, #96]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 80004be:	4a19      	ldr	r2, [pc, #100]	@ (8000524 <HAL_ADC_MspInit+0xcc>)
 80004c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004c2:	4b17      	ldr	r3, [pc, #92]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004c8:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80004ce:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 80004d0:	2280      	movs	r2, #128	@ 0x80
 80004d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004d4:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 80004d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004dc:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 80004de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 80004e6:	2220      	movs	r2, #32
 80004e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004f0:	480b      	ldr	r0, [pc, #44]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 80004f2:	f000 ff0b 	bl	800130c <HAL_DMA_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80004fc:	f7ff ff74 	bl	80003e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 8000504:	621a      	str	r2, [r3, #32]
 8000506:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <HAL_ADC_MspInit+0xc8>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800050c:	bf00      	nop
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40012400 	.word	0x40012400
 8000518:	40021000 	.word	0x40021000
 800051c:	40010800 	.word	0x40010800
 8000520:	200000a8 	.word	0x200000a8
 8000524:	40020008 	.word	0x40020008

08000528 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a1c      	ldr	r2, [pc, #112]	@ (80005b4 <HAL_UART_MspInit+0x8c>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d131      	bne.n	80005ac <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000548:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <HAL_UART_MspInit+0x90>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a1a      	ldr	r2, [pc, #104]	@ (80005b8 <HAL_UART_MspInit+0x90>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <HAL_UART_MspInit+0x90>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <HAL_UART_MspInit+0x90>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a14      	ldr	r2, [pc, #80]	@ (80005b8 <HAL_UART_MspInit+0x90>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <HAL_UART_MspInit+0x90>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0304 	and.w	r3, r3, #4
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000578:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800057c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057e:	2302      	movs	r3, #2
 8000580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000582:	2303      	movs	r3, #3
 8000584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4619      	mov	r1, r3
 800058c:	480b      	ldr	r0, [pc, #44]	@ (80005bc <HAL_UART_MspInit+0x94>)
 800058e:	f001 f8ab 	bl	80016e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4805      	ldr	r0, [pc, #20]	@ (80005bc <HAL_UART_MspInit+0x94>)
 80005a8:	f001 f89e 	bl	80016e8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40013800 	.word	0x40013800
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010800 	.word	0x40010800

080005c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <NMI_Handler+0x4>

080005c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <MemManage_Handler+0x4>

080005d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <BusFault_Handler+0x4>

080005e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <UsageFault_Handler+0x4>

080005e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000610:	f000 f8b4 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <DMA1_Channel1_IRQHandler+0x10>)
 800061e:	f000 ff2f 	bl	8001480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000a8 	.word	0x200000a8

0800062c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000634:	4a14      	ldr	r2, [pc, #80]	@ (8000688 <_sbrk+0x5c>)
 8000636:	4b15      	ldr	r3, [pc, #84]	@ (800068c <_sbrk+0x60>)
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000640:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <_sbrk+0x64>)
 800064a:	4a12      	ldr	r2, [pc, #72]	@ (8000694 <_sbrk+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d207      	bcs.n	800066c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800065c:	f002 f992 	bl	8002984 <__errno>
 8000660:	4603      	mov	r3, r0
 8000662:	220c      	movs	r2, #12
 8000664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	e009      	b.n	8000680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	4a05      	ldr	r2, [pc, #20]	@ (8000690 <_sbrk+0x64>)
 800067c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20005000 	.word	0x20005000
 800068c:	00000400 	.word	0x00000400
 8000690:	200001c8 	.word	0x200001c8
 8000694:	20000318 	.word	0x20000318

08000698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff fff8 	bl	8000698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480b      	ldr	r0, [pc, #44]	@ (80006d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006aa:	490c      	ldr	r1, [pc, #48]	@ (80006dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006ac:	4a0c      	ldr	r2, [pc, #48]	@ (80006e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a09      	ldr	r2, [pc, #36]	@ (80006e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006c0:	4c09      	ldr	r4, [pc, #36]	@ (80006e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f002 f95f 	bl	8002990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fd43 	bl	800015c <main>
  bx lr
 80006d6:	4770      	bx	lr
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006e0:	0800333c 	.word	0x0800333c
  ldr r2, =_sbss
 80006e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006e8:	20000318 	.word	0x20000318

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 fdc1 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	200f      	movs	r0, #15
 8000708:	f000 f808 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff fe72 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_InitTick+0x54>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_InitTick+0x58>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fdd9 	bl	80012f2 <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f000 fda1 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	@ (8000778 <HAL_InitTick+0x5c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000008 	.word	0x20000008
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_IncTick+0x1c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <HAL_IncTick+0x20>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a03      	ldr	r2, [pc, #12]	@ (800079c <HAL_IncTick+0x20>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000008 	.word	0x20000008
 800079c:	200001cc 	.word	0x200001cc

080007a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return uwTick;
 80007a4:	4b02      	ldr	r3, [pc, #8]	@ (80007b0 <HAL_GetTick+0x10>)
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	200001cc 	.word	0x200001cc

080007b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007bc:	f7ff fff0 	bl	80007a0 <HAL_GetTick>
 80007c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d005      	beq.n	80007da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ce:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <HAL_Delay+0x44>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007da:	bf00      	nop
 80007dc:	f7ff ffe0 	bl	80007a0 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d8f7      	bhi.n	80007dc <HAL_Delay+0x28>
  {
  }
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008

080007fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000804:	2300      	movs	r3, #0
 8000806:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e0be      	b.n	800099c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000828:	2b00      	cmp	r3, #0
 800082a:	d109      	bne.n	8000840 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff fe0c 	bl	8000458 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 faff 	bl	8000e44 <ADC_ConversionStop_Disable>
 8000846:	4603      	mov	r3, r0
 8000848:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	2b00      	cmp	r3, #0
 8000854:	f040 8099 	bne.w	800098a <HAL_ADC_Init+0x18e>
 8000858:	7dfb      	ldrb	r3, [r7, #23]
 800085a:	2b00      	cmp	r3, #0
 800085c:	f040 8095 	bne.w	800098a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000864:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000868:	f023 0302 	bic.w	r3, r3, #2
 800086c:	f043 0202 	orr.w	r2, r3, #2
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800087c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	7b1b      	ldrb	r3, [r3, #12]
 8000882:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000884:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	4313      	orrs	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000894:	d003      	beq.n	800089e <HAL_ADC_Init+0xa2>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d102      	bne.n	80008a4 <HAL_ADC_Init+0xa8>
 800089e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008a2:	e000      	b.n	80008a6 <HAL_ADC_Init+0xaa>
 80008a4:	2300      	movs	r3, #0
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7d1b      	ldrb	r3, [r3, #20]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d119      	bne.n	80008e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7b1b      	ldrb	r3, [r3, #12]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d109      	bne.n	80008d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	035a      	lsls	r2, r3, #13
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	e00b      	b.n	80008e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d4:	f043 0220 	orr.w	r2, r3, #32
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e0:	f043 0201 	orr.w	r2, r3, #1
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	430a      	orrs	r2, r1
 80008fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	4b28      	ldr	r3, [pc, #160]	@ (80009a4 <HAL_ADC_Init+0x1a8>)
 8000904:	4013      	ands	r3, r2
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	6812      	ldr	r2, [r2, #0]
 800090a:	68b9      	ldr	r1, [r7, #8]
 800090c:	430b      	orrs	r3, r1
 800090e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000918:	d003      	beq.n	8000922 <HAL_ADC_Init+0x126>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d104      	bne.n	800092c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	691b      	ldr	r3, [r3, #16]
 8000926:	3b01      	subs	r3, #1
 8000928:	051b      	lsls	r3, r3, #20
 800092a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000932:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	430a      	orrs	r2, r1
 800093e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689a      	ldr	r2, [r3, #8]
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <HAL_ADC_Init+0x1ac>)
 8000948:	4013      	ands	r3, r2
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	429a      	cmp	r2, r3
 800094e:	d10b      	bne.n	8000968 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800095a:	f023 0303 	bic.w	r3, r3, #3
 800095e:	f043 0201 	orr.w	r2, r3, #1
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000966:	e018      	b.n	800099a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800096c:	f023 0312 	bic.w	r3, r3, #18
 8000970:	f043 0210 	orr.w	r2, r3, #16
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800097c:	f043 0201 	orr.w	r2, r3, #1
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000988:	e007      	b.n	800099a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800098e:	f043 0210 	orr.w	r2, r3, #16
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800099a:	7dfb      	ldrb	r3, [r7, #23]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	ffe1f7fd 	.word	0xffe1f7fd
 80009a8:	ff1f0efe 	.word	0xff1f0efe

080009ac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009b8:	2300      	movs	r3, #0
 80009ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a64      	ldr	r2, [pc, #400]	@ (8000b54 <HAL_ADC_Start_DMA+0x1a8>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d004      	beq.n	80009d0 <HAL_ADC_Start_DMA+0x24>
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a63      	ldr	r2, [pc, #396]	@ (8000b58 <HAL_ADC_Start_DMA+0x1ac>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d106      	bne.n	80009de <HAL_ADC_Start_DMA+0x32>
 80009d0:	4b60      	ldr	r3, [pc, #384]	@ (8000b54 <HAL_ADC_Start_DMA+0x1a8>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f040 80b3 	bne.w	8000b44 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d101      	bne.n	80009ec <HAL_ADC_Start_DMA+0x40>
 80009e8:	2302      	movs	r3, #2
 80009ea:	e0ae      	b.n	8000b4a <HAL_ADC_Start_DMA+0x19e>
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2201      	movs	r2, #1
 80009f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f000 f9cb 	bl	8000d90 <ADC_Enable>
 80009fa:	4603      	mov	r3, r0
 80009fc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f040 809a 	bne.w	8000b3a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a4e      	ldr	r2, [pc, #312]	@ (8000b58 <HAL_ADC_Start_DMA+0x1ac>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d105      	bne.n	8000a30 <HAL_ADC_Start_DMA+0x84>
 8000a24:	4b4b      	ldr	r3, [pc, #300]	@ (8000b54 <HAL_ADC_Start_DMA+0x1a8>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d115      	bne.n	8000a5c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d026      	beq.n	8000a98 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a5a:	e01d      	b.n	8000a98 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a39      	ldr	r2, [pc, #228]	@ (8000b54 <HAL_ADC_Start_DMA+0x1a8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d004      	beq.n	8000a7c <HAL_ADC_Start_DMA+0xd0>
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a38      	ldr	r2, [pc, #224]	@ (8000b58 <HAL_ADC_Start_DMA+0x1ac>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d10d      	bne.n	8000a98 <HAL_ADC_Start_DMA+0xec>
 8000a7c:	4b35      	ldr	r3, [pc, #212]	@ (8000b54 <HAL_ADC_Start_DMA+0x1a8>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa8:	f023 0206 	bic.w	r2, r3, #6
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ab0:	e002      	b.n	8000ab8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	4a25      	ldr	r2, [pc, #148]	@ (8000b5c <HAL_ADC_Start_DMA+0x1b0>)
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	4a24      	ldr	r2, [pc, #144]	@ (8000b60 <HAL_ADC_Start_DMA+0x1b4>)
 8000ace:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	4a23      	ldr	r2, [pc, #140]	@ (8000b64 <HAL_ADC_Start_DMA+0x1b8>)
 8000ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f06f 0202 	mvn.w	r2, #2
 8000ae0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000af0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6a18      	ldr	r0, [r3, #32]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	334c      	adds	r3, #76	@ 0x4c
 8000afc:	4619      	mov	r1, r3
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f000 fc5d 	bl	80013c0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000b10:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b14:	d108      	bne.n	8000b28 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000b24:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b26:	e00f      	b.n	8000b48 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000b36:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b38:	e006      	b.n	8000b48 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8000b42:	e001      	b.n	8000b48 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40012400 	.word	0x40012400
 8000b58:	40012800 	.word	0x40012800
 8000b5c:	08000ec7 	.word	0x08000ec7
 8000b60:	08000f43 	.word	0x08000f43
 8000b64:	08000f5f 	.word	0x08000f5f

08000b68 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
	...

08000ba0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d101      	bne.n	8000bc0 <HAL_ADC_ConfigChannel+0x20>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e0dc      	b.n	8000d7a <HAL_ADC_ConfigChannel+0x1da>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	d81c      	bhi.n	8000c0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	3b05      	subs	r3, #5
 8000be2:	221f      	movs	r2, #31
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4019      	ands	r1, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	3b05      	subs	r3, #5
 8000bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c08:	e03c      	b.n	8000c84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b0c      	cmp	r3, #12
 8000c10:	d81c      	bhi.n	8000c4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	3b23      	subs	r3, #35	@ 0x23
 8000c24:	221f      	movs	r2, #31
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4019      	ands	r1, r3
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	3b23      	subs	r3, #35	@ 0x23
 8000c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c4a:	e01b      	b.n	8000c84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b41      	subs	r3, #65	@ 0x41
 8000c5e:	221f      	movs	r2, #31
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	4019      	ands	r1, r3
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	3b41      	subs	r3, #65	@ 0x41
 8000c78:	fa00 f203 	lsl.w	r2, r0, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b09      	cmp	r3, #9
 8000c8a:	d91c      	bls.n	8000cc6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68d9      	ldr	r1, [r3, #12]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3b1e      	subs	r3, #30
 8000c9e:	2207      	movs	r2, #7
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4019      	ands	r1, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	6898      	ldr	r0, [r3, #8]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3b1e      	subs	r3, #30
 8000cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	e019      	b.n	8000cfa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6919      	ldr	r1, [r3, #16]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	4019      	ands	r1, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	6898      	ldr	r0, [r3, #8]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b10      	cmp	r3, #16
 8000d00:	d003      	beq.n	8000d0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d06:	2b11      	cmp	r3, #17
 8000d08:	d132      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d84 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d125      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d126      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000d30:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b10      	cmp	r3, #16
 8000d38:	d11a      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a13      	ldr	r2, [pc, #76]	@ (8000d8c <HAL_ADC_ConfigChannel+0x1ec>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	0c9a      	lsrs	r2, r3, #18
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d50:	e002      	b.n	8000d58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f9      	bne.n	8000d52 <HAL_ADC_ConfigChannel+0x1b2>
 8000d5e:	e007      	b.n	8000d70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d64:	f043 0220 	orr.w	r2, r3, #32
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40012400 	.word	0x40012400
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	431bde83 	.word	0x431bde83

08000d90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d040      	beq.n	8000e30 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f042 0201 	orr.w	r2, r2, #1
 8000dbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <ADC_Enable+0xac>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e40 <ADC_Enable+0xb0>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	0c9b      	lsrs	r3, r3, #18
 8000dca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000dcc:	e002      	b.n	8000dd4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f9      	bne.n	8000dce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dda:	f7ff fce1 	bl	80007a0 <HAL_GetTick>
 8000dde:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000de0:	e01f      	b.n	8000e22 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000de2:	f7ff fcdd 	bl	80007a0 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d918      	bls.n	8000e22 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d011      	beq.n	8000e22 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e02:	f043 0210 	orr.w	r2, r3, #16
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0e:	f043 0201 	orr.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e007      	b.n	8000e32 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d1d8      	bne.n	8000de2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	431bde83 	.word	0x431bde83

08000e44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d12e      	bne.n	8000ebc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0201 	bic.w	r2, r2, #1
 8000e6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e6e:	f7ff fc97 	bl	80007a0 <HAL_GetTick>
 8000e72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e74:	e01b      	b.n	8000eae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e76:	f7ff fc93 	bl	80007a0 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d914      	bls.n	8000eae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d10d      	bne.n	8000eae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e96:	f043 0210 	orr.w	r2, r3, #16
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea2:	f043 0201 	orr.w	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e007      	b.n	8000ebe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d0dc      	beq.n	8000e76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d127      	bne.n	8000f30 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000ef6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000efa:	d115      	bne.n	8000f28 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d111      	bne.n	8000f28 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d105      	bne.n	8000f28 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f20:	f043 0201 	orr.w	r2, r3, #1
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff fe1d 	bl	8000b68 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f2e:	e004      	b.n	8000f3a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	4798      	blx	r3
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f7ff fe12 	bl	8000b7a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f7c:	f043 0204 	orr.w	r2, r3, #4
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f7ff fe01 	bl	8000b8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <HAL_ADCEx_Calibration_Start+0x1e>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e097      	b.n	80010e2 <HAL_ADCEx_Calibration_Start+0x14e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff42 	bl	8000e44 <ADC_ConversionStop_Disable>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff fee3 	bl	8000d90 <ADC_Enable>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 8081 	bne.w	80010d8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fda:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fde:	f023 0302 	bic.w	r3, r3, #2
 8000fe2:	f043 0202 	orr.w	r2, r3, #2
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000fea:	4b40      	ldr	r3, [pc, #256]	@ (80010ec <HAL_ADCEx_Calibration_Start+0x158>)
 8000fec:	681c      	ldr	r4, [r3, #0]
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f001 f9c4 	bl	800237c <HAL_RCCEx_GetPeriphCLKFreq>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000ffa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000ffc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000ffe:	e002      	b.n	8001006 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3b01      	subs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f9      	bne.n	8001000 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0208 	orr.w	r2, r2, #8
 800101a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800101c:	f7ff fbc0 	bl	80007a0 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001022:	e01b      	b.n	800105c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001024:	f7ff fbbc 	bl	80007a0 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d914      	bls.n	800105c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00d      	beq.n	800105c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001044:	f023 0312 	bic.w	r3, r3, #18
 8001048:	f043 0210 	orr.w	r2, r3, #16
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e042      	b.n	80010e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1dc      	bne.n	8001024 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0204 	orr.w	r2, r2, #4
 8001078:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800107a:	f7ff fb91 	bl	80007a0 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001080:	e01b      	b.n	80010ba <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001082:	f7ff fb8d 	bl	80007a0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b0a      	cmp	r3, #10
 800108e:	d914      	bls.n	80010ba <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00d      	beq.n	80010ba <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a2:	f023 0312 	bic.w	r3, r3, #18
 80010a6:	f043 0210 	orr.w	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e013      	b.n	80010e2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1dc      	bne.n	8001082 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010cc:	f023 0303 	bic.w	r3, r3, #3
 80010d0:	f043 0201 	orr.w	r2, r3, #1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000000 	.word	0x20000000

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4906      	ldr	r1, [pc, #24]	@ (8001188 <__NVIC_EnableIRQ+0x34>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	@ (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff90 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff2d 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff42 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff90 	bl	80011e0 <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5f 	bl	800118c <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff35 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa2 	bl	8001244 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e043      	b.n	80013aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <HAL_DMA_Init+0xa8>)
 800132a:	4413      	add	r3, r2
 800132c:	4a22      	ldr	r2, [pc, #136]	@ (80013b8 <HAL_DMA_Init+0xac>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	009a      	lsls	r2, r3, #2
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <HAL_DMA_Init+0xb0>)
 800133e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001356:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800135a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	bffdfff8 	.word	0xbffdfff8
 80013b8:	cccccccd 	.word	0xcccccccd
 80013bc:	40020000 	.word	0x40020000

080013c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_DMA_Start_IT+0x20>
 80013dc:	2302      	movs	r3, #2
 80013de:	e04b      	b.n	8001478 <HAL_DMA_Start_IT+0xb8>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d13a      	bne.n	800146a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 f937 	bl	800168c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 020e 	orr.w	r2, r2, #14
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e00f      	b.n	8001458 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0204 	bic.w	r2, r2, #4
 8001446:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 020a 	orr.w	r2, r2, #10
 8001456:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e005      	b.n	8001476 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001472:	2302      	movs	r3, #2
 8001474:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001476:	7dfb      	ldrb	r3, [r7, #23]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	2204      	movs	r2, #4
 800149e:	409a      	lsls	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d04f      	beq.n	8001548 <HAL_DMA_IRQHandler+0xc8>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d04a      	beq.n	8001548 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0320 	and.w	r3, r3, #32
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d107      	bne.n	80014d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0204 	bic.w	r2, r2, #4
 80014ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a66      	ldr	r2, [pc, #408]	@ (8001670 <HAL_DMA_IRQHandler+0x1f0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d029      	beq.n	800152e <HAL_DMA_IRQHandler+0xae>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a65      	ldr	r2, [pc, #404]	@ (8001674 <HAL_DMA_IRQHandler+0x1f4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d022      	beq.n	800152a <HAL_DMA_IRQHandler+0xaa>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a63      	ldr	r2, [pc, #396]	@ (8001678 <HAL_DMA_IRQHandler+0x1f8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d01a      	beq.n	8001524 <HAL_DMA_IRQHandler+0xa4>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a62      	ldr	r2, [pc, #392]	@ (800167c <HAL_DMA_IRQHandler+0x1fc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d012      	beq.n	800151e <HAL_DMA_IRQHandler+0x9e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a60      	ldr	r2, [pc, #384]	@ (8001680 <HAL_DMA_IRQHandler+0x200>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00a      	beq.n	8001518 <HAL_DMA_IRQHandler+0x98>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a5f      	ldr	r2, [pc, #380]	@ (8001684 <HAL_DMA_IRQHandler+0x204>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d102      	bne.n	8001512 <HAL_DMA_IRQHandler+0x92>
 800150c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001510:	e00e      	b.n	8001530 <HAL_DMA_IRQHandler+0xb0>
 8001512:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001516:	e00b      	b.n	8001530 <HAL_DMA_IRQHandler+0xb0>
 8001518:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800151c:	e008      	b.n	8001530 <HAL_DMA_IRQHandler+0xb0>
 800151e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001522:	e005      	b.n	8001530 <HAL_DMA_IRQHandler+0xb0>
 8001524:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001528:	e002      	b.n	8001530 <HAL_DMA_IRQHandler+0xb0>
 800152a:	2340      	movs	r3, #64	@ 0x40
 800152c:	e000      	b.n	8001530 <HAL_DMA_IRQHandler+0xb0>
 800152e:	2304      	movs	r3, #4
 8001530:	4a55      	ldr	r2, [pc, #340]	@ (8001688 <HAL_DMA_IRQHandler+0x208>)
 8001532:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8094 	beq.w	8001666 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001546:	e08e      	b.n	8001666 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	2202      	movs	r2, #2
 800154e:	409a      	lsls	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d056      	beq.n	8001606 <HAL_DMA_IRQHandler+0x186>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d051      	beq.n	8001606 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10b      	bne.n	8001588 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 020a 	bic.w	r2, r2, #10
 800157e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a38      	ldr	r2, [pc, #224]	@ (8001670 <HAL_DMA_IRQHandler+0x1f0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d029      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x166>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a37      	ldr	r2, [pc, #220]	@ (8001674 <HAL_DMA_IRQHandler+0x1f4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d022      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x162>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a35      	ldr	r2, [pc, #212]	@ (8001678 <HAL_DMA_IRQHandler+0x1f8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d01a      	beq.n	80015dc <HAL_DMA_IRQHandler+0x15c>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a34      	ldr	r2, [pc, #208]	@ (800167c <HAL_DMA_IRQHandler+0x1fc>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d012      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x156>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a32      	ldr	r2, [pc, #200]	@ (8001680 <HAL_DMA_IRQHandler+0x200>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00a      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x150>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a31      	ldr	r2, [pc, #196]	@ (8001684 <HAL_DMA_IRQHandler+0x204>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d102      	bne.n	80015ca <HAL_DMA_IRQHandler+0x14a>
 80015c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015c8:	e00e      	b.n	80015e8 <HAL_DMA_IRQHandler+0x168>
 80015ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015ce:	e00b      	b.n	80015e8 <HAL_DMA_IRQHandler+0x168>
 80015d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015d4:	e008      	b.n	80015e8 <HAL_DMA_IRQHandler+0x168>
 80015d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015da:	e005      	b.n	80015e8 <HAL_DMA_IRQHandler+0x168>
 80015dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015e0:	e002      	b.n	80015e8 <HAL_DMA_IRQHandler+0x168>
 80015e2:	2320      	movs	r3, #32
 80015e4:	e000      	b.n	80015e8 <HAL_DMA_IRQHandler+0x168>
 80015e6:	2302      	movs	r3, #2
 80015e8:	4a27      	ldr	r2, [pc, #156]	@ (8001688 <HAL_DMA_IRQHandler+0x208>)
 80015ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d034      	beq.n	8001666 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001604:	e02f      	b.n	8001666 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	2208      	movs	r2, #8
 800160c:	409a      	lsls	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d028      	beq.n	8001668 <HAL_DMA_IRQHandler+0x1e8>
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d023      	beq.n	8001668 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 020e 	bic.w	r2, r2, #14
 800162e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001638:	2101      	movs	r1, #1
 800163a:	fa01 f202 	lsl.w	r2, r1, r2
 800163e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
    }
  }
  return;
 8001666:	bf00      	nop
 8001668:	bf00      	nop
}
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40020008 	.word	0x40020008
 8001674:	4002001c 	.word	0x4002001c
 8001678:	40020030 	.word	0x40020030
 800167c:	40020044 	.word	0x40020044
 8001680:	40020058 	.word	0x40020058
 8001684:	4002006c 	.word	0x4002006c
 8001688:	40020000 	.word	0x40020000

0800168c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d108      	bne.n	80016cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016ca:	e007      	b.n	80016dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	60da      	str	r2, [r3, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b08b      	sub	sp, #44	@ 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fa:	e169      	b.n	80019d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016fc:	2201      	movs	r2, #1
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8158 	bne.w	80019ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4a9a      	ldr	r2, [pc, #616]	@ (8001988 <HAL_GPIO_Init+0x2a0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d05e      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001724:	4a98      	ldr	r2, [pc, #608]	@ (8001988 <HAL_GPIO_Init+0x2a0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d875      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800172a:	4a98      	ldr	r2, [pc, #608]	@ (800198c <HAL_GPIO_Init+0x2a4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d058      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001730:	4a96      	ldr	r2, [pc, #600]	@ (800198c <HAL_GPIO_Init+0x2a4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d86f      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001736:	4a96      	ldr	r2, [pc, #600]	@ (8001990 <HAL_GPIO_Init+0x2a8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d052      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 800173c:	4a94      	ldr	r2, [pc, #592]	@ (8001990 <HAL_GPIO_Init+0x2a8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d869      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001742:	4a94      	ldr	r2, [pc, #592]	@ (8001994 <HAL_GPIO_Init+0x2ac>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d04c      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001748:	4a92      	ldr	r2, [pc, #584]	@ (8001994 <HAL_GPIO_Init+0x2ac>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d863      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800174e:	4a92      	ldr	r2, [pc, #584]	@ (8001998 <HAL_GPIO_Init+0x2b0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d046      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
 8001754:	4a90      	ldr	r2, [pc, #576]	@ (8001998 <HAL_GPIO_Init+0x2b0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d85d      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 800175a:	2b12      	cmp	r3, #18
 800175c:	d82a      	bhi.n	80017b4 <HAL_GPIO_Init+0xcc>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d859      	bhi.n	8001816 <HAL_GPIO_Init+0x12e>
 8001762:	a201      	add	r2, pc, #4	@ (adr r2, 8001768 <HAL_GPIO_Init+0x80>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	080017e3 	.word	0x080017e3
 800176c:	080017bd 	.word	0x080017bd
 8001770:	080017cf 	.word	0x080017cf
 8001774:	08001811 	.word	0x08001811
 8001778:	08001817 	.word	0x08001817
 800177c:	08001817 	.word	0x08001817
 8001780:	08001817 	.word	0x08001817
 8001784:	08001817 	.word	0x08001817
 8001788:	08001817 	.word	0x08001817
 800178c:	08001817 	.word	0x08001817
 8001790:	08001817 	.word	0x08001817
 8001794:	08001817 	.word	0x08001817
 8001798:	08001817 	.word	0x08001817
 800179c:	08001817 	.word	0x08001817
 80017a0:	08001817 	.word	0x08001817
 80017a4:	08001817 	.word	0x08001817
 80017a8:	08001817 	.word	0x08001817
 80017ac:	080017c5 	.word	0x080017c5
 80017b0:	080017d9 	.word	0x080017d9
 80017b4:	4a79      	ldr	r2, [pc, #484]	@ (800199c <HAL_GPIO_Init+0x2b4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ba:	e02c      	b.n	8001816 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e029      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	3304      	adds	r3, #4
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e024      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	3308      	adds	r3, #8
 80017d4:	623b      	str	r3, [r7, #32]
          break;
 80017d6:	e01f      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	330c      	adds	r3, #12
 80017de:	623b      	str	r3, [r7, #32]
          break;
 80017e0:	e01a      	b.n	8001818 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ea:	2304      	movs	r3, #4
 80017ec:	623b      	str	r3, [r7, #32]
          break;
 80017ee:	e013      	b.n	8001818 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f8:	2308      	movs	r3, #8
 80017fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	611a      	str	r2, [r3, #16]
          break;
 8001802:	e009      	b.n	8001818 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001804:	2308      	movs	r3, #8
 8001806:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	615a      	str	r2, [r3, #20]
          break;
 800180e:	e003      	b.n	8001818 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e000      	b.n	8001818 <HAL_GPIO_Init+0x130>
          break;
 8001816:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2bff      	cmp	r3, #255	@ 0xff
 800181c:	d801      	bhi.n	8001822 <HAL_GPIO_Init+0x13a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	e001      	b.n	8001826 <HAL_GPIO_Init+0x13e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3304      	adds	r3, #4
 8001826:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2bff      	cmp	r3, #255	@ 0xff
 800182c:	d802      	bhi.n	8001834 <HAL_GPIO_Init+0x14c>
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	e002      	b.n	800183a <HAL_GPIO_Init+0x152>
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	3b08      	subs	r3, #8
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	210f      	movs	r1, #15
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	401a      	ands	r2, r3
 800184c:	6a39      	ldr	r1, [r7, #32]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	431a      	orrs	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 80b1 	beq.w	80019ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001868:	4b4d      	ldr	r3, [pc, #308]	@ (80019a0 <HAL_GPIO_Init+0x2b8>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a4c      	ldr	r2, [pc, #304]	@ (80019a0 <HAL_GPIO_Init+0x2b8>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b4a      	ldr	r3, [pc, #296]	@ (80019a0 <HAL_GPIO_Init+0x2b8>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001880:	4a48      	ldr	r2, [pc, #288]	@ (80019a4 <HAL_GPIO_Init+0x2bc>)
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a40      	ldr	r2, [pc, #256]	@ (80019a8 <HAL_GPIO_Init+0x2c0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d013      	beq.n	80018d4 <HAL_GPIO_Init+0x1ec>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3f      	ldr	r2, [pc, #252]	@ (80019ac <HAL_GPIO_Init+0x2c4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00d      	beq.n	80018d0 <HAL_GPIO_Init+0x1e8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3e      	ldr	r2, [pc, #248]	@ (80019b0 <HAL_GPIO_Init+0x2c8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0x1e4>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a3d      	ldr	r2, [pc, #244]	@ (80019b4 <HAL_GPIO_Init+0x2cc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_GPIO_Init+0x1e0>
 80018c4:	2303      	movs	r3, #3
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018c8:	2304      	movs	r3, #4
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1ee>
 80018d4:	2300      	movs	r3, #0
 80018d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018e6:	492f      	ldr	r1, [pc, #188]	@ (80019a4 <HAL_GPIO_Init+0x2bc>)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001900:	4b2d      	ldr	r3, [pc, #180]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	492c      	ldr	r1, [pc, #176]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800190e:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	4928      	ldr	r1, [pc, #160]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001918:	4013      	ands	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4922      	ldr	r1, [pc, #136]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	491e      	ldr	r1, [pc, #120]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001940:	4013      	ands	r3, r2
 8001942:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001950:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4918      	ldr	r1, [pc, #96]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800195e:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	43db      	mvns	r3, r3
 8001966:	4914      	ldr	r1, [pc, #80]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 8001968:	4013      	ands	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d021      	beq.n	80019bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	490e      	ldr	r1, [pc, #56]	@ (80019b8 <HAL_GPIO_Init+0x2d0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e021      	b.n	80019ca <HAL_GPIO_Init+0x2e2>
 8001986:	bf00      	nop
 8001988:	10320000 	.word	0x10320000
 800198c:	10310000 	.word	0x10310000
 8001990:	10220000 	.word	0x10220000
 8001994:	10210000 	.word	0x10210000
 8001998:	10120000 	.word	0x10120000
 800199c:	10110000 	.word	0x10110000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40010800 	.word	0x40010800
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40011400 	.word	0x40011400
 80019b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_GPIO_Init+0x304>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4909      	ldr	r1, [pc, #36]	@ (80019ec <HAL_GPIO_Init+0x304>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	3301      	adds	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f47f ae8e 	bne.w	80016fc <HAL_GPIO_Init+0x14>
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	372c      	adds	r7, #44	@ 0x2c
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e272      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8087 	beq.w	8001b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a10:	4b92      	ldr	r3, [pc, #584]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d00c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d112      	bne.n	8001a4e <HAL_RCC_OscConfig+0x5e>
 8001a28:	4b8c      	ldr	r3, [pc, #560]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a34:	d10b      	bne.n	8001a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a36:	4b89      	ldr	r3, [pc, #548]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d06c      	beq.n	8001b1c <HAL_RCC_OscConfig+0x12c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d168      	bne.n	8001b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e24c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x76>
 8001a58:	4b80      	ldr	r3, [pc, #512]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a7f      	ldr	r2, [pc, #508]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e02e      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd4>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x98>
 8001a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7a      	ldr	r2, [pc, #488]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b78      	ldr	r3, [pc, #480]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a77      	ldr	r2, [pc, #476]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e01d      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd4>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0xbc>
 8001a92:	4b72      	ldr	r3, [pc, #456]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a71      	ldr	r2, [pc, #452]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd4>
 8001aac:	4b6b      	ldr	r3, [pc, #428]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b68      	ldr	r3, [pc, #416]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a67      	ldr	r2, [pc, #412]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d013      	beq.n	8001af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7fe fe68 	bl	80007a0 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7fe fe64 	bl	80007a0 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	@ 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e200      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xe4>
 8001af2:	e014      	b.n	8001b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7fe fe54 	bl	80007a0 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7fe fe50 	bl	80007a0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	@ 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e1ec      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	4b53      	ldr	r3, [pc, #332]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x10c>
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d063      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b36:	4b49      	ldr	r3, [pc, #292]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d11c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x18c>
 8001b42:	4b46      	ldr	r3, [pc, #280]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d116      	bne.n	8001b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	4b43      	ldr	r3, [pc, #268]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <HAL_RCC_OscConfig+0x176>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e1c0      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b66:	4b3d      	ldr	r3, [pc, #244]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4939      	ldr	r1, [pc, #228]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7a:	e03a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d020      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b84:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <HAL_RCC_OscConfig+0x270>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7fe fe09 	bl	80007a0 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b92:	f7fe fe05 	bl	80007a0 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e1a1      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4927      	ldr	r1, [pc, #156]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
 8001bc4:	e015      	b.n	8001bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc6:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7fe fde8 	bl	80007a0 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd4:	f7fe fde4 	bl	80007a0 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e180      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d03a      	beq.n	8001c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d019      	beq.n	8001c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <HAL_RCC_OscConfig+0x274>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0c:	f7fe fdc8 	bl	80007a0 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c14:	f7fe fdc4 	bl	80007a0 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e160      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f000 face 	bl	80021d4 <RCC_Delay>
 8001c38:	e01c      	b.n	8001c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c40:	f7fe fdae 	bl	80007a0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c46:	e00f      	b.n	8001c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c48:	f7fe fdaa 	bl	80007a0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d908      	bls.n	8001c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e146      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	42420000 	.word	0x42420000
 8001c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4b92      	ldr	r3, [pc, #584]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e9      	bne.n	8001c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a6 	beq.w	8001dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c86:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10d      	bne.n	8001cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	4b88      	ldr	r3, [pc, #544]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a87      	ldr	r2, [pc, #540]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	61d3      	str	r3, [r2, #28]
 8001c9e:	4b85      	ldr	r3, [pc, #532]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001caa:	2301      	movs	r3, #1
 8001cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cae:	4b82      	ldr	r3, [pc, #520]	@ (8001eb8 <HAL_RCC_OscConfig+0x4c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d118      	bne.n	8001cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cba:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb8 <HAL_RCC_OscConfig+0x4c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8001eb8 <HAL_RCC_OscConfig+0x4c8>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc6:	f7fe fd6b 	bl	80007a0 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cce:	f7fe fd67 	bl	80007a0 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b64      	cmp	r3, #100	@ 0x64
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e103      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	4b75      	ldr	r3, [pc, #468]	@ (8001eb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x312>
 8001cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e02d      	b.n	8001d5e <HAL_RCC_OscConfig+0x36e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x334>
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a69      	ldr	r2, [pc, #420]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	4b67      	ldr	r3, [pc, #412]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a66      	ldr	r2, [pc, #408]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	e01c      	b.n	8001d5e <HAL_RCC_OscConfig+0x36e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x356>
 8001d2c:	4b61      	ldr	r3, [pc, #388]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a60      	ldr	r2, [pc, #384]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	4b5e      	ldr	r3, [pc, #376]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6213      	str	r3, [r2, #32]
 8001d44:	e00b      	b.n	8001d5e <HAL_RCC_OscConfig+0x36e>
 8001d46:	4b5b      	ldr	r3, [pc, #364]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	4b58      	ldr	r3, [pc, #352]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a57      	ldr	r2, [pc, #348]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d015      	beq.n	8001d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7fe fd1b 	bl	80007a0 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7fe fd17 	bl	80007a0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0b1      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ee      	beq.n	8001d6e <HAL_RCC_OscConfig+0x37e>
 8001d90:	e014      	b.n	8001dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7fe fd05 	bl	80007a0 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7fe fd01 	bl	80007a0 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e09b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db0:	4b40      	ldr	r3, [pc, #256]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1ee      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d105      	bne.n	8001dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8087 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd8:	4b36      	ldr	r3, [pc, #216]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d061      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d146      	bne.n	8001e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dec:	4b33      	ldr	r3, [pc, #204]	@ (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fcd5 	bl	80007a0 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe fcd1 	bl	80007a0 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e06d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0c:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e20:	d108      	bne.n	8001e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e22:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4921      	ldr	r1, [pc, #132]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e34:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a19      	ldr	r1, [r3, #32]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	430b      	orrs	r3, r1
 8001e46:	491b      	ldr	r1, [pc, #108]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7fe fca5 	bl	80007a0 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7fe fca1 	bl	80007a0 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e03d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x46a>
 8001e78:	e035      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <HAL_RCC_OscConfig+0x4cc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7fe fc8e 	bl	80007a0 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe fc8a 	bl	80007a0 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e026      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x498>
 8001ea6:	e01e      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e019      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_RCC_OscConfig+0x500>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0d0      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f08:	4b6a      	ldr	r3, [pc, #424]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d910      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b67      	ldr	r3, [pc, #412]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 0207 	bic.w	r2, r3, #7
 8001f1e:	4965      	ldr	r1, [pc, #404]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b63      	ldr	r3, [pc, #396]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0b8      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f50:	4b59      	ldr	r3, [pc, #356]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a58      	ldr	r2, [pc, #352]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f68:	4b53      	ldr	r3, [pc, #332]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a52      	ldr	r2, [pc, #328]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b50      	ldr	r3, [pc, #320]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	494d      	ldr	r1, [pc, #308]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d040      	beq.n	8002014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d115      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e07f      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb2:	4b41      	ldr	r3, [pc, #260]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e073      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e06b      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4b39      	ldr	r3, [pc, #228]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f023 0203 	bic.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	4936      	ldr	r1, [pc, #216]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fbdc 	bl	80007a0 <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f7fe fbd8 	bl	80007a0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e053      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	4b2d      	ldr	r3, [pc, #180]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 020c 	and.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	429a      	cmp	r2, r3
 8002012:	d1eb      	bne.n	8001fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002014:	4b27      	ldr	r3, [pc, #156]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d210      	bcs.n	8002044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	4922      	ldr	r1, [pc, #136]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e032      	b.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4916      	ldr	r1, [pc, #88]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	490e      	ldr	r1, [pc, #56]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002082:	f000 f821 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002086:	4602      	mov	r2, r0
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	490a      	ldr	r1, [pc, #40]	@ (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002094:	5ccb      	ldrb	r3, [r1, r3]
 8002096:	fa22 f303 	lsr.w	r3, r2, r3
 800209a:	4a09      	ldr	r2, [pc, #36]	@ (80020c0 <HAL_RCC_ClockConfig+0x1cc>)
 800209c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <HAL_RCC_ClockConfig+0x1d0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fb3a 	bl	800071c <HAL_InitTick>

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	080032b8 	.word	0x080032b8
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	@ (800215c <HAL_RCC_GetSysClockFreq+0x94>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x30>
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x36>
 80020f6:	e027      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f8:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x98>)
 80020fa:	613b      	str	r3, [r7, #16]
      break;
 80020fc:	e027      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0c9b      	lsrs	r3, r3, #18
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	4a17      	ldr	r2, [pc, #92]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_RCC_GetSysClockFreq+0x94>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	0c5b      	lsrs	r3, r3, #17
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	4a11      	ldr	r2, [pc, #68]	@ (8002168 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x98>)
 800212a:	fb03 f202 	mul.w	r2, r3, r2
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	e004      	b.n	8002142 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a0c      	ldr	r2, [pc, #48]	@ (800216c <HAL_RCC_GetSysClockFreq+0xa4>)
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	613b      	str	r3, [r7, #16]
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x98>)
 800214a:	613b      	str	r3, [r7, #16]
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	693b      	ldr	r3, [r7, #16]
}
 8002150:	4618      	mov	r0, r3
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	007a1200 	.word	0x007a1200
 8002164:	080032d0 	.word	0x080032d0
 8002168:	080032e0 	.word	0x080032e0
 800216c:	003d0900 	.word	0x003d0900

08002170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002174:	4b02      	ldr	r3, [pc, #8]	@ (8002180 <HAL_RCC_GetHCLKFreq+0x10>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002188:	f7ff fff2 	bl	8002170 <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4903      	ldr	r1, [pc, #12]	@ (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	080032c8 	.word	0x080032c8

080021ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b0:	f7ff ffde 	bl	8002170 <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	0adb      	lsrs	r3, r3, #11
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4903      	ldr	r1, [pc, #12]	@ (80021d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	080032c8 	.word	0x080032c8

080021d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <RCC_Delay+0x34>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <RCC_Delay+0x38>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0a5b      	lsrs	r3, r3, #9
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021f0:	bf00      	nop
  }
  while (Delay --);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1e5a      	subs	r2, r3, #1
 80021f6:	60fa      	str	r2, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f9      	bne.n	80021f0 <RCC_Delay+0x1c>
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	20000000 	.word	0x20000000
 800220c:	10624dd3 	.word	0x10624dd3

08002210 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d07d      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002230:	4b4f      	ldr	r3, [pc, #316]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10d      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b4c      	ldr	r3, [pc, #304]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	4a4b      	ldr	r2, [pc, #300]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002246:	61d3      	str	r3, [r2, #28]
 8002248:	4b49      	ldr	r3, [pc, #292]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002254:	2301      	movs	r3, #1
 8002256:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b46      	ldr	r3, [pc, #280]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d118      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002264:	4b43      	ldr	r3, [pc, #268]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a42      	ldr	r2, [pc, #264]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002270:	f7fe fa96 	bl	80007a0 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	e008      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe fa92 	bl	80007a0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	@ 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e06d      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002296:	4b36      	ldr	r3, [pc, #216]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800229e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d02e      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d027      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022be:	4b2e      	ldr	r3, [pc, #184]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ca:	4a29      	ldr	r2, [pc, #164]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d014      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fe fa61 	bl	80007a0 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7fe fa5d 	bl	80007a0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e036      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ee      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002304:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4917      	ldr	r1, [pc, #92]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002312:	4313      	orrs	r3, r2
 8002314:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b14      	ldr	r3, [pc, #80]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4a13      	ldr	r2, [pc, #76]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002326:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002334:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	490b      	ldr	r1, [pc, #44]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002352:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4904      	ldr	r1, [pc, #16]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	40007000 	.word	0x40007000
 8002378:	42420440 	.word	0x42420440

0800237c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b10      	cmp	r3, #16
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	f200 808a 	bhi.w	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d045      	beq.n	8002438 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d075      	beq.n	800249e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80023b2:	e082      	b.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80023b4:	4b46      	ldr	r3, [pc, #280]	@ (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023ba:	4b45      	ldr	r3, [pc, #276]	@ (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d07b      	beq.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	0c9b      	lsrs	r3, r3, #18
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	4a41      	ldr	r2, [pc, #260]	@ (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80023d0:	5cd3      	ldrb	r3, [r2, r3]
 80023d2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d015      	beq.n	800240a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023de:	4b3c      	ldr	r3, [pc, #240]	@ (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	0c5b      	lsrs	r3, r3, #17
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	4a3b      	ldr	r2, [pc, #236]	@ (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80023f8:	4a38      	ldr	r2, [pc, #224]	@ (80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	e004      	b.n	8002414 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4a34      	ldr	r2, [pc, #208]	@ (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002414:	4b2e      	ldr	r3, [pc, #184]	@ (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002420:	d102      	bne.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	61bb      	str	r3, [r7, #24]
      break;
 8002426:	e04a      	b.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4a2d      	ldr	r2, [pc, #180]	@ (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	61bb      	str	r3, [r7, #24]
      break;
 8002436:	e042      	b.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002438:	4b25      	ldr	r3, [pc, #148]	@ (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002448:	d108      	bne.n	800245c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002454:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	e01f      	b.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002466:	d109      	bne.n	800247c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002474:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	e00f      	b.n	800249c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002486:	d11c      	bne.n	80024c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d016      	beq.n	80024c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002494:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002498:	61bb      	str	r3, [r7, #24]
      break;
 800249a:	e012      	b.n	80024c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800249c:	e011      	b.n	80024c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800249e:	f7ff fe85 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	0b9b      	lsrs	r3, r3, #14
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	3301      	adds	r3, #1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	61bb      	str	r3, [r7, #24]
      break;
 80024b8:	e004      	b.n	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024ba:	bf00      	nop
 80024bc:	e002      	b.n	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024c2:	bf00      	nop
    }
  }
  return (frequency);
 80024c4:	69bb      	ldr	r3, [r7, #24]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3720      	adds	r7, #32
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	080032e4 	.word	0x080032e4
 80024d8:	080032f4 	.word	0x080032f4
 80024dc:	007a1200 	.word	0x007a1200
 80024e0:	003d0900 	.word	0x003d0900
 80024e4:	aaaaaaab 	.word	0xaaaaaaab

080024e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e042      	b.n	8002580 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe f80a 	bl	8000528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	@ 0x24
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800252a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f971 	bl	8002814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d175      	bne.n	8002694 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_UART_Transmit+0x2c>
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e06e      	b.n	8002696 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2221      	movs	r2, #33	@ 0x21
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025c6:	f7fe f8eb 	bl	80007a0 <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025e0:	d108      	bne.n	80025f4 <HAL_UART_Transmit+0x6c>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	e003      	b.n	80025fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025fc:	e02e      	b.n	800265c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	2180      	movs	r1, #128	@ 0x80
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f848 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e03a      	b.n	8002696 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10b      	bne.n	800263e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002634:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	3302      	adds	r3, #2
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	e007      	b.n	800264e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	3301      	adds	r3, #1
 800264c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1cb      	bne.n	80025fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2200      	movs	r2, #0
 800266e:	2140      	movs	r1, #64	@ 0x40
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f814 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e006      	b.n	8002696 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ae:	e03b      	b.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d037      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b8:	f7fe f872 	bl	80007a0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	6a3a      	ldr	r2, [r7, #32]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d302      	bcc.n	80026ce <UART_WaitOnFlagUntilTimeout+0x30>
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e03a      	b.n	8002748 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d023      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b80      	cmp	r3, #128	@ 0x80
 80026e4:	d020      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b40      	cmp	r3, #64	@ 0x40
 80026ea:	d01d      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d116      	bne.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f81d 	bl	8002750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2208      	movs	r2, #8
 800271a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e00f      	b.n	8002748 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4013      	ands	r3, r2
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	429a      	cmp	r2, r3
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	429a      	cmp	r2, r3
 8002744:	d0b4      	beq.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002750:	b480      	push	{r7}
 8002752:	b095      	sub	sp, #84	@ 0x54
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	330c      	adds	r3, #12
 800275e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002762:	e853 3f00 	ldrex	r3, [r3]
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800276e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002778:	643a      	str	r2, [r7, #64]	@ 0x40
 800277a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800277e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002780:	e841 2300 	strex	r3, r2, [r1]
 8002784:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e5      	bne.n	8002758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	e853 3f00 	ldrex	r3, [r3]
 800279a:	61fb      	str	r3, [r7, #28]
   return(result);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3314      	adds	r3, #20
 80027aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027b4:	e841 2300 	strex	r3, r2, [r1]
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e5      	bne.n	800278c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d119      	bne.n	80027fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	330c      	adds	r3, #12
 80027ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f023 0310 	bic.w	r3, r3, #16
 80027de:	647b      	str	r3, [r7, #68]	@ 0x44
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	330c      	adds	r3, #12
 80027e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027e8:	61ba      	str	r2, [r7, #24]
 80027ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	613b      	str	r3, [r7, #16]
   return(result);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e5      	bne.n	80027c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800280a:	bf00      	nop
 800280c:	3754      	adds	r7, #84	@ 0x54
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800284e:	f023 030c 	bic.w	r3, r3, #12
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	430b      	orrs	r3, r1
 800285a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2c      	ldr	r2, [pc, #176]	@ (8002928 <UART_SetConfig+0x114>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800287c:	f7ff fc96 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	e002      	b.n	800288a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002884:	f7ff fc7e 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8002888:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009a      	lsls	r2, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	4a22      	ldr	r2, [pc, #136]	@ (800292c <UART_SetConfig+0x118>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	0119      	lsls	r1, r3, #4
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009a      	lsls	r2, r3, #2
 80028b4:	441a      	add	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c0:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <UART_SetConfig+0x118>)
 80028c2:	fba3 0302 	umull	r0, r3, r3, r2
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	2064      	movs	r0, #100	@ 0x64
 80028ca:	fb00 f303 	mul.w	r3, r0, r3
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	3332      	adds	r3, #50	@ 0x32
 80028d4:	4a15      	ldr	r2, [pc, #84]	@ (800292c <UART_SetConfig+0x118>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028e0:	4419      	add	r1, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	009a      	lsls	r2, r3, #2
 80028ec:	441a      	add	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f8:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <UART_SetConfig+0x118>)
 80028fa:	fba3 0302 	umull	r0, r3, r3, r2
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2064      	movs	r0, #100	@ 0x64
 8002902:	fb00 f303 	mul.w	r3, r0, r3
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	3332      	adds	r3, #50	@ 0x32
 800290c:	4a07      	ldr	r2, [pc, #28]	@ (800292c <UART_SetConfig+0x118>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	440a      	add	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40013800 	.word	0x40013800
 800292c:	51eb851f 	.word	0x51eb851f

08002930 <siprintf>:
 8002930:	b40e      	push	{r1, r2, r3}
 8002932:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002936:	b510      	push	{r4, lr}
 8002938:	2400      	movs	r4, #0
 800293a:	b09d      	sub	sp, #116	@ 0x74
 800293c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800293e:	9002      	str	r0, [sp, #8]
 8002940:	9006      	str	r0, [sp, #24]
 8002942:	9107      	str	r1, [sp, #28]
 8002944:	9104      	str	r1, [sp, #16]
 8002946:	4809      	ldr	r0, [pc, #36]	@ (800296c <siprintf+0x3c>)
 8002948:	4909      	ldr	r1, [pc, #36]	@ (8002970 <siprintf+0x40>)
 800294a:	f853 2b04 	ldr.w	r2, [r3], #4
 800294e:	9105      	str	r1, [sp, #20]
 8002950:	6800      	ldr	r0, [r0, #0]
 8002952:	a902      	add	r1, sp, #8
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002958:	f000 f992 	bl	8002c80 <_svfiprintf_r>
 800295c:	9b02      	ldr	r3, [sp, #8]
 800295e:	701c      	strb	r4, [r3, #0]
 8002960:	b01d      	add	sp, #116	@ 0x74
 8002962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002966:	b003      	add	sp, #12
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	2000000c 	.word	0x2000000c
 8002970:	ffff0208 	.word	0xffff0208

08002974 <memset>:
 8002974:	4603      	mov	r3, r0
 8002976:	4402      	add	r2, r0
 8002978:	4293      	cmp	r3, r2
 800297a:	d100      	bne.n	800297e <memset+0xa>
 800297c:	4770      	bx	lr
 800297e:	f803 1b01 	strb.w	r1, [r3], #1
 8002982:	e7f9      	b.n	8002978 <memset+0x4>

08002984 <__errno>:
 8002984:	4b01      	ldr	r3, [pc, #4]	@ (800298c <__errno+0x8>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	2000000c 	.word	0x2000000c

08002990 <__libc_init_array>:
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	2600      	movs	r6, #0
 8002994:	4d0c      	ldr	r5, [pc, #48]	@ (80029c8 <__libc_init_array+0x38>)
 8002996:	4c0d      	ldr	r4, [pc, #52]	@ (80029cc <__libc_init_array+0x3c>)
 8002998:	1b64      	subs	r4, r4, r5
 800299a:	10a4      	asrs	r4, r4, #2
 800299c:	42a6      	cmp	r6, r4
 800299e:	d109      	bne.n	80029b4 <__libc_init_array+0x24>
 80029a0:	f000 fc76 	bl	8003290 <_init>
 80029a4:	2600      	movs	r6, #0
 80029a6:	4d0a      	ldr	r5, [pc, #40]	@ (80029d0 <__libc_init_array+0x40>)
 80029a8:	4c0a      	ldr	r4, [pc, #40]	@ (80029d4 <__libc_init_array+0x44>)
 80029aa:	1b64      	subs	r4, r4, r5
 80029ac:	10a4      	asrs	r4, r4, #2
 80029ae:	42a6      	cmp	r6, r4
 80029b0:	d105      	bne.n	80029be <__libc_init_array+0x2e>
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
 80029b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b8:	4798      	blx	r3
 80029ba:	3601      	adds	r6, #1
 80029bc:	e7ee      	b.n	800299c <__libc_init_array+0xc>
 80029be:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c2:	4798      	blx	r3
 80029c4:	3601      	adds	r6, #1
 80029c6:	e7f2      	b.n	80029ae <__libc_init_array+0x1e>
 80029c8:	08003334 	.word	0x08003334
 80029cc:	08003334 	.word	0x08003334
 80029d0:	08003334 	.word	0x08003334
 80029d4:	08003338 	.word	0x08003338

080029d8 <__retarget_lock_acquire_recursive>:
 80029d8:	4770      	bx	lr

080029da <__retarget_lock_release_recursive>:
 80029da:	4770      	bx	lr

080029dc <_free_r>:
 80029dc:	b538      	push	{r3, r4, r5, lr}
 80029de:	4605      	mov	r5, r0
 80029e0:	2900      	cmp	r1, #0
 80029e2:	d040      	beq.n	8002a66 <_free_r+0x8a>
 80029e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029e8:	1f0c      	subs	r4, r1, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bfb8      	it	lt
 80029ee:	18e4      	addlt	r4, r4, r3
 80029f0:	f000 f8de 	bl	8002bb0 <__malloc_lock>
 80029f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <_free_r+0x8c>)
 80029f6:	6813      	ldr	r3, [r2, #0]
 80029f8:	b933      	cbnz	r3, 8002a08 <_free_r+0x2c>
 80029fa:	6063      	str	r3, [r4, #4]
 80029fc:	6014      	str	r4, [r2, #0]
 80029fe:	4628      	mov	r0, r5
 8002a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a04:	f000 b8da 	b.w	8002bbc <__malloc_unlock>
 8002a08:	42a3      	cmp	r3, r4
 8002a0a:	d908      	bls.n	8002a1e <_free_r+0x42>
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	1821      	adds	r1, r4, r0
 8002a10:	428b      	cmp	r3, r1
 8002a12:	bf01      	itttt	eq
 8002a14:	6819      	ldreq	r1, [r3, #0]
 8002a16:	685b      	ldreq	r3, [r3, #4]
 8002a18:	1809      	addeq	r1, r1, r0
 8002a1a:	6021      	streq	r1, [r4, #0]
 8002a1c:	e7ed      	b.n	80029fa <_free_r+0x1e>
 8002a1e:	461a      	mov	r2, r3
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	b10b      	cbz	r3, 8002a28 <_free_r+0x4c>
 8002a24:	42a3      	cmp	r3, r4
 8002a26:	d9fa      	bls.n	8002a1e <_free_r+0x42>
 8002a28:	6811      	ldr	r1, [r2, #0]
 8002a2a:	1850      	adds	r0, r2, r1
 8002a2c:	42a0      	cmp	r0, r4
 8002a2e:	d10b      	bne.n	8002a48 <_free_r+0x6c>
 8002a30:	6820      	ldr	r0, [r4, #0]
 8002a32:	4401      	add	r1, r0
 8002a34:	1850      	adds	r0, r2, r1
 8002a36:	4283      	cmp	r3, r0
 8002a38:	6011      	str	r1, [r2, #0]
 8002a3a:	d1e0      	bne.n	80029fe <_free_r+0x22>
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4408      	add	r0, r1
 8002a42:	6010      	str	r0, [r2, #0]
 8002a44:	6053      	str	r3, [r2, #4]
 8002a46:	e7da      	b.n	80029fe <_free_r+0x22>
 8002a48:	d902      	bls.n	8002a50 <_free_r+0x74>
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	602b      	str	r3, [r5, #0]
 8002a4e:	e7d6      	b.n	80029fe <_free_r+0x22>
 8002a50:	6820      	ldr	r0, [r4, #0]
 8002a52:	1821      	adds	r1, r4, r0
 8002a54:	428b      	cmp	r3, r1
 8002a56:	bf01      	itttt	eq
 8002a58:	6819      	ldreq	r1, [r3, #0]
 8002a5a:	685b      	ldreq	r3, [r3, #4]
 8002a5c:	1809      	addeq	r1, r1, r0
 8002a5e:	6021      	streq	r1, [r4, #0]
 8002a60:	6063      	str	r3, [r4, #4]
 8002a62:	6054      	str	r4, [r2, #4]
 8002a64:	e7cb      	b.n	80029fe <_free_r+0x22>
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
 8002a68:	20000314 	.word	0x20000314

08002a6c <sbrk_aligned>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	4e0f      	ldr	r6, [pc, #60]	@ (8002aac <sbrk_aligned+0x40>)
 8002a70:	460c      	mov	r4, r1
 8002a72:	6831      	ldr	r1, [r6, #0]
 8002a74:	4605      	mov	r5, r0
 8002a76:	b911      	cbnz	r1, 8002a7e <sbrk_aligned+0x12>
 8002a78:	f000 fba8 	bl	80031cc <_sbrk_r>
 8002a7c:	6030      	str	r0, [r6, #0]
 8002a7e:	4621      	mov	r1, r4
 8002a80:	4628      	mov	r0, r5
 8002a82:	f000 fba3 	bl	80031cc <_sbrk_r>
 8002a86:	1c43      	adds	r3, r0, #1
 8002a88:	d103      	bne.n	8002a92 <sbrk_aligned+0x26>
 8002a8a:	f04f 34ff 	mov.w	r4, #4294967295
 8002a8e:	4620      	mov	r0, r4
 8002a90:	bd70      	pop	{r4, r5, r6, pc}
 8002a92:	1cc4      	adds	r4, r0, #3
 8002a94:	f024 0403 	bic.w	r4, r4, #3
 8002a98:	42a0      	cmp	r0, r4
 8002a9a:	d0f8      	beq.n	8002a8e <sbrk_aligned+0x22>
 8002a9c:	1a21      	subs	r1, r4, r0
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	f000 fb94 	bl	80031cc <_sbrk_r>
 8002aa4:	3001      	adds	r0, #1
 8002aa6:	d1f2      	bne.n	8002a8e <sbrk_aligned+0x22>
 8002aa8:	e7ef      	b.n	8002a8a <sbrk_aligned+0x1e>
 8002aaa:	bf00      	nop
 8002aac:	20000310 	.word	0x20000310

08002ab0 <_malloc_r>:
 8002ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ab4:	1ccd      	adds	r5, r1, #3
 8002ab6:	f025 0503 	bic.w	r5, r5, #3
 8002aba:	3508      	adds	r5, #8
 8002abc:	2d0c      	cmp	r5, #12
 8002abe:	bf38      	it	cc
 8002ac0:	250c      	movcc	r5, #12
 8002ac2:	2d00      	cmp	r5, #0
 8002ac4:	4606      	mov	r6, r0
 8002ac6:	db01      	blt.n	8002acc <_malloc_r+0x1c>
 8002ac8:	42a9      	cmp	r1, r5
 8002aca:	d904      	bls.n	8002ad6 <_malloc_r+0x26>
 8002acc:	230c      	movs	r3, #12
 8002ace:	6033      	str	r3, [r6, #0]
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002bac <_malloc_r+0xfc>
 8002ada:	f000 f869 	bl	8002bb0 <__malloc_lock>
 8002ade:	f8d8 3000 	ldr.w	r3, [r8]
 8002ae2:	461c      	mov	r4, r3
 8002ae4:	bb44      	cbnz	r4, 8002b38 <_malloc_r+0x88>
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	4630      	mov	r0, r6
 8002aea:	f7ff ffbf 	bl	8002a6c <sbrk_aligned>
 8002aee:	1c43      	adds	r3, r0, #1
 8002af0:	4604      	mov	r4, r0
 8002af2:	d158      	bne.n	8002ba6 <_malloc_r+0xf6>
 8002af4:	f8d8 4000 	ldr.w	r4, [r8]
 8002af8:	4627      	mov	r7, r4
 8002afa:	2f00      	cmp	r7, #0
 8002afc:	d143      	bne.n	8002b86 <_malloc_r+0xd6>
 8002afe:	2c00      	cmp	r4, #0
 8002b00:	d04b      	beq.n	8002b9a <_malloc_r+0xea>
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	4639      	mov	r1, r7
 8002b06:	4630      	mov	r0, r6
 8002b08:	eb04 0903 	add.w	r9, r4, r3
 8002b0c:	f000 fb5e 	bl	80031cc <_sbrk_r>
 8002b10:	4581      	cmp	r9, r0
 8002b12:	d142      	bne.n	8002b9a <_malloc_r+0xea>
 8002b14:	6821      	ldr	r1, [r4, #0]
 8002b16:	4630      	mov	r0, r6
 8002b18:	1a6d      	subs	r5, r5, r1
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7ff ffa6 	bl	8002a6c <sbrk_aligned>
 8002b20:	3001      	adds	r0, #1
 8002b22:	d03a      	beq.n	8002b9a <_malloc_r+0xea>
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	442b      	add	r3, r5
 8002b28:	6023      	str	r3, [r4, #0]
 8002b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	bb62      	cbnz	r2, 8002b8c <_malloc_r+0xdc>
 8002b32:	f8c8 7000 	str.w	r7, [r8]
 8002b36:	e00f      	b.n	8002b58 <_malloc_r+0xa8>
 8002b38:	6822      	ldr	r2, [r4, #0]
 8002b3a:	1b52      	subs	r2, r2, r5
 8002b3c:	d420      	bmi.n	8002b80 <_malloc_r+0xd0>
 8002b3e:	2a0b      	cmp	r2, #11
 8002b40:	d917      	bls.n	8002b72 <_malloc_r+0xc2>
 8002b42:	1961      	adds	r1, r4, r5
 8002b44:	42a3      	cmp	r3, r4
 8002b46:	6025      	str	r5, [r4, #0]
 8002b48:	bf18      	it	ne
 8002b4a:	6059      	strne	r1, [r3, #4]
 8002b4c:	6863      	ldr	r3, [r4, #4]
 8002b4e:	bf08      	it	eq
 8002b50:	f8c8 1000 	streq.w	r1, [r8]
 8002b54:	5162      	str	r2, [r4, r5]
 8002b56:	604b      	str	r3, [r1, #4]
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f000 f82f 	bl	8002bbc <__malloc_unlock>
 8002b5e:	f104 000b 	add.w	r0, r4, #11
 8002b62:	1d23      	adds	r3, r4, #4
 8002b64:	f020 0007 	bic.w	r0, r0, #7
 8002b68:	1ac2      	subs	r2, r0, r3
 8002b6a:	bf1c      	itt	ne
 8002b6c:	1a1b      	subne	r3, r3, r0
 8002b6e:	50a3      	strne	r3, [r4, r2]
 8002b70:	e7af      	b.n	8002ad2 <_malloc_r+0x22>
 8002b72:	6862      	ldr	r2, [r4, #4]
 8002b74:	42a3      	cmp	r3, r4
 8002b76:	bf0c      	ite	eq
 8002b78:	f8c8 2000 	streq.w	r2, [r8]
 8002b7c:	605a      	strne	r2, [r3, #4]
 8002b7e:	e7eb      	b.n	8002b58 <_malloc_r+0xa8>
 8002b80:	4623      	mov	r3, r4
 8002b82:	6864      	ldr	r4, [r4, #4]
 8002b84:	e7ae      	b.n	8002ae4 <_malloc_r+0x34>
 8002b86:	463c      	mov	r4, r7
 8002b88:	687f      	ldr	r7, [r7, #4]
 8002b8a:	e7b6      	b.n	8002afa <_malloc_r+0x4a>
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	42a3      	cmp	r3, r4
 8002b92:	d1fb      	bne.n	8002b8c <_malloc_r+0xdc>
 8002b94:	2300      	movs	r3, #0
 8002b96:	6053      	str	r3, [r2, #4]
 8002b98:	e7de      	b.n	8002b58 <_malloc_r+0xa8>
 8002b9a:	230c      	movs	r3, #12
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	6033      	str	r3, [r6, #0]
 8002ba0:	f000 f80c 	bl	8002bbc <__malloc_unlock>
 8002ba4:	e794      	b.n	8002ad0 <_malloc_r+0x20>
 8002ba6:	6005      	str	r5, [r0, #0]
 8002ba8:	e7d6      	b.n	8002b58 <_malloc_r+0xa8>
 8002baa:	bf00      	nop
 8002bac:	20000314 	.word	0x20000314

08002bb0 <__malloc_lock>:
 8002bb0:	4801      	ldr	r0, [pc, #4]	@ (8002bb8 <__malloc_lock+0x8>)
 8002bb2:	f7ff bf11 	b.w	80029d8 <__retarget_lock_acquire_recursive>
 8002bb6:	bf00      	nop
 8002bb8:	2000030c 	.word	0x2000030c

08002bbc <__malloc_unlock>:
 8002bbc:	4801      	ldr	r0, [pc, #4]	@ (8002bc4 <__malloc_unlock+0x8>)
 8002bbe:	f7ff bf0c 	b.w	80029da <__retarget_lock_release_recursive>
 8002bc2:	bf00      	nop
 8002bc4:	2000030c 	.word	0x2000030c

08002bc8 <__ssputs_r>:
 8002bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bcc:	461f      	mov	r7, r3
 8002bce:	688e      	ldr	r6, [r1, #8]
 8002bd0:	4682      	mov	sl, r0
 8002bd2:	42be      	cmp	r6, r7
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	4690      	mov	r8, r2
 8002bd8:	680b      	ldr	r3, [r1, #0]
 8002bda:	d82d      	bhi.n	8002c38 <__ssputs_r+0x70>
 8002bdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002be0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002be4:	d026      	beq.n	8002c34 <__ssputs_r+0x6c>
 8002be6:	6965      	ldr	r5, [r4, #20]
 8002be8:	6909      	ldr	r1, [r1, #16]
 8002bea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bee:	eba3 0901 	sub.w	r9, r3, r1
 8002bf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bf6:	1c7b      	adds	r3, r7, #1
 8002bf8:	444b      	add	r3, r9
 8002bfa:	106d      	asrs	r5, r5, #1
 8002bfc:	429d      	cmp	r5, r3
 8002bfe:	bf38      	it	cc
 8002c00:	461d      	movcc	r5, r3
 8002c02:	0553      	lsls	r3, r2, #21
 8002c04:	d527      	bpl.n	8002c56 <__ssputs_r+0x8e>
 8002c06:	4629      	mov	r1, r5
 8002c08:	f7ff ff52 	bl	8002ab0 <_malloc_r>
 8002c0c:	4606      	mov	r6, r0
 8002c0e:	b360      	cbz	r0, 8002c6a <__ssputs_r+0xa2>
 8002c10:	464a      	mov	r2, r9
 8002c12:	6921      	ldr	r1, [r4, #16]
 8002c14:	f000 faf8 	bl	8003208 <memcpy>
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c22:	81a3      	strh	r3, [r4, #12]
 8002c24:	6126      	str	r6, [r4, #16]
 8002c26:	444e      	add	r6, r9
 8002c28:	6026      	str	r6, [r4, #0]
 8002c2a:	463e      	mov	r6, r7
 8002c2c:	6165      	str	r5, [r4, #20]
 8002c2e:	eba5 0509 	sub.w	r5, r5, r9
 8002c32:	60a5      	str	r5, [r4, #8]
 8002c34:	42be      	cmp	r6, r7
 8002c36:	d900      	bls.n	8002c3a <__ssputs_r+0x72>
 8002c38:	463e      	mov	r6, r7
 8002c3a:	4632      	mov	r2, r6
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	6820      	ldr	r0, [r4, #0]
 8002c40:	f000 faaa 	bl	8003198 <memmove>
 8002c44:	2000      	movs	r0, #0
 8002c46:	68a3      	ldr	r3, [r4, #8]
 8002c48:	1b9b      	subs	r3, r3, r6
 8002c4a:	60a3      	str	r3, [r4, #8]
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	4433      	add	r3, r6
 8002c50:	6023      	str	r3, [r4, #0]
 8002c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c56:	462a      	mov	r2, r5
 8002c58:	f000 fae4 	bl	8003224 <_realloc_r>
 8002c5c:	4606      	mov	r6, r0
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d1e0      	bne.n	8002c24 <__ssputs_r+0x5c>
 8002c62:	4650      	mov	r0, sl
 8002c64:	6921      	ldr	r1, [r4, #16]
 8002c66:	f7ff feb9 	bl	80029dc <_free_r>
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	f8ca 3000 	str.w	r3, [sl]
 8002c70:	89a3      	ldrh	r3, [r4, #12]
 8002c72:	f04f 30ff 	mov.w	r0, #4294967295
 8002c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c7a:	81a3      	strh	r3, [r4, #12]
 8002c7c:	e7e9      	b.n	8002c52 <__ssputs_r+0x8a>
	...

08002c80 <_svfiprintf_r>:
 8002c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c84:	4698      	mov	r8, r3
 8002c86:	898b      	ldrh	r3, [r1, #12]
 8002c88:	4607      	mov	r7, r0
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	460d      	mov	r5, r1
 8002c8e:	4614      	mov	r4, r2
 8002c90:	b09d      	sub	sp, #116	@ 0x74
 8002c92:	d510      	bpl.n	8002cb6 <_svfiprintf_r+0x36>
 8002c94:	690b      	ldr	r3, [r1, #16]
 8002c96:	b973      	cbnz	r3, 8002cb6 <_svfiprintf_r+0x36>
 8002c98:	2140      	movs	r1, #64	@ 0x40
 8002c9a:	f7ff ff09 	bl	8002ab0 <_malloc_r>
 8002c9e:	6028      	str	r0, [r5, #0]
 8002ca0:	6128      	str	r0, [r5, #16]
 8002ca2:	b930      	cbnz	r0, 8002cb2 <_svfiprintf_r+0x32>
 8002ca4:	230c      	movs	r3, #12
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	b01d      	add	sp, #116	@ 0x74
 8002cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cb2:	2340      	movs	r3, #64	@ 0x40
 8002cb4:	616b      	str	r3, [r5, #20]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cba:	2320      	movs	r3, #32
 8002cbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002cc0:	2330      	movs	r3, #48	@ 0x30
 8002cc2:	f04f 0901 	mov.w	r9, #1
 8002cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002e64 <_svfiprintf_r+0x1e4>
 8002cce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	469a      	mov	sl, r3
 8002cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cda:	b10a      	cbz	r2, 8002ce0 <_svfiprintf_r+0x60>
 8002cdc:	2a25      	cmp	r2, #37	@ 0x25
 8002cde:	d1f9      	bne.n	8002cd4 <_svfiprintf_r+0x54>
 8002ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8002ce4:	d00b      	beq.n	8002cfe <_svfiprintf_r+0x7e>
 8002ce6:	465b      	mov	r3, fp
 8002ce8:	4622      	mov	r2, r4
 8002cea:	4629      	mov	r1, r5
 8002cec:	4638      	mov	r0, r7
 8002cee:	f7ff ff6b 	bl	8002bc8 <__ssputs_r>
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	f000 80a7 	beq.w	8002e46 <_svfiprintf_r+0x1c6>
 8002cf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cfa:	445a      	add	r2, fp
 8002cfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 809f 	beq.w	8002e46 <_svfiprintf_r+0x1c6>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d12:	f10a 0a01 	add.w	sl, sl, #1
 8002d16:	9304      	str	r3, [sp, #16]
 8002d18:	9307      	str	r3, [sp, #28]
 8002d1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d20:	4654      	mov	r4, sl
 8002d22:	2205      	movs	r2, #5
 8002d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d28:	484e      	ldr	r0, [pc, #312]	@ (8002e64 <_svfiprintf_r+0x1e4>)
 8002d2a:	f000 fa5f 	bl	80031ec <memchr>
 8002d2e:	9a04      	ldr	r2, [sp, #16]
 8002d30:	b9d8      	cbnz	r0, 8002d6a <_svfiprintf_r+0xea>
 8002d32:	06d0      	lsls	r0, r2, #27
 8002d34:	bf44      	itt	mi
 8002d36:	2320      	movmi	r3, #32
 8002d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d3c:	0711      	lsls	r1, r2, #28
 8002d3e:	bf44      	itt	mi
 8002d40:	232b      	movmi	r3, #43	@ 0x2b
 8002d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d46:	f89a 3000 	ldrb.w	r3, [sl]
 8002d4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d4c:	d015      	beq.n	8002d7a <_svfiprintf_r+0xfa>
 8002d4e:	4654      	mov	r4, sl
 8002d50:	2000      	movs	r0, #0
 8002d52:	f04f 0c0a 	mov.w	ip, #10
 8002d56:	9a07      	ldr	r2, [sp, #28]
 8002d58:	4621      	mov	r1, r4
 8002d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d5e:	3b30      	subs	r3, #48	@ 0x30
 8002d60:	2b09      	cmp	r3, #9
 8002d62:	d94b      	bls.n	8002dfc <_svfiprintf_r+0x17c>
 8002d64:	b1b0      	cbz	r0, 8002d94 <_svfiprintf_r+0x114>
 8002d66:	9207      	str	r2, [sp, #28]
 8002d68:	e014      	b.n	8002d94 <_svfiprintf_r+0x114>
 8002d6a:	eba0 0308 	sub.w	r3, r0, r8
 8002d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	46a2      	mov	sl, r4
 8002d76:	9304      	str	r3, [sp, #16]
 8002d78:	e7d2      	b.n	8002d20 <_svfiprintf_r+0xa0>
 8002d7a:	9b03      	ldr	r3, [sp, #12]
 8002d7c:	1d19      	adds	r1, r3, #4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	9103      	str	r1, [sp, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bfbb      	ittet	lt
 8002d86:	425b      	neglt	r3, r3
 8002d88:	f042 0202 	orrlt.w	r2, r2, #2
 8002d8c:	9307      	strge	r3, [sp, #28]
 8002d8e:	9307      	strlt	r3, [sp, #28]
 8002d90:	bfb8      	it	lt
 8002d92:	9204      	strlt	r2, [sp, #16]
 8002d94:	7823      	ldrb	r3, [r4, #0]
 8002d96:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d98:	d10a      	bne.n	8002db0 <_svfiprintf_r+0x130>
 8002d9a:	7863      	ldrb	r3, [r4, #1]
 8002d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d9e:	d132      	bne.n	8002e06 <_svfiprintf_r+0x186>
 8002da0:	9b03      	ldr	r3, [sp, #12]
 8002da2:	3402      	adds	r4, #2
 8002da4:	1d1a      	adds	r2, r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	9203      	str	r2, [sp, #12]
 8002daa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002dae:	9305      	str	r3, [sp, #20]
 8002db0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002e68 <_svfiprintf_r+0x1e8>
 8002db4:	2203      	movs	r2, #3
 8002db6:	4650      	mov	r0, sl
 8002db8:	7821      	ldrb	r1, [r4, #0]
 8002dba:	f000 fa17 	bl	80031ec <memchr>
 8002dbe:	b138      	cbz	r0, 8002dd0 <_svfiprintf_r+0x150>
 8002dc0:	2240      	movs	r2, #64	@ 0x40
 8002dc2:	9b04      	ldr	r3, [sp, #16]
 8002dc4:	eba0 000a 	sub.w	r0, r0, sl
 8002dc8:	4082      	lsls	r2, r0
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	3401      	adds	r4, #1
 8002dce:	9304      	str	r3, [sp, #16]
 8002dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dd4:	2206      	movs	r2, #6
 8002dd6:	4825      	ldr	r0, [pc, #148]	@ (8002e6c <_svfiprintf_r+0x1ec>)
 8002dd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ddc:	f000 fa06 	bl	80031ec <memchr>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d036      	beq.n	8002e52 <_svfiprintf_r+0x1d2>
 8002de4:	4b22      	ldr	r3, [pc, #136]	@ (8002e70 <_svfiprintf_r+0x1f0>)
 8002de6:	bb1b      	cbnz	r3, 8002e30 <_svfiprintf_r+0x1b0>
 8002de8:	9b03      	ldr	r3, [sp, #12]
 8002dea:	3307      	adds	r3, #7
 8002dec:	f023 0307 	bic.w	r3, r3, #7
 8002df0:	3308      	adds	r3, #8
 8002df2:	9303      	str	r3, [sp, #12]
 8002df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002df6:	4433      	add	r3, r6
 8002df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dfa:	e76a      	b.n	8002cd2 <_svfiprintf_r+0x52>
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	2001      	movs	r0, #1
 8002e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e04:	e7a8      	b.n	8002d58 <_svfiprintf_r+0xd8>
 8002e06:	2300      	movs	r3, #0
 8002e08:	f04f 0c0a 	mov.w	ip, #10
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	3401      	adds	r4, #1
 8002e10:	9305      	str	r3, [sp, #20]
 8002e12:	4620      	mov	r0, r4
 8002e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e18:	3a30      	subs	r2, #48	@ 0x30
 8002e1a:	2a09      	cmp	r2, #9
 8002e1c:	d903      	bls.n	8002e26 <_svfiprintf_r+0x1a6>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0c6      	beq.n	8002db0 <_svfiprintf_r+0x130>
 8002e22:	9105      	str	r1, [sp, #20]
 8002e24:	e7c4      	b.n	8002db0 <_svfiprintf_r+0x130>
 8002e26:	4604      	mov	r4, r0
 8002e28:	2301      	movs	r3, #1
 8002e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e2e:	e7f0      	b.n	8002e12 <_svfiprintf_r+0x192>
 8002e30:	ab03      	add	r3, sp, #12
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	462a      	mov	r2, r5
 8002e36:	4638      	mov	r0, r7
 8002e38:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <_svfiprintf_r+0x1f4>)
 8002e3a:	a904      	add	r1, sp, #16
 8002e3c:	f3af 8000 	nop.w
 8002e40:	1c42      	adds	r2, r0, #1
 8002e42:	4606      	mov	r6, r0
 8002e44:	d1d6      	bne.n	8002df4 <_svfiprintf_r+0x174>
 8002e46:	89ab      	ldrh	r3, [r5, #12]
 8002e48:	065b      	lsls	r3, r3, #25
 8002e4a:	f53f af2d 	bmi.w	8002ca8 <_svfiprintf_r+0x28>
 8002e4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e50:	e72c      	b.n	8002cac <_svfiprintf_r+0x2c>
 8002e52:	ab03      	add	r3, sp, #12
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	462a      	mov	r2, r5
 8002e58:	4638      	mov	r0, r7
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <_svfiprintf_r+0x1f4>)
 8002e5c:	a904      	add	r1, sp, #16
 8002e5e:	f000 f87d 	bl	8002f5c <_printf_i>
 8002e62:	e7ed      	b.n	8002e40 <_svfiprintf_r+0x1c0>
 8002e64:	080032f6 	.word	0x080032f6
 8002e68:	080032fc 	.word	0x080032fc
 8002e6c:	08003300 	.word	0x08003300
 8002e70:	00000000 	.word	0x00000000
 8002e74:	08002bc9 	.word	0x08002bc9

08002e78 <_printf_common>:
 8002e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e7c:	4616      	mov	r6, r2
 8002e7e:	4698      	mov	r8, r3
 8002e80:	688a      	ldr	r2, [r1, #8]
 8002e82:	690b      	ldr	r3, [r1, #16]
 8002e84:	4607      	mov	r7, r0
 8002e86:	4293      	cmp	r3, r2
 8002e88:	bfb8      	it	lt
 8002e8a:	4613      	movlt	r3, r2
 8002e8c:	6033      	str	r3, [r6, #0]
 8002e8e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e92:	460c      	mov	r4, r1
 8002e94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e98:	b10a      	cbz	r2, 8002e9e <_printf_common+0x26>
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	6033      	str	r3, [r6, #0]
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	0699      	lsls	r1, r3, #26
 8002ea2:	bf42      	ittt	mi
 8002ea4:	6833      	ldrmi	r3, [r6, #0]
 8002ea6:	3302      	addmi	r3, #2
 8002ea8:	6033      	strmi	r3, [r6, #0]
 8002eaa:	6825      	ldr	r5, [r4, #0]
 8002eac:	f015 0506 	ands.w	r5, r5, #6
 8002eb0:	d106      	bne.n	8002ec0 <_printf_common+0x48>
 8002eb2:	f104 0a19 	add.w	sl, r4, #25
 8002eb6:	68e3      	ldr	r3, [r4, #12]
 8002eb8:	6832      	ldr	r2, [r6, #0]
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	42ab      	cmp	r3, r5
 8002ebe:	dc2b      	bgt.n	8002f18 <_printf_common+0xa0>
 8002ec0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ec4:	6822      	ldr	r2, [r4, #0]
 8002ec6:	3b00      	subs	r3, #0
 8002ec8:	bf18      	it	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	0692      	lsls	r2, r2, #26
 8002ece:	d430      	bmi.n	8002f32 <_printf_common+0xba>
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	4638      	mov	r0, r7
 8002ed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ed8:	47c8      	blx	r9
 8002eda:	3001      	adds	r0, #1
 8002edc:	d023      	beq.n	8002f26 <_printf_common+0xae>
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	6922      	ldr	r2, [r4, #16]
 8002ee2:	f003 0306 	and.w	r3, r3, #6
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	bf14      	ite	ne
 8002eea:	2500      	movne	r5, #0
 8002eec:	6833      	ldreq	r3, [r6, #0]
 8002eee:	f04f 0600 	mov.w	r6, #0
 8002ef2:	bf08      	it	eq
 8002ef4:	68e5      	ldreq	r5, [r4, #12]
 8002ef6:	f104 041a 	add.w	r4, r4, #26
 8002efa:	bf08      	it	eq
 8002efc:	1aed      	subeq	r5, r5, r3
 8002efe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f02:	bf08      	it	eq
 8002f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	bfc4      	itt	gt
 8002f0c:	1a9b      	subgt	r3, r3, r2
 8002f0e:	18ed      	addgt	r5, r5, r3
 8002f10:	42b5      	cmp	r5, r6
 8002f12:	d11a      	bne.n	8002f4a <_printf_common+0xd2>
 8002f14:	2000      	movs	r0, #0
 8002f16:	e008      	b.n	8002f2a <_printf_common+0xb2>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	4652      	mov	r2, sl
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	4638      	mov	r0, r7
 8002f20:	47c8      	blx	r9
 8002f22:	3001      	adds	r0, #1
 8002f24:	d103      	bne.n	8002f2e <_printf_common+0xb6>
 8002f26:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f2e:	3501      	adds	r5, #1
 8002f30:	e7c1      	b.n	8002eb6 <_printf_common+0x3e>
 8002f32:	2030      	movs	r0, #48	@ 0x30
 8002f34:	18e1      	adds	r1, r4, r3
 8002f36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f40:	4422      	add	r2, r4
 8002f42:	3302      	adds	r3, #2
 8002f44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f48:	e7c2      	b.n	8002ed0 <_printf_common+0x58>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	4622      	mov	r2, r4
 8002f4e:	4641      	mov	r1, r8
 8002f50:	4638      	mov	r0, r7
 8002f52:	47c8      	blx	r9
 8002f54:	3001      	adds	r0, #1
 8002f56:	d0e6      	beq.n	8002f26 <_printf_common+0xae>
 8002f58:	3601      	adds	r6, #1
 8002f5a:	e7d9      	b.n	8002f10 <_printf_common+0x98>

08002f5c <_printf_i>:
 8002f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f60:	7e0f      	ldrb	r7, [r1, #24]
 8002f62:	4691      	mov	r9, r2
 8002f64:	2f78      	cmp	r7, #120	@ 0x78
 8002f66:	4680      	mov	r8, r0
 8002f68:	460c      	mov	r4, r1
 8002f6a:	469a      	mov	sl, r3
 8002f6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f72:	d807      	bhi.n	8002f84 <_printf_i+0x28>
 8002f74:	2f62      	cmp	r7, #98	@ 0x62
 8002f76:	d80a      	bhi.n	8002f8e <_printf_i+0x32>
 8002f78:	2f00      	cmp	r7, #0
 8002f7a:	f000 80d1 	beq.w	8003120 <_printf_i+0x1c4>
 8002f7e:	2f58      	cmp	r7, #88	@ 0x58
 8002f80:	f000 80b8 	beq.w	80030f4 <_printf_i+0x198>
 8002f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f8c:	e03a      	b.n	8003004 <_printf_i+0xa8>
 8002f8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f92:	2b15      	cmp	r3, #21
 8002f94:	d8f6      	bhi.n	8002f84 <_printf_i+0x28>
 8002f96:	a101      	add	r1, pc, #4	@ (adr r1, 8002f9c <_printf_i+0x40>)
 8002f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f9c:	08002ff5 	.word	0x08002ff5
 8002fa0:	08003009 	.word	0x08003009
 8002fa4:	08002f85 	.word	0x08002f85
 8002fa8:	08002f85 	.word	0x08002f85
 8002fac:	08002f85 	.word	0x08002f85
 8002fb0:	08002f85 	.word	0x08002f85
 8002fb4:	08003009 	.word	0x08003009
 8002fb8:	08002f85 	.word	0x08002f85
 8002fbc:	08002f85 	.word	0x08002f85
 8002fc0:	08002f85 	.word	0x08002f85
 8002fc4:	08002f85 	.word	0x08002f85
 8002fc8:	08003107 	.word	0x08003107
 8002fcc:	08003033 	.word	0x08003033
 8002fd0:	080030c1 	.word	0x080030c1
 8002fd4:	08002f85 	.word	0x08002f85
 8002fd8:	08002f85 	.word	0x08002f85
 8002fdc:	08003129 	.word	0x08003129
 8002fe0:	08002f85 	.word	0x08002f85
 8002fe4:	08003033 	.word	0x08003033
 8002fe8:	08002f85 	.word	0x08002f85
 8002fec:	08002f85 	.word	0x08002f85
 8002ff0:	080030c9 	.word	0x080030c9
 8002ff4:	6833      	ldr	r3, [r6, #0]
 8002ff6:	1d1a      	adds	r2, r3, #4
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6032      	str	r2, [r6, #0]
 8002ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003000:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003004:	2301      	movs	r3, #1
 8003006:	e09c      	b.n	8003142 <_printf_i+0x1e6>
 8003008:	6833      	ldr	r3, [r6, #0]
 800300a:	6820      	ldr	r0, [r4, #0]
 800300c:	1d19      	adds	r1, r3, #4
 800300e:	6031      	str	r1, [r6, #0]
 8003010:	0606      	lsls	r6, r0, #24
 8003012:	d501      	bpl.n	8003018 <_printf_i+0xbc>
 8003014:	681d      	ldr	r5, [r3, #0]
 8003016:	e003      	b.n	8003020 <_printf_i+0xc4>
 8003018:	0645      	lsls	r5, r0, #25
 800301a:	d5fb      	bpl.n	8003014 <_printf_i+0xb8>
 800301c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003020:	2d00      	cmp	r5, #0
 8003022:	da03      	bge.n	800302c <_printf_i+0xd0>
 8003024:	232d      	movs	r3, #45	@ 0x2d
 8003026:	426d      	negs	r5, r5
 8003028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800302c:	230a      	movs	r3, #10
 800302e:	4858      	ldr	r0, [pc, #352]	@ (8003190 <_printf_i+0x234>)
 8003030:	e011      	b.n	8003056 <_printf_i+0xfa>
 8003032:	6821      	ldr	r1, [r4, #0]
 8003034:	6833      	ldr	r3, [r6, #0]
 8003036:	0608      	lsls	r0, r1, #24
 8003038:	f853 5b04 	ldr.w	r5, [r3], #4
 800303c:	d402      	bmi.n	8003044 <_printf_i+0xe8>
 800303e:	0649      	lsls	r1, r1, #25
 8003040:	bf48      	it	mi
 8003042:	b2ad      	uxthmi	r5, r5
 8003044:	2f6f      	cmp	r7, #111	@ 0x6f
 8003046:	6033      	str	r3, [r6, #0]
 8003048:	bf14      	ite	ne
 800304a:	230a      	movne	r3, #10
 800304c:	2308      	moveq	r3, #8
 800304e:	4850      	ldr	r0, [pc, #320]	@ (8003190 <_printf_i+0x234>)
 8003050:	2100      	movs	r1, #0
 8003052:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003056:	6866      	ldr	r6, [r4, #4]
 8003058:	2e00      	cmp	r6, #0
 800305a:	60a6      	str	r6, [r4, #8]
 800305c:	db05      	blt.n	800306a <_printf_i+0x10e>
 800305e:	6821      	ldr	r1, [r4, #0]
 8003060:	432e      	orrs	r6, r5
 8003062:	f021 0104 	bic.w	r1, r1, #4
 8003066:	6021      	str	r1, [r4, #0]
 8003068:	d04b      	beq.n	8003102 <_printf_i+0x1a6>
 800306a:	4616      	mov	r6, r2
 800306c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003070:	fb03 5711 	mls	r7, r3, r1, r5
 8003074:	5dc7      	ldrb	r7, [r0, r7]
 8003076:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800307a:	462f      	mov	r7, r5
 800307c:	42bb      	cmp	r3, r7
 800307e:	460d      	mov	r5, r1
 8003080:	d9f4      	bls.n	800306c <_printf_i+0x110>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d10b      	bne.n	800309e <_printf_i+0x142>
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	07df      	lsls	r7, r3, #31
 800308a:	d508      	bpl.n	800309e <_printf_i+0x142>
 800308c:	6923      	ldr	r3, [r4, #16]
 800308e:	6861      	ldr	r1, [r4, #4]
 8003090:	4299      	cmp	r1, r3
 8003092:	bfde      	ittt	le
 8003094:	2330      	movle	r3, #48	@ 0x30
 8003096:	f806 3c01 	strble.w	r3, [r6, #-1]
 800309a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800309e:	1b92      	subs	r2, r2, r6
 80030a0:	6122      	str	r2, [r4, #16]
 80030a2:	464b      	mov	r3, r9
 80030a4:	4621      	mov	r1, r4
 80030a6:	4640      	mov	r0, r8
 80030a8:	f8cd a000 	str.w	sl, [sp]
 80030ac:	aa03      	add	r2, sp, #12
 80030ae:	f7ff fee3 	bl	8002e78 <_printf_common>
 80030b2:	3001      	adds	r0, #1
 80030b4:	d14a      	bne.n	800314c <_printf_i+0x1f0>
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ba:	b004      	add	sp, #16
 80030bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	f043 0320 	orr.w	r3, r3, #32
 80030c6:	6023      	str	r3, [r4, #0]
 80030c8:	2778      	movs	r7, #120	@ 0x78
 80030ca:	4832      	ldr	r0, [pc, #200]	@ (8003194 <_printf_i+0x238>)
 80030cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	6831      	ldr	r1, [r6, #0]
 80030d4:	061f      	lsls	r7, r3, #24
 80030d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80030da:	d402      	bmi.n	80030e2 <_printf_i+0x186>
 80030dc:	065f      	lsls	r7, r3, #25
 80030de:	bf48      	it	mi
 80030e0:	b2ad      	uxthmi	r5, r5
 80030e2:	6031      	str	r1, [r6, #0]
 80030e4:	07d9      	lsls	r1, r3, #31
 80030e6:	bf44      	itt	mi
 80030e8:	f043 0320 	orrmi.w	r3, r3, #32
 80030ec:	6023      	strmi	r3, [r4, #0]
 80030ee:	b11d      	cbz	r5, 80030f8 <_printf_i+0x19c>
 80030f0:	2310      	movs	r3, #16
 80030f2:	e7ad      	b.n	8003050 <_printf_i+0xf4>
 80030f4:	4826      	ldr	r0, [pc, #152]	@ (8003190 <_printf_i+0x234>)
 80030f6:	e7e9      	b.n	80030cc <_printf_i+0x170>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	f023 0320 	bic.w	r3, r3, #32
 80030fe:	6023      	str	r3, [r4, #0]
 8003100:	e7f6      	b.n	80030f0 <_printf_i+0x194>
 8003102:	4616      	mov	r6, r2
 8003104:	e7bd      	b.n	8003082 <_printf_i+0x126>
 8003106:	6833      	ldr	r3, [r6, #0]
 8003108:	6825      	ldr	r5, [r4, #0]
 800310a:	1d18      	adds	r0, r3, #4
 800310c:	6961      	ldr	r1, [r4, #20]
 800310e:	6030      	str	r0, [r6, #0]
 8003110:	062e      	lsls	r6, r5, #24
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	d501      	bpl.n	800311a <_printf_i+0x1be>
 8003116:	6019      	str	r1, [r3, #0]
 8003118:	e002      	b.n	8003120 <_printf_i+0x1c4>
 800311a:	0668      	lsls	r0, r5, #25
 800311c:	d5fb      	bpl.n	8003116 <_printf_i+0x1ba>
 800311e:	8019      	strh	r1, [r3, #0]
 8003120:	2300      	movs	r3, #0
 8003122:	4616      	mov	r6, r2
 8003124:	6123      	str	r3, [r4, #16]
 8003126:	e7bc      	b.n	80030a2 <_printf_i+0x146>
 8003128:	6833      	ldr	r3, [r6, #0]
 800312a:	2100      	movs	r1, #0
 800312c:	1d1a      	adds	r2, r3, #4
 800312e:	6032      	str	r2, [r6, #0]
 8003130:	681e      	ldr	r6, [r3, #0]
 8003132:	6862      	ldr	r2, [r4, #4]
 8003134:	4630      	mov	r0, r6
 8003136:	f000 f859 	bl	80031ec <memchr>
 800313a:	b108      	cbz	r0, 8003140 <_printf_i+0x1e4>
 800313c:	1b80      	subs	r0, r0, r6
 800313e:	6060      	str	r0, [r4, #4]
 8003140:	6863      	ldr	r3, [r4, #4]
 8003142:	6123      	str	r3, [r4, #16]
 8003144:	2300      	movs	r3, #0
 8003146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800314a:	e7aa      	b.n	80030a2 <_printf_i+0x146>
 800314c:	4632      	mov	r2, r6
 800314e:	4649      	mov	r1, r9
 8003150:	4640      	mov	r0, r8
 8003152:	6923      	ldr	r3, [r4, #16]
 8003154:	47d0      	blx	sl
 8003156:	3001      	adds	r0, #1
 8003158:	d0ad      	beq.n	80030b6 <_printf_i+0x15a>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	079b      	lsls	r3, r3, #30
 800315e:	d413      	bmi.n	8003188 <_printf_i+0x22c>
 8003160:	68e0      	ldr	r0, [r4, #12]
 8003162:	9b03      	ldr	r3, [sp, #12]
 8003164:	4298      	cmp	r0, r3
 8003166:	bfb8      	it	lt
 8003168:	4618      	movlt	r0, r3
 800316a:	e7a6      	b.n	80030ba <_printf_i+0x15e>
 800316c:	2301      	movs	r3, #1
 800316e:	4632      	mov	r2, r6
 8003170:	4649      	mov	r1, r9
 8003172:	4640      	mov	r0, r8
 8003174:	47d0      	blx	sl
 8003176:	3001      	adds	r0, #1
 8003178:	d09d      	beq.n	80030b6 <_printf_i+0x15a>
 800317a:	3501      	adds	r5, #1
 800317c:	68e3      	ldr	r3, [r4, #12]
 800317e:	9903      	ldr	r1, [sp, #12]
 8003180:	1a5b      	subs	r3, r3, r1
 8003182:	42ab      	cmp	r3, r5
 8003184:	dcf2      	bgt.n	800316c <_printf_i+0x210>
 8003186:	e7eb      	b.n	8003160 <_printf_i+0x204>
 8003188:	2500      	movs	r5, #0
 800318a:	f104 0619 	add.w	r6, r4, #25
 800318e:	e7f5      	b.n	800317c <_printf_i+0x220>
 8003190:	08003307 	.word	0x08003307
 8003194:	08003318 	.word	0x08003318

08003198 <memmove>:
 8003198:	4288      	cmp	r0, r1
 800319a:	b510      	push	{r4, lr}
 800319c:	eb01 0402 	add.w	r4, r1, r2
 80031a0:	d902      	bls.n	80031a8 <memmove+0x10>
 80031a2:	4284      	cmp	r4, r0
 80031a4:	4623      	mov	r3, r4
 80031a6:	d807      	bhi.n	80031b8 <memmove+0x20>
 80031a8:	1e43      	subs	r3, r0, #1
 80031aa:	42a1      	cmp	r1, r4
 80031ac:	d008      	beq.n	80031c0 <memmove+0x28>
 80031ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031b6:	e7f8      	b.n	80031aa <memmove+0x12>
 80031b8:	4601      	mov	r1, r0
 80031ba:	4402      	add	r2, r0
 80031bc:	428a      	cmp	r2, r1
 80031be:	d100      	bne.n	80031c2 <memmove+0x2a>
 80031c0:	bd10      	pop	{r4, pc}
 80031c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031ca:	e7f7      	b.n	80031bc <memmove+0x24>

080031cc <_sbrk_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	2300      	movs	r3, #0
 80031d0:	4d05      	ldr	r5, [pc, #20]	@ (80031e8 <_sbrk_r+0x1c>)
 80031d2:	4604      	mov	r4, r0
 80031d4:	4608      	mov	r0, r1
 80031d6:	602b      	str	r3, [r5, #0]
 80031d8:	f7fd fa28 	bl	800062c <_sbrk>
 80031dc:	1c43      	adds	r3, r0, #1
 80031de:	d102      	bne.n	80031e6 <_sbrk_r+0x1a>
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	b103      	cbz	r3, 80031e6 <_sbrk_r+0x1a>
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	bd38      	pop	{r3, r4, r5, pc}
 80031e8:	20000308 	.word	0x20000308

080031ec <memchr>:
 80031ec:	4603      	mov	r3, r0
 80031ee:	b510      	push	{r4, lr}
 80031f0:	b2c9      	uxtb	r1, r1
 80031f2:	4402      	add	r2, r0
 80031f4:	4293      	cmp	r3, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	d101      	bne.n	80031fe <memchr+0x12>
 80031fa:	2000      	movs	r0, #0
 80031fc:	e003      	b.n	8003206 <memchr+0x1a>
 80031fe:	7804      	ldrb	r4, [r0, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	428c      	cmp	r4, r1
 8003204:	d1f6      	bne.n	80031f4 <memchr+0x8>
 8003206:	bd10      	pop	{r4, pc}

08003208 <memcpy>:
 8003208:	440a      	add	r2, r1
 800320a:	4291      	cmp	r1, r2
 800320c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003210:	d100      	bne.n	8003214 <memcpy+0xc>
 8003212:	4770      	bx	lr
 8003214:	b510      	push	{r4, lr}
 8003216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800321a:	4291      	cmp	r1, r2
 800321c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003220:	d1f9      	bne.n	8003216 <memcpy+0xe>
 8003222:	bd10      	pop	{r4, pc}

08003224 <_realloc_r>:
 8003224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003228:	4607      	mov	r7, r0
 800322a:	4614      	mov	r4, r2
 800322c:	460d      	mov	r5, r1
 800322e:	b921      	cbnz	r1, 800323a <_realloc_r+0x16>
 8003230:	4611      	mov	r1, r2
 8003232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003236:	f7ff bc3b 	b.w	8002ab0 <_malloc_r>
 800323a:	b92a      	cbnz	r2, 8003248 <_realloc_r+0x24>
 800323c:	f7ff fbce 	bl	80029dc <_free_r>
 8003240:	4625      	mov	r5, r4
 8003242:	4628      	mov	r0, r5
 8003244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003248:	f000 f81a 	bl	8003280 <_malloc_usable_size_r>
 800324c:	4284      	cmp	r4, r0
 800324e:	4606      	mov	r6, r0
 8003250:	d802      	bhi.n	8003258 <_realloc_r+0x34>
 8003252:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003256:	d8f4      	bhi.n	8003242 <_realloc_r+0x1e>
 8003258:	4621      	mov	r1, r4
 800325a:	4638      	mov	r0, r7
 800325c:	f7ff fc28 	bl	8002ab0 <_malloc_r>
 8003260:	4680      	mov	r8, r0
 8003262:	b908      	cbnz	r0, 8003268 <_realloc_r+0x44>
 8003264:	4645      	mov	r5, r8
 8003266:	e7ec      	b.n	8003242 <_realloc_r+0x1e>
 8003268:	42b4      	cmp	r4, r6
 800326a:	4622      	mov	r2, r4
 800326c:	4629      	mov	r1, r5
 800326e:	bf28      	it	cs
 8003270:	4632      	movcs	r2, r6
 8003272:	f7ff ffc9 	bl	8003208 <memcpy>
 8003276:	4629      	mov	r1, r5
 8003278:	4638      	mov	r0, r7
 800327a:	f7ff fbaf 	bl	80029dc <_free_r>
 800327e:	e7f1      	b.n	8003264 <_realloc_r+0x40>

08003280 <_malloc_usable_size_r>:
 8003280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003284:	1f18      	subs	r0, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	bfbc      	itt	lt
 800328a:	580b      	ldrlt	r3, [r1, r0]
 800328c:	18c0      	addlt	r0, r0, r3
 800328e:	4770      	bx	lr

08003290 <_init>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	bf00      	nop
 8003294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003296:	bc08      	pop	{r3}
 8003298:	469e      	mov	lr, r3
 800329a:	4770      	bx	lr

0800329c <_fini>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	bf00      	nop
 80032a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a2:	bc08      	pop	{r3}
 80032a4:	469e      	mov	lr, r3
 80032a6:	4770      	bx	lr
